// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;

namespace store.dal.Models
{
    /// <summary>
    /// This table contains a list of Army aircraft provided by LOGSA.  External Data Source.
    /// </summary>
    public partial class LtbAircraft
    {
        /// <summary>
        /// Unique generated number for the record used for row identity.
        /// </summary>
        public int AircraftId { get; set; }
        /// <summary>
        /// The LIN of the Aircraft.
        /// </summary>
        public string Lin { get; set; }
        /// <summary>
        /// The EIC of the Aircraft.
        /// </summary>
        public string Eic { get; set; }
        /// <summary>
        /// Serial Number (tail number) of the Aircraft.  Ex.  6615261, 6615262, ...
        /// </summary>
        public string AircraftSerialNumber { get; set; }
        /// <summary>
        /// The model, type, design, series (GOLD DMS) of the aircraft.  Ex.  UH 1H, UH 1V, ...
        /// </summary>
        public int? AircraftMtdsid { get; set; }
        /// <summary>
        /// Nomenclature of the Aircraft as received from LOGSA.
        /// </summary>
        public string Nomenclature { get; set; }
        /// <summary>
        /// Indicates whether a cockpit airbag is installed on the particular aircraft.  Ex.  Y, N
        /// </summary>
        public int? CockpitAirbagInstalledResponseId { get; set; }
        /// <summary>
        /// The date, if installed, that the cockpit airbag was installed on the aircraft.  Ex.  June 17, 2005
        /// </summary>
        public DateTime? DateCockpitAirbagInstalled { get; set; }
        /// <summary>
        /// National(or NATO) Item Identification Number, a 9-digit numeric code which uniquely identifies the item of supply.
        /// </summary>
        public string NationalItemIdentificationNumber { get; set; }
        /// <summary>
        /// Unique ID representing the aircraft reporting UIC.
        /// </summary>
        public int? ReportingUicid { get; set; }
        /// <summary>
        /// Unique ID representing the installation/station of the aircraft.
        /// </summary>
        public int? StationId { get; set; }
        /// <summary>
        /// Reporting Unit location, post, camp or station.
        /// </summary>
        public string UnitLocation { get; set; }
        /// <summary>
        /// The assignment and function of the aircraft. See table 3-5 AR AR 700-138 26 Feb 2004.
        /// </summary>
        public int? AssignmentFunctionId { get; set; }
        /// <summary>
        /// Table containing codes indicating gain or loss of the aircraft to the reporting organization. See table 3-2 AR 700-138 26 Feb 2004.
        /// </summary>
        public int? AircraftStatusId { get; set; }
        /// <summary>
        /// Table containing codes indicating the reason for the gain or loss of aircraft. See table 3-11 AR 700-138 26 Feb 2004.
        /// </summary>
        public int? AircraftStatusReasonId { get; set; }
        /// <summary>
        /// Aircraft Army acceptance date.
        /// </summary>
        public DateTime? ArmyAcceptanceDate { get; set; }
        /// <summary>
        /// The definition of the code value according to Regulatory Guidance or Business.
        /// </summary>
        public string ValueDefinition { get; set; }
        /// <summary>
        /// The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.
        /// </summary>
        public string Guidance { get; set; }
        /// <summary>
        /// The date the code value was established for use.  This date may or may not be the same as the start collecting date.
        /// </summary>
        public DateTime? EstablishDate { get; set; }
        /// <summary>
        /// Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.
        /// </summary>
        public DateTime StartCollecting { get; set; }
        /// <summary>
        /// Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.
        /// </summary>
        public DateTime? EndCollecting { get; set; }
        /// <summary>
        /// A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N
        /// </summary>
        public string Used { get; set; }
        /// <summary>
        /// Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.
        /// </summary>
        public int? DisplayOrder { get; set; }
        /// <summary>
        /// The user who created the record.
        /// </summary>
        public string CreatedByUser { get; set; }
        /// <summary>
        /// The date the record was created.
        /// </summary>
        public DateTime CreatedDate { get; set; }
        /// <summary>
        /// Application used to create the record.
        /// </summary>
        public string CreatedByApp { get; set; }
        /// <summary>
        /// The user to last update the record.
        /// </summary>
        public string LastModifiedByUser { get; set; }
        /// <summary>
        /// The date the record was last updated.
        /// </summary>
        public DateTime LastModifiedDate { get; set; }
        /// <summary>
        /// Application used to last update the record.
        /// </summary>
        public string LastModifiedByApp { get; set; }

        public virtual LtbAircraftStatus AircraftStatus { get; set; }
        public virtual LtbAircraftStatusReason AircraftStatusReason { get; set; }
        public virtual LtbAircraftAssignmentFunction AssignmentFunction { get; set; }
        public virtual LtbResponse CockpitAirbagInstalledResponse { get; set; }
        public virtual LtbUic ReportingUic { get; set; }
        public virtual LtbStation Station { get; set; }
    }
}