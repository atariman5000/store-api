// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using store.dal.Models;

namespace store.dal.Data
{
    public partial class ASOHEIMSContext : DbContext
    {
        public ASOHEIMSContext()
        {
        }

        public ASOHEIMSContext(DbContextOptions<ASOHEIMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AtbUpdateLog> AtbUpdateLogs { get; set; }
        public virtual DbSet<CrtbA03mishapCategory> CrtbA03mishapCategories { get; set; }
        public virtual DbSet<LtbAddressType> LtbAddressTypes { get; set; }
        public virtual DbSet<LtbAircraft> LtbAircrafts { get; set; }
        public virtual DbSet<LtbAircraftAssignmentFunction> LtbAircraftAssignmentFunctions { get; set; }
        public virtual DbSet<LtbAircraftAttitude> LtbAircraftAttitudes { get; set; }
        public virtual DbSet<LtbAircraftDesignation> LtbAircraftDesignations { get; set; }
        public virtual DbSet<LtbAircraftDesignationPersonnelActivityAssociation> LtbAircraftDesignationPersonnelActivityAssociations { get; set; }
        public virtual DbSet<LtbAircraftDoorUsed> LtbAircraftDoorUseds { get; set; }
        public virtual DbSet<LtbAircraftEmergencyExitUsed> LtbAircraftEmergencyExitUseds { get; set; }
        public virtual DbSet<LtbAircraftMdsbasicMission> LtbAircraftMdsbasicMissions { get; set; }
        public virtual DbSet<LtbAircraftMdsmodifiedMission> LtbAircraftMdsmodifiedMissions { get; set; }
        public virtual DbSet<LtbAircraftMdsstatusPrefix> LtbAircraftMdsstatusPrefixes { get; set; }
        public virtual DbSet<LtbAircraftMdstype> LtbAircraftMdstypes { get; set; }
        public virtual DbSet<LtbAircraftMdsvehicleType> LtbAircraftMdsvehicleTypes { get; set; }
        public virtual DbSet<LtbAircraftMdswingType> LtbAircraftMdswingTypes { get; set; }
        public virtual DbSet<LtbAircraftMtd> LtbAircraftMtds { get; set; }
        public virtual DbSet<LtbAircraftPosition> LtbAircraftPositions { get; set; }
        public virtual DbSet<LtbAircraftStatus> LtbAircraftStatuses { get; set; }
        public virtual DbSet<LtbAircraftStatusReason> LtbAircraftStatusReasons { get; set; }
        public virtual DbSet<LtbAirport> LtbAirports { get; set; }
        public virtual DbSet<LtbApplicationElement> LtbApplicationElements { get; set; }
        public virtual DbSet<LtbApplicationForm> LtbApplicationForms { get; set; }
        public virtual DbSet<LtbApplicationModule> LtbApplicationModules { get; set; }
        public virtual DbSet<LtbApplicationModuleElementAssociation> LtbApplicationModuleElementAssociations { get; set; }
        public virtual DbSet<LtbApplicationModuleMishapCategoryGroupDisplayOrder> LtbApplicationModuleMishapCategoryGroupDisplayOrders { get; set; }
        public virtual DbSet<LtbApplicationQuestion> LtbApplicationQuestions { get; set; }
        public virtual DbSet<LtbArmyBranch> LtbArmyBranches { get; set; }
        public virtual DbSet<LtbAsmisapplication> LtbAsmisapplications { get; set; }
        public virtual DbSet<LtbAsmisapplicationModuleAssociation> LtbAsmisapplicationModuleAssociations { get; set; }
        public virtual DbSet<LtbAssociationType> LtbAssociationTypes { get; set; }
        public virtual DbSet<LtbAuthorityMethod> LtbAuthorityMethods { get; set; }
        public virtual DbSet<LtbAuxiliaryFuelTankType> LtbAuxiliaryFuelTankTypes { get; set; }
        public virtual DbSet<LtbBoardPosition> LtbBoardPositions { get; set; }
        public virtual DbSet<LtbBodyPart> LtbBodyParts { get; set; }
        public virtual DbSet<LtbBuildingWorkSiteOperationType> LtbBuildingWorkSiteOperationTypes { get; set; }
        public virtual DbSet<LtbBuildingWorkSiteType> LtbBuildingWorkSiteTypes { get; set; }
        public virtual DbSet<LtbCargoCategoryType> LtbCargoCategoryTypes { get; set; }
        public virtual DbSet<LtbCauseFactor> LtbCauseFactors { get; set; }
        public virtual DbSet<LtbCauseOfDeath> LtbCauseOfDeaths { get; set; }
        public virtual DbSet<LtbCeilingDescription> LtbCeilingDescriptions { get; set; }
        public virtual DbSet<LtbCertificationType> LtbCertificationTypes { get; set; }
        public virtual DbSet<LtbComplicationFactor> LtbComplicationFactors { get; set; }
        public virtual DbSet<LtbComplicationFactorType> LtbComplicationFactorTypes { get; set; }
        public virtual DbSet<LtbComplicationFactorTypeFactorAssociation> LtbComplicationFactorTypeFactorAssociations { get; set; }
        public virtual DbSet<LtbComponentPartFailureRootCause> LtbComponentPartFailureRootCauses { get; set; }
        public virtual DbSet<LtbComponentPartFailureType> LtbComponentPartFailureTypes { get; set; }
        public virtual DbSet<LtbContractSource> LtbContractSources { get; set; }
        public virtual DbSet<LtbContractType> LtbContractTypes { get; set; }
        public virtual DbSet<LtbContributingAssessment> LtbContributingAssessments { get; set; }
        public virtual DbSet<LtbCountry> LtbCountries { get; set; }
        public virtual DbSet<LtbCountryGencstatus> LtbCountryGencstatuses { get; set; }
        public virtual DbSet<LtbCountryUsrecognition> LtbCountryUsrecognitions { get; set; }
        public virtual DbSet<LtbCountryWorldRegionAssociation> LtbCountryWorldRegionAssociations { get; set; }
        public virtual DbSet<LtbCounty> LtbCounties { get; set; }
        public virtual DbSet<LtbDamageCostType> LtbDamageCostTypes { get; set; }
        public virtual DbSet<LtbDateType> LtbDateTypes { get; set; }
        public virtual DbSet<LtbDirectionFacing> LtbDirectionFacings { get; set; }
        public virtual DbSet<LtbDmdcpersonnelListing> LtbDmdcpersonnelListings { get; set; }
        public virtual DbSet<LtbDoDdmismedicalTreatmentFacility> LtbDoDdmismedicalTreatmentFacilities { get; set; }
        public virtual DbSet<LtbDoDinstallation> LtbDoDinstallations { get; set; }
        public virtual DbSet<LtbDoDinstallationMde> LtbDoDinstallationMdes { get; set; }
        public virtual DbSet<LtbDoDinstallationType> LtbDoDinstallationTypes { get; set; }
        public virtual DbSet<LtbDoDrealPropertyAsset> LtbDoDrealPropertyAssets { get; set; }
        public virtual DbSet<LtbDoDservice> LtbDoDservices { get; set; }
        public virtual DbSet<LtbDoDserviceComponent> LtbDoDserviceComponents { get; set; }
        public virtual DbSet<LtbDoDserviceComponentAssociation> LtbDoDserviceComponentAssociations { get; set; }
        public virtual DbSet<LtbDoDuccommandAreaOfResponsibility> LtbDoDuccommandAreaOfResponsibilities { get; set; }
        public virtual DbSet<LtbDoDunifiedCombatantCommand> LtbDoDunifiedCombatantCommands { get; set; }
        public virtual DbSet<LtbDoDunifiedCombatantRole> LtbDoDunifiedCombatantRoles { get; set; }
        public virtual DbSet<LtbDocumentUploadArea> LtbDocumentUploadAreas { get; set; }
        public virtual DbSet<LtbDrugAlcoholType> LtbDrugAlcoholTypes { get; set; }
        public virtual DbSet<LtbDutyPositionDutyPositionRatingAssociation> LtbDutyPositionDutyPositionRatingAssociations { get; set; }
        public virtual DbSet<LtbDutyPositionRating> LtbDutyPositionRatings { get; set; }
        public virtual DbSet<LtbDutyPostionExperienceCollected> LtbDutyPostionExperienceCollecteds { get; set; }
        public virtual DbSet<LtbDutyStatus> LtbDutyStatuses { get; set; }
        public virtual DbSet<LtbDutyStatusLevel2> LtbDutyStatusLevel2s { get; set; }
        public virtual DbSet<LtbDutyStatusLevel2Association> LtbDutyStatusLevel2Associations { get; set; }
        public virtual DbSet<LtbDwprocessingStage> LtbDwprocessingStages { get; set; }
        public virtual DbSet<LtbEmploymentStatus> LtbEmploymentStatuses { get; set; }
        public virtual DbSet<LtbEmploymentStatusArmyCountableInjuryAssociation> LtbEmploymentStatusArmyCountableInjuryAssociations { get; set; }
        public virtual DbSet<LtbEmploymentStatusDutyStatusAssociation> LtbEmploymentStatusDutyStatusAssociations { get; set; }
        public virtual DbSet<LtbEmploymentStatusInjuryDueToArmyOpsAssociation> LtbEmploymentStatusInjuryDueToArmyOpsAssociations { get; set; }
        public virtual DbSet<LtbEmploymentStatusPayGradeAssociation> LtbEmploymentStatusPayGradeAssociations { get; set; }
        public virtual DbSet<LtbEnvironmentalConditionType> LtbEnvironmentalConditionTypes { get; set; }
        public virtual DbSet<LtbEnvironmentalDetailType> LtbEnvironmentalDetailTypes { get; set; }
        public virtual DbSet<LtbEstablishmentNaicassociation> LtbEstablishmentNaicassociations { get; set; }
        public virtual DbSet<LtbEventType> LtbEventTypes { get; set; }
        public virtual DbSet<LtbExplosivePackaging> LtbExplosivePackagings { get; set; }
        public virtual DbSet<LtbExtentDamage> LtbExtentDamages { get; set; }
        public virtual DbSet<LtbExtentSpaceCompromised> LtbExtentSpaceCompromiseds { get; set; }
        public virtual DbSet<LtbExternalReportType> LtbExternalReportTypes { get; set; }
        public virtual DbSet<LtbFeedbackMethod> LtbFeedbackMethods { get; set; }
        public virtual DbSet<LtbFindingAssessment> LtbFindingAssessments { get; set; }
        public virtual DbSet<LtbFireExtinguisherEffect> LtbFireExtinguisherEffects { get; set; }
        public virtual DbSet<LtbFireExtinguisherType> LtbFireExtinguisherTypes { get; set; }
        public virtual DbSet<LtbFireType> LtbFireTypes { get; set; }
        public virtual DbSet<LtbFlightActivityCategory> LtbFlightActivityCategories { get; set; }
        public virtual DbSet<LtbFlightConditionExperience> LtbFlightConditionExperiences { get; set; }
        public virtual DbSet<LtbFlightDataType> LtbFlightDataTypes { get; set; }
        public virtual DbSet<LtbFlightMeteorologicalCondition> LtbFlightMeteorologicalConditions { get; set; }
        public virtual DbSet<LtbFlightPlan> LtbFlightPlans { get; set; }
        public virtual DbSet<LtbFlightTerminationSystemActivationType> LtbFlightTerminationSystemActivationTypes { get; set; }
        public virtual DbSet<LtbFluidAmount> LtbFluidAmounts { get; set; }
        public virtual DbSet<LtbFluidSource> LtbFluidSources { get; set; }
        public virtual DbSet<LtbFluidType> LtbFluidTypes { get; set; }
        public virtual DbSet<LtbForecastAccuracy> LtbForecastAccuracies { get; set; }
        public virtual DbSet<LtbGender> LtbGenders { get; set; }
        public virtual DbSet<LtbGeographicLocation> LtbGeographicLocations { get; set; }
        public virtual DbSet<LtbHazardActionStatus> LtbHazardActionStatuses { get; set; }
        public virtual DbSet<LtbHazardCategory> LtbHazardCategories { get; set; }
        public virtual DbSet<LtbHazardReportStatus> LtbHazardReportStatuses { get; set; }
        public virtual DbSet<LtbHazardResourceDeficiency> LtbHazardResourceDeficiencies { get; set; }
        public virtual DbSet<LtbHazardRiskAcceptanceMethod> LtbHazardRiskAcceptanceMethods { get; set; }
        public virtual DbSet<LtbHazardSource> LtbHazardSources { get; set; }
        public virtual DbSet<LtbHazardStatus> LtbHazardStatuses { get; set; }
        public virtual DbSet<LtbHealthServiceRegion> LtbHealthServiceRegions { get; set; }
        public virtual DbSet<LtbHumanFactor> LtbHumanFactors { get; set; }
        public virtual DbSet<LtbHumanFactorNature> LtbHumanFactorNatures { get; set; }
        public virtual DbSet<LtbInformationType> LtbInformationTypes { get; set; }
        public virtual DbSet<LtbInformationTypeAssociationTypeAssociation> LtbInformationTypeAssociationTypeAssociations { get; set; }
        public virtual DbSet<LtbIninjuryCostCategoryMishapPersonAssociation> LtbIninjuryCostCategoryMishapPersonAssociations { get; set; }
        public virtual DbSet<LtbInjuryCause> LtbInjuryCauses { get; set; }
        public virtual DbSet<LtbInjuryCostCategory> LtbInjuryCostCategories { get; set; }
        public virtual DbSet<LtbInjuryCostCategoryMishapPersonAssociation> LtbInjuryCostCategoryMishapPersonAssociations { get; set; }
        public virtual DbSet<LtbInjuryCostFactorDateRange> LtbInjuryCostFactorDateRanges { get; set; }
        public virtual DbSet<LtbInjuryCostStandard> LtbInjuryCostStandards { get; set; }
        public virtual DbSet<LtbInjurySeverity> LtbInjurySeverities { get; set; }
        public virtual DbSet<LtbInjuryType> LtbInjuryTypes { get; set; }
        public virtual DbSet<LtbInspectionAnswerType> LtbInspectionAnswerTypes { get; set; }
        public virtual DbSet<LtbInspectionAnswerTypeAnswerValueAssociation> LtbInspectionAnswerTypeAnswerValueAssociations { get; set; }
        public virtual DbSet<LtbInspectionAnswerValue> LtbInspectionAnswerValues { get; set; }
        public virtual DbSet<LtbInspectionCheckListStatus> LtbInspectionCheckListStatuses { get; set; }
        public virtual DbSet<LtbInspectionCheckListType> LtbInspectionCheckListTypes { get; set; }
        public virtual DbSet<LtbInspectionFrequency> LtbInspectionFrequencies { get; set; }
        public virtual DbSet<LtbInspectionGoverningDocument> LtbInspectionGoverningDocuments { get; set; }
        public virtual DbSet<LtbInspectionProgramElement> LtbInspectionProgramElements { get; set; }
        public virtual DbSet<LtbInspectionQuestionProbability> LtbInspectionQuestionProbabilities { get; set; }
        public virtual DbSet<LtbInspectionQuestionRac> LtbInspectionQuestionRacs { get; set; }
        public virtual DbSet<LtbInspectionQuestionRating> LtbInspectionQuestionRatings { get; set; }
        public virtual DbSet<LtbInspectionQuestionSeverity> LtbInspectionQuestionSeverities { get; set; }
        public virtual DbSet<LtbInspectionSpecialInterestLevel> LtbInspectionSpecialInterestLevels { get; set; }
        public virtual DbSet<LtbInspectionStatus> LtbInspectionStatuses { get; set; }
        public virtual DbSet<LtbInstallationLocationType> LtbInstallationLocationTypes { get; set; }
        public virtual DbSet<LtbInvestigationType> LtbInvestigationTypes { get; set; }
        public virtual DbSet<LtbJobTitle> LtbJobTitles { get; set; }
        public virtual DbSet<LtbJobTitleBackupPreTfs3543> LtbJobTitleBackupPreTfs3543s { get; set; }
        public virtual DbSet<LtbJumpCategory> LtbJumpCategories { get; set; }
        public virtual DbSet<LtbJumpType> LtbJumpTypes { get; set; }
        public virtual DbSet<LtbLikelyConsequence> LtbLikelyConsequences { get; set; }
        public virtual DbSet<LtbLocationInAircraft> LtbLocationInAircrafts { get; set; }
        public virtual DbSet<LtbLocationMethod> LtbLocationMethods { get; set; }
        public virtual DbSet<LtbLocationType> LtbLocationTypes { get; set; }
        public virtual DbSet<LtbManufacturer> LtbManufacturers { get; set; }
        public virtual DbSet<LtbMaterielObject> LtbMaterielObjects { get; set; }
        public virtual DbSet<LtbMaterielObjectTacticalIndicatorAssociation> LtbMaterielObjectTacticalIndicatorAssociations { get; set; }
        public virtual DbSet<LtbMaterielType> LtbMaterielTypes { get; set; }
        public virtual DbSet<LtbMishapCategory> LtbMishapCategories { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupAircraftMdstypeAssociation> LtbMishapCategoryGroupAircraftMdstypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupAircraftMtdsassociation> LtbMishapCategoryGroupAircraftMtdsassociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupApplicationModuleAssociation> LtbMishapCategoryGroupApplicationModuleAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupCertificationTypeAssociation> LtbMishapCategoryGroupCertificationTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupEnvironmentalDetailTypeAssociation> LtbMishapCategoryGroupEnvironmentalDetailTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupEventTypeAssociation> LtbMishapCategoryGroupEventTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupFireTypeAssociation> LtbMishapCategoryGroupFireTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupGeneralMaterielObjectAssociation> LtbMishapCategoryGroupGeneralMaterielObjectAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupGeneralMaterielObjectAssociation09082020> LtbMishapCategoryGroupGeneralMaterielObjectAssociation09082020s { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupInformationTypeAssociation> LtbMishapCategoryGroupInformationTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupMaterielObjectAssociation> LtbMishapCategoryGroupMaterielObjectAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupMaterielObjectAssociation09082020> LtbMishapCategoryGroupMaterielObjectAssociation09082020s { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupMishapCategoryAssociation> LtbMishapCategoryGroupMishapCategoryAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupMissionTypeAssociation> LtbMishapCategoryGroupMissionTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupMistakeAssociation> LtbMishapCategoryGroupMistakeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupNarrativeTypeAssociation> LtbMishapCategoryGroupNarrativeTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupNightVisionDeviceAssociation> LtbMishapCategoryGroupNightVisionDeviceAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupPersonnelActivityAssociation> LtbMishapCategoryGroupPersonnelActivityAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupPersonnelActivityAssociationBackup> LtbMishapCategoryGroupPersonnelActivityAssociationBackups { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupPhaseOfOperationAssociation> LtbMishapCategoryGroupPhaseOfOperationAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupProtectiveEquipmentAssociation> LtbMishapCategoryGroupProtectiveEquipmentAssociations { get; set; }
        public virtual DbSet<LtbMishapCategoryGroupTrainingTypeAssociation> LtbMishapCategoryGroupTrainingTypeAssociations { get; set; }
        public virtual DbSet<LtbMishapClassification> LtbMishapClassifications { get; set; }
        public virtual DbSet<LtbMishapClassificationType> LtbMishapClassificationTypes { get; set; }
        public virtual DbSet<LtbMishapInitialDueDateCriterion> LtbMishapInitialDueDateCriteria { get; set; }
        public virtual DbSet<LtbMishapReviewerConcurrenceType> LtbMishapReviewerConcurrenceTypes { get; set; }
        public virtual DbSet<LtbMishapReviewerType> LtbMishapReviewerTypes { get; set; }
        public virtual DbSet<LtbMishapSource> LtbMishapSources { get; set; }
        public virtual DbSet<LtbMishapStatus> LtbMishapStatuses { get; set; }
        public virtual DbSet<LtbMishapStatusDwprocessingStageAssociation> LtbMishapStatusDwprocessingStageAssociations { get; set; }
        public virtual DbSet<LtbMissionRiskLevel> LtbMissionRiskLevels { get; set; }
        public virtual DbSet<LtbMissionType> LtbMissionTypes { get; set; }
        public virtual DbSet<LtbMistake> LtbMistakes { get; set; }
        public virtual DbSet<LtbMtdsexperience> LtbMtdsexperiences { get; set; }
        public virtual DbSet<LtbMtdsqualifiedLevel> LtbMtdsqualifiedLevels { get; set; }
        public virtual DbSet<LtbNaindustryClassification> LtbNaindustryClassifications { get; set; }
        public virtual DbSet<LtbNarrativeType> LtbNarrativeTypes { get; set; }
        public virtual DbSet<LtbNoteType> LtbNoteTypes { get; set; }
        public virtual DbSet<LtbNotificationType> LtbNotificationTypes { get; set; }
        public virtual DbSet<LtbObjectOwnership> LtbObjectOwnerships { get; set; }
        public virtual DbSet<LtbOperationalContingency> LtbOperationalContingencies { get; set; }
        public virtual DbSet<LtbOrganizationType> LtbOrganizationTypes { get; set; }
        public virtual DbSet<LtbOshaEstablishment> LtbOshaEstablishments { get; set; }
        public virtual DbSet<LtbOshaappealStatus> LtbOshaappealStatuses { get; set; }
        public virtual DbSet<LtbOshainspectionInitiatingEvent> LtbOshainspectionInitiatingEvents { get; set; }
        public virtual DbSet<LtbOshainspectionStatus> LtbOshainspectionStatuses { get; set; }
        public virtual DbSet<LtbOshaoperationInvolved> LtbOshaoperationInvolveds { get; set; }
        public virtual DbSet<LtbOshasubPartStandard> LtbOshasubPartStandards { get; set; }
        public virtual DbSet<LtbOshaviolationIssuedTo> LtbOshaviolationIssuedTos { get; set; }
        public virtual DbSet<LtbOshaviolationOfficeResponsible> LtbOshaviolationOfficeResponsibles { get; set; }
        public virtual DbSet<LtbOshaviolationStatus> LtbOshaviolationStatuses { get; set; }
        public virtual DbSet<LtbOshaviolationType> LtbOshaviolationTypes { get; set; }
        public virtual DbSet<LtbParachuteEquipmentMaterielObjectAssociation> LtbParachuteEquipmentMaterielObjectAssociations { get; set; }
        public virtual DbSet<LtbPayGrade> LtbPayGrades { get; set; }
        public virtual DbSet<LtbPayGradeCivilianJobSeriesAssociation> LtbPayGradeCivilianJobSeriesAssociations { get; set; }
        public virtual DbSet<LtbPayGradeMilitaryOccupationSpecialityAssociation> LtbPayGradeMilitaryOccupationSpecialityAssociations { get; set; }
        public virtual DbSet<LtbPeriodofDay> LtbPeriodofDays { get; set; }
        public virtual DbSet<LtbPermissionType> LtbPermissionTypes { get; set; }
        public virtual DbSet<LtbPersonResponsibleAgencyAssociation> LtbPersonResponsibleAgencyAssociations { get; set; }
        public virtual DbSet<LtbPersonRole> LtbPersonRoles { get; set; }
        public virtual DbSet<LtbPersonnelActivity> LtbPersonnelActivities { get; set; }
        public virtual DbSet<LtbPersonnelActivityUasseatPositionAssociation> LtbPersonnelActivityUasseatPositionAssociations { get; set; }
        public virtual DbSet<LtbPhaseofOperation> LtbPhaseofOperations { get; set; }
        public virtual DbSet<LtbPpequestionNarrativeAssociation> LtbPpequestionNarrativeAssociations { get; set; }
        public virtual DbSet<LtbPrmdocumentType> LtbPrmdocumentTypes { get; set; }
        public virtual DbSet<LtbPrmreportCategory> LtbPrmreportCategories { get; set; }
        public virtual DbSet<LtbPrmreportStatus> LtbPrmreportStatuses { get; set; }
        public virtual DbSet<LtbRank> LtbRanks { get; set; }
        public virtual DbSet<LtbRankPayGradeAssociation> LtbRankPayGradeAssociations { get; set; }
        public virtual DbSet<LtbReadinessLevel> LtbReadinessLevels { get; set; }
        public virtual DbSet<LtbRecommendationCondition> LtbRecommendationConditions { get; set; }
        public virtual DbSet<LtbRecommendationConditionRecStatusAssociation> LtbRecommendationConditionRecStatusAssociations { get; set; }
        public virtual DbSet<LtbRecommendationCorrespondenceReviewPhase> LtbRecommendationCorrespondenceReviewPhases { get; set; }
        public virtual DbSet<LtbRecommendationLevel> LtbRecommendationLevels { get; set; }
        public virtual DbSet<LtbRecommendationStatus> LtbRecommendationStatuses { get; set; }
        public virtual DbSet<LtbRecommendationTargetState> LtbRecommendationTargetStates { get; set; }
        public virtual DbSet<LtbReminderType> LtbReminderTypes { get; set; }
        public virtual DbSet<LtbRequestStatus> LtbRequestStatuses { get; set; }
        public virtual DbSet<LtbReserveRegion> LtbReserveRegions { get; set; }
        public virtual DbSet<LtbReserveRegionUsstateAssociation> LtbReserveRegionUsstateAssociations { get; set; }
        public virtual DbSet<LtbResponse> LtbResponses { get; set; }
        public virtual DbSet<LtbResponsibleAgency> LtbResponsibleAgencies { get; set; }
        public virtual DbSet<LtbRtscorrespondenceStatus> LtbRtscorrespondenceStatuses { get; set; }
        public virtual DbSet<LtbRtssupportingDocumentType> LtbRtssupportingDocumentTypes { get; set; }
        public virtual DbSet<LtbSeaCondition> LtbSeaConditions { get; set; }
        public virtual DbSet<LtbSpecialtyInspectionWeight> LtbSpecialtyInspectionWeights { get; set; }
        public virtual DbSet<LtbStation> LtbStations { get; set; }
        public virtual DbSet<LtbStation07272020> LtbStation07272020s { get; set; }
        public virtual DbSet<LtbStation12072020DupUpdt> LtbStation12072020DupUpdts { get; set; }
        public virtual DbSet<LtbSubUic> LtbSubUics { get; set; }
        public virtual DbSet<LtbTacticalTrainingType> LtbTacticalTrainingTypes { get; set; }
        public virtual DbSet<LtbTcdoDmedicalFacilityType> LtbTcdoDmedicalFacilityTypes { get; set; }
        public virtual DbSet<LtbTcfacilityServiceBranch> LtbTcfacilityServiceBranches { get; set; }
        public virtual DbSet<LtbTideCondition> LtbTideConditions { get; set; }
        public virtual DbSet<LtbTowingStatus> LtbTowingStatuses { get; set; }
        public virtual DbSet<LtbTrainingMethod> LtbTrainingMethods { get; set; }
        public virtual DbSet<LtbTrainingType> LtbTrainingTypes { get; set; }
        public virtual DbSet<LtbUasseatPosition> LtbUasseatPositions { get; set; }
        public virtual DbSet<LtbUic> LtbUics { get; set; }
        public virtual DbSet<LtbUic08132020> LtbUic08132020s { get; set; }
        public virtual DbSet<LtbUic08172020updatePart1> LtbUic08172020updatePart1s { get; set; }
        public virtual DbSet<LtbUic08182020updatePart2> LtbUic08182020updatePart2s { get; set; }
        public virtual DbSet<LtbUic08192020updatePart3> LtbUic08192020updatePart3s { get; set; }
        public virtual DbSet<LtbUic09292020> LtbUic09292020s { get; set; }
        public virtual DbSet<LtbUicactivityStatus> LtbUicactivityStatuses { get; set; }
        public virtual DbSet<LtbUicadministrativeParent> LtbUicadministrativeParents { get; set; }
        public virtual DbSet<LtbUicarmyCommandType> LtbUicarmyCommandTypes { get; set; }
        public virtual DbSet<LtbUicarmyOrganizationType> LtbUicarmyOrganizationTypes { get; set; }
        public virtual DbSet<LtbUiccommandAssignment> LtbUiccommandAssignments { get; set; }
        public virtual DbSet<LtbUicdetail> LtbUicdetails { get; set; }
        public virtual DbSet<LtbUicdetail08132020> LtbUicdetail08132020s { get; set; }
        public virtual DbSet<LtbUicdetail09292020> LtbUicdetail09292020s { get; set; }
        public virtual DbSet<LtbUicfunctionalArea> LtbUicfunctionalAreas { get; set; }
        public virtual DbSet<LtbUichierarchy> LtbUichierarchies { get; set; }
        public virtual DbSet<LtbUicoperationalParent> LtbUicoperationalParents { get; set; }
        public virtual DbSet<LtbUicoperationalParent08132020> LtbUicoperationalParent08132020s { get; set; }
        public virtual DbSet<LtbUicorganizationEntityStatus> LtbUicorganizationEntityStatuses { get; set; }
        public virtual DbSet<LtbUicprofileStatus> LtbUicprofileStatuses { get; set; }
        public virtual DbSet<LtbUictype> LtbUictypes { get; set; }
        public virtual DbSet<LtbUicunitDescriptor> LtbUicunitDescriptors { get; set; }
        public virtual DbSet<LtbUicunitGeneralMission> LtbUicunitGeneralMissions { get; set; }
        public virtual DbSet<LtbUicunitLevel> LtbUicunitLevels { get; set; }
        public virtual DbSet<LtbUicunitPrimaryMission> LtbUicunitPrimaryMissions { get; set; }
        public virtual DbSet<LtbUicunitTypeConstruction> LtbUicunitTypeConstructions { get; set; }
        public virtual DbSet<LtbUseOfSeat> LtbUseOfSeats { get; set; }
        public virtual DbSet<LtbUsstate> LtbUsstates { get; set; }
        public virtual DbSet<LtbVerificationFlagType> LtbVerificationFlagTypes { get; set; }
        public virtual DbSet<LtbWaterCraftCondition> LtbWaterCraftConditions { get; set; }
        public virtual DbSet<LtbWorldRegion> LtbWorldRegions { get; set; }
        public virtual DbSet<LtbZipCode> LtbZipCodes { get; set; }
        public virtual DbSet<Ltbjobtitlebkup> Ltbjobtitlebkups { get; set; }
        public virtual DbSet<StbUicdetailDuplicateStationCleanUp2986> StbUicdetailDuplicateStationCleanUp2986s { get; set; }
        public virtual DbSet<StbUicdetailDuplicateStationCleanUp7296> StbUicdetailDuplicateStationCleanUp7296s { get; set; }
        public virtual DbSet<StbUicdetailDuplicateStationCleanUp7303> StbUicdetailDuplicateStationCleanUp7303s { get; set; }
        public virtual DbSet<StbUicdetailDuplicateStationCleanUp7309> StbUicdetailDuplicateStationCleanUp7309s { get; set; }
        public virtual DbSet<StbUicdetailDuplicateStationCleanUp7320> StbUicdetailDuplicateStationCleanUp7320s { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AtbUpdateLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("AtbUpdateLog", "Codebook");

                entity.HasComment("The Update Log will capture UIC records processed for a downloaddate.");

                entity.Property(e => e.LogId).HasComment("Unique Log Identifier");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("Column Updated");

                entity.Property(e => e.DatabaseName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Database where the update occurred");

                entity.Property(e => e.DownLoadDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.RowCount).HasComment("Number of Rows Updated");

                entity.Property(e => e.SchemaName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Schema where Update occurred");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasComment("Source of Update");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("TableName Updated");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("Date of Update");

                entity.Property(e => e.UpdateInitiative)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("Update Initiative Name");

                entity.Property(e => e.UpdateLogDescription)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Description of the Update");

                entity.Property(e => e.UpdateUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasComment("User Name of Update");
            });

            modelBuilder.Entity<CrtbA03mishapCategory>(entity =>
            {
                entity.ToTable("CRtbA03MishapCategory", "Codebook");

                entity.HasComment("Cross Reference table to determine the Mishap Category of a mishap.");

                entity.Property(e => e.CrtbA03mishapCategoryId).HasColumnName("CRtbA03MishapCategoryID");

                entity.Property(e => e.AssignmentRule)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsPrimaryMaterielCheck)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.L2materielObjectId).HasColumnName("L2MaterielObjectID");

                entity.Property(e => e.L3materielObjectId).HasColumnName("L3MaterielObjectID");

                entity.Property(e => e.L4materielObjectId).HasColumnName("L4MaterielObjectID");

                entity.Property(e => e.L5materielObjectId).HasColumnName("L5MaterielObjectID");

                entity.Property(e => e.LocationTypeId).HasColumnName("LocationTypeID");

                entity.Property(e => e.MaterielObjectId).HasColumnName("MaterielObjectID");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.MishapDutyStatusId).HasColumnName("MishapDutyStatusID");

                entity.Property(e => e.NewMishapCategoryId).HasColumnName("NewMishapCategoryID");

                entity.Property(e => e.ObjectOwnershipId).HasColumnName("ObjectOwnershipID");

                entity.Property(e => e.PersonnelActivityId).HasColumnName("PersonnelActivityID");

                entity.Property(e => e.PrimaryMaterielObjectId).HasColumnName("PrimaryMaterielObjectID");
            });

            modelBuilder.Entity<LtbAddressType>(entity =>
            {
                entity.HasKey(e => e.AddressTypeId);

                entity.ToTable("LtbAddressType", "Codebook");

                entity.HasComment("This table contains values that indicate type of address (home, work,...).");

                entity.Property(e => e.AddressTypeId)
                    .HasColumnName("AddressTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AddressTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AddressTypeParentId)
                    .HasColumnName("AddressTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AddressTypeParent)
                    .WithMany(p => p.InverseAddressTypeParent)
                    .HasForeignKey(d => d.AddressTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbAddressType_Codebook_LtbAddressType_AddressTypeParentID");
            });

            modelBuilder.Entity<LtbAircraft>(entity =>
            {
                entity.HasKey(e => e.AircraftId);

                entity.ToTable("LtbAircraft", "Codebook");

                entity.HasComment("This table contains a list of Army aircraft provided by LOGSA.  External Data Source.");

                entity.Property(e => e.AircraftId)
                    .HasColumnName("AircraftID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMtdsid)
                    .HasColumnName("AircraftMTDSID")
                    .HasComment("The model, type, design, series (GOLD DMS) of the aircraft.  Ex.  UH 1H, UH 1V, ...");

                entity.Property(e => e.AircraftSerialNumber)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Serial Number (tail number) of the Aircraft.  Ex.  6615261, 6615262, ...");

                entity.Property(e => e.AircraftStatusId)
                    .HasColumnName("AircraftStatusID")
                    .HasComment("Table containing codes indicating gain or loss of the aircraft to the reporting organization. See table 3-2 AR 700-138 26 Feb 2004.");

                entity.Property(e => e.AircraftStatusReasonId)
                    .HasColumnName("AircraftStatusReasonID")
                    .HasComment("Table containing codes indicating the reason for the gain or loss of aircraft. See table 3-11 AR 700-138 26 Feb 2004.");

                entity.Property(e => e.ArmyAcceptanceDate)
                    .HasColumnType("datetime")
                    .HasComment("Aircraft Army acceptance date.");

                entity.Property(e => e.AssignmentFunctionId)
                    .HasColumnName("AssignmentFunctionID")
                    .HasComment("The assignment and function of the aircraft. See table 3-5 AR AR 700-138 26 Feb 2004.");

                entity.Property(e => e.CockpitAirbagInstalledResponseId)
                    .HasColumnName("CockpitAirbagInstalledResponseID")
                    .HasComment("Indicates whether a cockpit airbag is installed on the particular aircraft.  Ex.  Y, N");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateCockpitAirbagInstalled)
                    .HasColumnType("datetime")
                    .HasComment("The date, if installed, that the cockpit airbag was installed on the aircraft.  Ex.  June 17, 2005");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.Eic)
                    .HasColumnName("EIC")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("The EIC of the Aircraft.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.Lin)
                    .HasColumnName("LIN")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("The LIN of the Aircraft.");

                entity.Property(e => e.NationalItemIdentificationNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("National(or NATO) Item Identification Number, a 9-digit numeric code which uniquely identifies the item of supply.");

                entity.Property(e => e.Nomenclature)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Nomenclature of the Aircraft as received from LOGSA.");

                entity.Property(e => e.ReportingUicid)
                    .HasColumnName("ReportingUICID")
                    .HasComment("Unique ID representing the aircraft reporting UIC.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.StationId)
                    .HasColumnName("StationID")
                    .HasComment("Unique ID representing the installation/station of the aircraft.");

                entity.Property(e => e.UnitLocation)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("Reporting Unit location, post, camp or station.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftStatus)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.AircraftStatusId)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbAircraftStatus_AircraftStatusID");

                entity.HasOne(d => d.AircraftStatusReason)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.AircraftStatusReasonId)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbAircraftStatusReason_AircraftStatusReasonID");

                entity.HasOne(d => d.AssignmentFunction)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.AssignmentFunctionId)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbAircraftAssignmentFunction_AssignmentFunctionID");

                entity.HasOne(d => d.CockpitAirbagInstalledResponse)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.CockpitAirbagInstalledResponseId)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbResponse_CockpitAirbagInstalledResponseID");

                entity.HasOne(d => d.ReportingUic)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.ReportingUicid)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbUIC_ReportingUICID");

                entity.HasOne(d => d.Station)
                    .WithMany(p => p.LtbAircrafts)
                    .HasForeignKey(d => d.StationId)
                    .HasConstraintName("FK_Codebook_LtbAircraft_Codebook_LtbStation_StationID");
            });

            modelBuilder.Entity<LtbAircraftAssignmentFunction>(entity =>
            {
                entity.HasKey(e => e.AircraftAssignmentFunctionId);

                entity.ToTable("LtbAircraftAssignmentFunction", "Codebook");

                entity.HasComment("This table contains a list of codes that described the assignment and function of the aircraft in accordance with AR 700-138 Army Logistics Readiness and Sustainability.  External Data Source.");

                entity.Property(e => e.AircraftAssignmentFunctionId)
                    .HasColumnName("AircraftAssignmentFunctionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftAssignmentFunctionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AircraftAssignmentFunctionParentId)
                    .HasColumnName("AircraftAssignmentFunctionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftAssignmentFunctionParent)
                    .WithMany(p => p.InverseAircraftAssignmentFunctionParent)
                    .HasForeignKey(d => d.AircraftAssignmentFunctionParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftAssignmentFunction_Codebook_LtbAircraftAssignmentFunction_AircraftAssignmentFunctionParentID");
            });

            modelBuilder.Entity<LtbAircraftAttitude>(entity =>
            {
                entity.HasKey(e => e.AircraftAttitudeId);

                entity.ToTable("LtbAircraftAttitude", "Codebook");

                entity.HasComment("This table indicates the attitude types e.g. left, right for describing an aircraft crash.");

                entity.Property(e => e.AircraftAttitudeId)
                    .HasColumnName("AircraftAttitudeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftAttitudeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AircraftAttitudeParentId)
                    .HasColumnName("AircraftAttitudeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftAttitudeParent)
                    .WithMany(p => p.InverseAircraftAttitudeParent)
                    .HasForeignKey(d => d.AircraftAttitudeParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftAttitude_Codebook_LtbAircraftAttitude_AircraftAttitudeParentID");
            });

            modelBuilder.Entity<LtbAircraftDesignation>(entity =>
            {
                entity.HasKey(e => e.AircraftDesignationId);

                entity.ToTable("LtbAircraftDesignation", "Codebook");

                entity.HasComment("This table contains a list of high level categories of Aircraft that are currently or have been in use by the Army.  Designation includes vehicle type and design");

                entity.Property(e => e.AircraftDesignationId)
                    .HasColumnName("AircraftDesignationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftDesignationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbAircraftDesignationPersonnelActivityAssociation>(entity =>
            {
                entity.HasKey(e => e.AircraftDesignationPersonnelActivityAssociationId);

                entity.ToTable("LtbAircraftDesignationPersonnelActivityAssociation", "Codebook");

                entity.HasComment("This table indicates which personnel activity (duty positions) are relevant for specific aircraft designations (manned, unmanned, aerostat).");

                entity.Property(e => e.AircraftDesignationPersonnelActivityAssociationId)
                    .HasColumnName("AircraftDesignationPersonnelActivityAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftDesignationId)
                    .HasColumnName("AircraftDesignationID")
                    .HasComment("Unique ID representing Aircraft MTDS Designation.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PersonnelActivityId)
                    .HasColumnName("PersonnelActivityID")
                    .HasComment("Unique ID representing the personnel activity/duty position of personnel.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.AircraftDesignation)
                    .WithMany(p => p.LtbAircraftDesignationPersonnelActivityAssociations)
                    .HasForeignKey(d => d.AircraftDesignationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbAircraftDesignationPersonnelActivityAssociation_Codebook_LtbAircraftDesignation_AircraftDesignationID");

                entity.HasOne(d => d.PersonnelActivity)
                    .WithMany(p => p.LtbAircraftDesignationPersonnelActivityAssociations)
                    .HasForeignKey(d => d.PersonnelActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbAircraftDesignationPersonnelActivityAssociation_Codebook_LtbPersonnelActivity_PersonnelActivityID");
            });

            modelBuilder.Entity<LtbAircraftDoorUsed>(entity =>
            {
                entity.HasKey(e => e.AircraftDoorUsedId);

                entity.ToTable("LtbAircraftDoorUsed", "Codebook");

                entity.HasComment("This table contains the doors of the aircraft that can be used.");

                entity.Property(e => e.AircraftDoorUsedId)
                    .HasColumnName("AircraftDoorUsedID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftDoorUsedCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AircraftDoorUsedParentId)
                    .HasColumnName("AircraftDoorUsedParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftDoorUsedParent)
                    .WithMany(p => p.InverseAircraftDoorUsedParent)
                    .HasForeignKey(d => d.AircraftDoorUsedParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftDoorUsed_Codebook_LtbAircraftDoorUsed_AircraftDoorUsedParentID");
            });

            modelBuilder.Entity<LtbAircraftEmergencyExitUsed>(entity =>
            {
                entity.HasKey(e => e.AirCraftEmergencyExitUsedId);

                entity.ToTable("LtbAircraftEmergencyExitUsed", "Codebook");

                entity.HasComment("This table contains aircraft emergency exits.");

                entity.Property(e => e.AirCraftEmergencyExitUsedId)
                    .HasColumnName("AirCraftEmergencyExitUsedID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AirCraftEmergencyExitUsedCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AirCraftEmergencyExitUsedParentId)
                    .HasColumnName("AirCraftEmergencyExitUsedParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AirCraftEmergencyExitUsedParent)
                    .WithMany(p => p.InverseAirCraftEmergencyExitUsedParent)
                    .HasForeignKey(d => d.AirCraftEmergencyExitUsedParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftEmergencyExitUsed_Codebook_LtbAircraftEmergencyExitUsed_AirCraftEmergencyExitUsedParentID");
            });

            modelBuilder.Entity<LtbAircraftMdsbasicMission>(entity =>
            {
                entity.HasKey(e => e.AircraftMdsbasicMissionId);

                entity.ToTable("LtbAircraftMDSBasicMission", "Codebook");

                entity.HasComment("This table contains a list of the basic mission component of the Mission Design Series (MDS) of an Aircraft. Basic Mission is the most basic component of the initial part of the designation. Identifies the primary function and capability of an aerospace vehicle and is the initial symbol assigned to that series. For standard vehicles (e.g., bombers, fighters), it appears to the immediate left of the design number separated by a dash. Regulatory Guidance DoD 4120.15-L Model Designation of Military Aerospace Vehicles.  External Data Source.");

                entity.Property(e => e.AircraftMdsbasicMissionId)
                    .HasColumnName("AircraftMDSBasicMissionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdsbasicMission)
                    .IsRequired()
                    .HasColumnName("AircraftMDSBasicMission")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Code for the basic mission of the aircraft MDS.");

                entity.Property(e => e.AircraftMdsbasicMissionParentId)
                    .HasColumnName("AircraftMDSBasicMissionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftMdsbasicMissionParent)
                    .WithMany(p => p.InverseAircraftMdsbasicMissionParent)
                    .HasForeignKey(d => d.AircraftMdsbasicMissionParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMDSBasicMission_Codebook_LtbAircraftMDSBasicMission_AircraftMDSBasicMissionParentID");
            });

            modelBuilder.Entity<LtbAircraftMdsmodifiedMission>(entity =>
            {
                entity.HasKey(e => e.AircraftMdsmodifiedMissionId);

                entity.ToTable("LtbAircraftMDSModifiedMission", "Codebook");

                entity.HasComment("This table contains the Modified mission component of the Mission Design Series (MDS) of an Aircraft. Identifies modifications to the Modified mission of an aircraft and appears to the immediate left of the Modified mission symbol. Only one modified mission symbol shall be used in any one MDS. EXAMPLE: AT-38B, Modified Mission A identifies a T-38B modified for attack. Regulatory Guidance DoD 4120.15-L Model Designation of Military Aerospace Vehicles.  External Data Source.");

                entity.Property(e => e.AircraftMdsmodifiedMissionId)
                    .HasColumnName("AircraftMDSModifiedMissionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdsmodifiedMission)
                    .IsRequired()
                    .HasColumnName("AircraftMDSModifiedMission")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Code for the Modified mission of the aircraft MDS.");

                entity.Property(e => e.AircraftMdsmodifiedMissionParentId)
                    .HasColumnName("AircraftMDSModifiedMissionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftMdsmodifiedMissionParent)
                    .WithMany(p => p.InverseAircraftMdsmodifiedMissionParent)
                    .HasForeignKey(d => d.AircraftMdsmodifiedMissionParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMDSModifiedMission_Codebook_LtbAircraftMDSModifiedMission_AircraftMDSModifiedMissionParentID");
            });

            modelBuilder.Entity<LtbAircraftMdsstatusPrefix>(entity =>
            {
                entity.HasKey(e => e.AircraftMdsstatusPrefixId);

                entity.ToTable("LtbAircraftMDSStatusPrefix", "Codebook");

                entity.HasComment("This table contains a listing of the status prefix component of the Mission Design Series (MDS) of an Aircraft. Status Prefix is an optional prefix to show that an aerospace vehicle is not standard because of its test, modification, experimental, or prototype design. For aircraft, the symbol appears to the immediate left of the modified mission symbol or basic mission symbol. Regulatory Guidance DoD 4120.15-L Model Designation of Military Aerospace Vehicles.  External Data Source.");

                entity.Property(e => e.AircraftMdsstatusPrefixId)
                    .HasColumnName("AircraftMDSStatusPrefixID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdsstatusPrefix)
                    .IsRequired()
                    .HasColumnName("AircraftMDSStatusPrefix")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Code for the status prefix of the aircraft MDS.");

                entity.Property(e => e.AircraftMdsstatusPrefixParentId)
                    .HasColumnName("AircraftMDSStatusPrefixParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftMdsstatusPrefixParent)
                    .WithMany(p => p.InverseAircraftMdsstatusPrefixParent)
                    .HasForeignKey(d => d.AircraftMdsstatusPrefixParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMDSStatusPrefix_Codebook_LtbAircraftMDSStatusPrefix_AircraftMDSStatusPrefixParentID");
            });

            modelBuilder.Entity<LtbAircraftMdstype>(entity =>
            {
                entity.HasKey(e => e.AircraftMdstypeId);

                entity.ToTable("LtbAircraftMDSType", "Codebook");

                entity.HasComment("This table contains high level categories of Aircraft.  A self referencing heirarchy that includes vehicle type and mission.");

                entity.Property(e => e.AircraftMdstypeId)
                    .HasColumnName("AircraftMDSTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdstypeCode)
                    .IsRequired()
                    .HasColumnName("AircraftMDSTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AircraftMdstypeParentId)
                    .HasColumnName("AircraftMDSTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftMdstypeParent)
                    .WithMany(p => p.InverseAircraftMdstypeParent)
                    .HasForeignKey(d => d.AircraftMdstypeParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMDSType_Codebook_LtbAircraftMDSType_AircraftMDSTypeParentID");
            });

            modelBuilder.Entity<LtbAircraftMdsvehicleType>(entity =>
            {
                entity.HasKey(e => e.AircraftMdsvehicleTypeId);

                entity.ToTable("LtbAircraftMDSVehicleType", "Codebook");

                entity.HasComment("This table contains a list of the Vehicle Type component of the Mission Design Series (MDS) of an Aircraft. Required for nonstandard vehicles, such as helicopter, vertical takeoff and landing (VTOL), UAV control segment, space, etc. A basic mission or modified mission symbol must accompany the vehicle type symbol. Vehicle type appears to the immediate left of the design number, separated by a dash. EXAMPLE: CH-53A. Vehicle Type H indicates a helicopter with a Basic Mission of transport C. Regulatory Guidance DoD 4120.15-L Model Designation of Military Aerospace Vehicles.  External Data Source.");

                entity.Property(e => e.AircraftMdsvehicleTypeId)
                    .HasColumnName("AircraftMDSVehicleTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdsvehicleType)
                    .IsRequired()
                    .HasColumnName("AircraftMDSVehicleType")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Code for the vehicle type of the aircraft MDS.");

                entity.Property(e => e.AircraftMdsvehicleTypeParentId)
                    .HasColumnName("AircraftMDSVehicleTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftMdsvehicleTypeParent)
                    .WithMany(p => p.InverseAircraftMdsvehicleTypeParent)
                    .HasForeignKey(d => d.AircraftMdsvehicleTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMDSVehicleType_Codebook_LtbAircraftMDSVehicleType_AircraftMDSVehicleTypeParentID");
            });

            modelBuilder.Entity<LtbAircraftMdswingType>(entity =>
            {
                entity.HasKey(e => e.AircraftMdswingTypeId);

                entity.ToTable("LtbAircraftMDSWingType", "Codebook");

                entity.HasComment("This table contains Aircraft MDS Wing Type (rotary, fixed).");

                entity.Property(e => e.AircraftMdswingTypeId)
                    .HasColumnName("AircraftMDSWingTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdswingTypeCode)
                    .IsRequired()
                    .HasColumnName("AircraftMDSWingTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbAircraftMtd>(entity =>
            {
                entity.HasKey(e => e.AircraftMtdsid);

                entity.ToTable("LtbAircraftMTDS", "Codebook");

                entity.HasComment("This table contains a collection of aircraft MTDS in accordance with DoD 4120.15L Model Designation of Military Aerospace Vehicles.  External Data Source.");

                entity.Property(e => e.AircraftMtdsid)
                    .HasColumnName("AircraftMTDSID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftDesignationId)
                    .HasColumnName("AircraftDesignationID")
                    .HasComment("Unique ID representing Aircraft MTDS Designation.");

                entity.Property(e => e.AircraftMdstypeId)
                    .HasColumnName("AircraftMDSTypeID")
                    .HasComment("Unique ID representing Aircraft MTDS Type.");

                entity.Property(e => e.AircraftMdswingTypeId)
                    .HasColumnName("AircraftMDSWingTypeID")
                    .HasComment("Aircraft MTDS Wing Type ID.");

                entity.Property(e => e.AircraftMtdscode)
                    .HasColumnName("AircraftMTDSCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.BasicMissionId)
                    .HasColumnName("BasicMissionID")
                    .HasComment("Aircraft MTDS Basic Mission ID.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ManufacturerId)
                    .HasColumnName("ManufacturerID")
                    .HasComment("Aircraft Manufacturer ID.");

                entity.Property(e => e.ModifiedMissionId)
                    .HasColumnName("ModifiedMissionID")
                    .HasComment("Aircraft MTDS Modified Mission ID.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.StatusPrefixId)
                    .HasColumnName("StatusPrefixID")
                    .HasComment("Aircraft MTDS Status Prefix ID.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.VehicleTypeId)
                    .HasColumnName("VehicleTypeID")
                    .HasComment("Aircraft MTDS Vehicle Type ID.");

                entity.HasOne(d => d.AircraftDesignation)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.AircraftDesignationId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftDesignation_AircraftDesignationID");

                entity.HasOne(d => d.AircraftMdstype)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.AircraftMdstypeId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSType_AircraftMDSTypeID");

                entity.HasOne(d => d.AircraftMdswingType)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.AircraftMdswingTypeId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSWingType_AircraftMDSWingTypeID");

                entity.HasOne(d => d.BasicMission)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.BasicMissionId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSBasicMission_BasicMissionID");

                entity.HasOne(d => d.DoDservice)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.DoDserviceId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbDoDService_DoDServiceID");

                entity.HasOne(d => d.Manufacturer)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.ManufacturerId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbManufacturer_ManufacturerID");

                entity.HasOne(d => d.ModifiedMission)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.ModifiedMissionId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSModifiedMission_ModifiedMissionID");

                entity.HasOne(d => d.StatusPrefix)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.StatusPrefixId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSStatusPrefix_StatusPrefixID");

                entity.HasOne(d => d.VehicleType)
                    .WithMany(p => p.LtbAircraftMtds)
                    .HasForeignKey(d => d.VehicleTypeId)
                    .HasConstraintName("FK_Codebook_LtbAircraftMTDS_Codebook_LtbAircraftMDSVehicleType_VehicleTypeID");
            });

            modelBuilder.Entity<LtbAircraftPosition>(entity =>
            {
                entity.HasKey(e => e.AircraftPositionId);

                entity.ToTable("LtbAircraftPosition", "Codebook");

                entity.HasComment("This table provides a list of positions within an aircraft to indicate personnel location within aircraft in event of a mishap.");

                entity.Property(e => e.AircraftPositionId)
                    .HasColumnName("AircraftPositionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftPositionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AircraftPositionParentId)
                    .HasColumnName("AircraftPositionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AircraftPositionParent)
                    .WithMany(p => p.InverseAircraftPositionParent)
                    .HasForeignKey(d => d.AircraftPositionParentId)
                    .HasConstraintName("FK_Codebook_LtbAircraftPosition_Codebook_LtbAircraftPosition_AircraftPositionParentID");
            });

            modelBuilder.Entity<LtbAircraftStatus>(entity =>
            {
                entity.HasKey(e => e.AircraftStatusId);

                entity.ToTable("LtbAircraftStatus", "Codebook");

                entity.HasComment("This table contains codes that describe the status of the aircraft in accordance with AR 700-138 Army Logistics Readiness and Sustainability. External Data Source.");

                entity.Property(e => e.AircraftStatusId)
                    .HasColumnName("AircraftStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbAircraftStatusReason>(entity =>
            {
                entity.HasKey(e => e.AircraftStatusReasonId);

                entity.ToTable("LtbAircraftStatusReason", "Codebook");

                entity.HasComment("This table contains codes that describe the reason for the status of the aircraft in accordance with AR 700-138 Army Logistics Readiness and Sustainability. External Data Source.");

                entity.Property(e => e.AircraftStatusReasonId)
                    .HasColumnName("AircraftStatusReasonID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftStatusReasonCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbAirport>(entity =>
            {
                entity.HasKey(e => e.AirportId)
                    .HasName("PK_AtbAirport");

                entity.ToTable("LtbAirport", "Codebook");

                entity.Property(e => e.AirportId)
                    .HasColumnName("AirportID")
                    .HasComment("Primary key of the Airport table.");

                entity.Property(e => e.Airport)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("The Airport Name");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("The city where the airport located");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("The Country ID where the airport is located");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The application that created the record");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("the dat time when the record was created");

                entity.Property(e => e.IataCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment(" International Air Transport Association Code");

                entity.Property(e => e.IcaoCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("International Civil Aviation Organization Code");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The application that last modified the record");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("the user who last modified the record");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date time when the record was last modifiied");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbAirports)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LtbAirport_LtbCountry");
            });

            modelBuilder.Entity<LtbApplicationElement>(entity =>
            {
                entity.HasKey(e => e.ApplicationElementId);

                entity.ToTable("LtbApplicationElement", "Codebook");

                entity.HasComment("This table provides a list of data elements within the Mishap Reporting Tool.");

                entity.Property(e => e.ApplicationElementId)
                    .HasColumnName("ApplicationElementID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ApplicationElementCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ApplicationElementParentId)
                    .HasColumnName("ApplicationElementParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ApplicationElementParent)
                    .WithMany(p => p.InverseApplicationElementParent)
                    .HasForeignKey(d => d.ApplicationElementParentId)
                    .HasConstraintName("FK_Codebook_LtbApplicationElement_Codebook_LtbApplicationElement_ApplicationElementParentID");
            });

            modelBuilder.Entity<LtbApplicationForm>(entity =>
            {
                entity.HasKey(e => e.ApplicationFormId);

                entity.ToTable("LtbApplicationForm", "Codebook");

                entity.HasComment("This table contains a collection of forms and IDs used by the application.");

                entity.Property(e => e.ApplicationFormId)
                    .HasColumnName("ApplicationFormID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ApplicationFormCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ApplicationFormParentId)
                    .HasColumnName("ApplicationFormParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ApplicationFormParent)
                    .WithMany(p => p.InverseApplicationFormParent)
                    .HasForeignKey(d => d.ApplicationFormParentId)
                    .HasConstraintName("FK_Codebook_LtbApplicationForm_Codebook_LtbApplicationForm_ApplicationFormParentID");
            });

            modelBuilder.Entity<LtbApplicationModule>(entity =>
            {
                entity.HasKey(e => e.ApplicationModuleId);

                entity.ToTable("LtbApplicationModule", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of application modules.");

                entity.Property(e => e.ApplicationModuleId)
                    .HasColumnName("ApplicationModuleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ApplicationModuleCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ApplicationModuleParentId)
                    .HasColumnName("ApplicationModuleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ApplicationModuleParent)
                    .WithMany(p => p.InverseApplicationModuleParent)
                    .HasForeignKey(d => d.ApplicationModuleParentId)
                    .HasConstraintName("FK_Codebook_LtbApplicationModule_Codebook_LtbApplicationModule_ApplicationModuleParentID");
            });

            modelBuilder.Entity<LtbApplicationModuleElementAssociation>(entity =>
            {
                entity.HasKey(e => e.ApplicationModuleElementAssociationId);

                entity.ToTable("LtbApplicationModuleElementAssociation", "Codebook");

                entity.HasComment("Table containing an association between application modules and data elements.");

                entity.Property(e => e.ApplicationModuleElementAssociationId).HasColumnName("ApplicationModuleElementAssociationID");

                entity.Property(e => e.ApplicationElementId).HasColumnName("ApplicationElementID");

                entity.Property(e => e.ApplicationModuleId).HasColumnName("ApplicationModuleID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ApplicationElement)
                    .WithMany(p => p.LtbApplicationModuleElementAssociations)
                    .HasForeignKey(d => d.ApplicationElementId)
                    .HasConstraintName("FK_Codebook_LtbApplicationModuleElementAssociation_Codebook_LtbApplicationElement_ApplicationElementID");

                entity.HasOne(d => d.ApplicationModule)
                    .WithMany(p => p.LtbApplicationModuleElementAssociations)
                    .HasForeignKey(d => d.ApplicationModuleId)
                    .HasConstraintName("FK_Codebook_LtbApplicationModuleElementAssociation_Codebook_LtbApplicationModule_ApplicationModuleID");
            });

            modelBuilder.Entity<LtbApplicationModuleMishapCategoryGroupDisplayOrder>(entity =>
            {
                entity.HasKey(e => e.ApplicationModuleMishapCategoryGroupDisplayOrderId);

                entity.ToTable("LtbApplicationModuleMishapCategoryGroupDisplayOrder", "Codebook");

                entity.HasComment("Table containing the display order of the application module based on the mishap category group.");

                entity.Property(e => e.ApplicationModuleMishapCategoryGroupDisplayOrderId).HasColumnName("ApplicationModuleMishapCategoryGroupDisplayOrderID");

                entity.Property(e => e.ApplicationModuleId).HasColumnName("ApplicationModuleID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ApplicationModule)
                    .WithMany(p => p.LtbApplicationModuleMishapCategoryGroupDisplayOrders)
                    .HasForeignKey(d => d.ApplicationModuleId)
                    .HasConstraintName("FK_Codebook_LtbApplicationModuleMishapCategoryGroupDisplayOrder_Codebook_LtbApplicationModule_ApplicationModuleID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbApplicationModuleMishapCategoryGroupDisplayOrders)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .HasConstraintName("FK_Codebook_LtbApplicationModuleMishapCategoryGroupDisplayOrder_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbApplicationQuestion>(entity =>
            {
                entity.HasKey(e => e.ApplicationQuestionId);

                entity.ToTable("LtbApplicationQuestion", "Codebook");

                entity.HasComment("This table contains a collection of forms and IDs  and questions used by the application.");

                entity.Property(e => e.ApplicationQuestionId)
                    .HasColumnName("ApplicationQuestionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ApplicationFormId)
                    .HasColumnName("ApplicationFormID")
                    .HasComment("Unique ID representing Application Form.");

                entity.Property(e => e.ApplicationQuestionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ApplicationQuestionParentId)
                    .HasColumnName("ApplicationQuestionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ApplicationForm)
                    .WithMany(p => p.LtbApplicationQuestions)
                    .HasForeignKey(d => d.ApplicationFormId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbApplicationQuestion_Codebook_LtbApplicationForm_ApplicationFormID");

                entity.HasOne(d => d.ApplicationQuestionParent)
                    .WithMany(p => p.InverseApplicationQuestionParent)
                    .HasForeignKey(d => d.ApplicationQuestionParentId)
                    .HasConstraintName("FK_Codebook_LtbApplicationQuestion_Codebook_LtbApplicationQuestion_ApplicationQuestionParentID");
            });

            modelBuilder.Entity<LtbArmyBranch>(entity =>
            {
                entity.HasKey(e => e.ArmyBranchId);

                entity.ToTable("LtbArmyBranch", "Codebook");

                entity.HasComment("This table provides a list of Army Branches. External Data Source.");

                entity.Property(e => e.ArmyBranchId)
                    .HasColumnName("ArmyBranchID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ArmyBranchCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ArmyBranchParentId)
                    .HasColumnName("ArmyBranchParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UnitAffiliationCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Army Branch Unit Affiliation Code.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ArmyBranchParent)
                    .WithMany(p => p.InverseArmyBranchParent)
                    .HasForeignKey(d => d.ArmyBranchParentId)
                    .HasConstraintName("FK_Codebook_LtbArmyBranch_Codebook_LtbArmyBranch_ArmyBranchParentID");
            });

            modelBuilder.Entity<LtbAsmisapplication>(entity =>
            {
                entity.HasKey(e => e.AsmisapplicationId);

                entity.ToTable("LtbASMISApplication", "Codebook");

                entity.HasComment("This table contains a collection ASOHEIMS Applications/Modules.");

                entity.Property(e => e.AsmisapplicationId)
                    .HasColumnName("ASMISApplicationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ApplicationAcronym)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Application acronym.");

                entity.Property(e => e.ApplicationModuleAcronym)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Application Module acronym.");

                entity.Property(e => e.AsmisapplicationParentId)
                    .HasColumnName("ASMISApplicationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AsmisapplicationParent)
                    .WithMany(p => p.InverseAsmisapplicationParent)
                    .HasForeignKey(d => d.AsmisapplicationParentId)
                    .HasConstraintName("FK_Codebook_LtbASMISApplication_Codebook_LtbASMISApplication_ASMISApplicationParentID");
            });

            modelBuilder.Entity<LtbAsmisapplicationModuleAssociation>(entity =>
            {
                entity.HasKey(e => e.AsmisapplicationModuleAssociationId);

                entity.ToTable("LtbASMISApplicationModuleAssociation", "Codebook");

                entity.HasComment("Table containing the display order of the application module based on the mishap category group.");

                entity.Property(e => e.AsmisapplicationModuleAssociationId).HasColumnName("ASMISApplicationModuleAssociationID");

                entity.Property(e => e.ApplicationModuleId).HasColumnName("ApplicationModuleID");

                entity.Property(e => e.AsmisapplicationId).HasColumnName("ASMISApplicationID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ApplicationModule)
                    .WithMany(p => p.LtbAsmisapplicationModuleAssociations)
                    .HasForeignKey(d => d.ApplicationModuleId)
                    .HasConstraintName("FK_Codebook_LtbASMISApplicationModuleAssociation_Codebook_LtbApplicationModule_ApplicationModuleID");

                entity.HasOne(d => d.Asmisapplication)
                    .WithMany(p => p.LtbAsmisapplicationModuleAssociations)
                    .HasForeignKey(d => d.AsmisapplicationId)
                    .HasConstraintName("FK_Codebook_LtbASMISApplicationModuleAssociation_Codebook_LtbASMISApplication_ASMISApplicationID");
            });

            modelBuilder.Entity<LtbAssociationType>(entity =>
            {
                entity.HasKey(e => e.AssociationTypeId);

                entity.ToTable("LtbAssociationType", "Codebook");

                entity.HasComment("This table contains mishap supporting documentation allowed association types (mishap, personnel, materiel).");

                entity.Property(e => e.AssociationTypeId)
                    .HasColumnName("AssociationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AssociationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AssociationTypeParentId)
                    .HasColumnName("AssociationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AssociationTypeParent)
                    .WithMany(p => p.InverseAssociationTypeParent)
                    .HasForeignKey(d => d.AssociationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbAssociationType_Codebook_LtbAssociationType_AssociationTypeParentID");
            });

            modelBuilder.Entity<LtbAuthorityMethod>(entity =>
            {
                entity.HasKey(e => e.AuthorityMethodId);

                entity.ToTable("LtbAuthorityMethod", "Codebook");

                entity.HasComment("This table contains types of authority methods.");

                entity.Property(e => e.AuthorityMethodId)
                    .HasColumnName("AuthorityMethodID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AuthorityMethodCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AuthorityMethodParentId)
                    .HasColumnName("AuthorityMethodParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AuthorityMethodParent)
                    .WithMany(p => p.InverseAuthorityMethodParent)
                    .HasForeignKey(d => d.AuthorityMethodParentId)
                    .HasConstraintName("FK_Codebook_LtbAuthorityMethod_Codebook_LtbAuthorityMethod_AuthorityMethodParentID");
            });

            modelBuilder.Entity<LtbAuxiliaryFuelTankType>(entity =>
            {
                entity.HasKey(e => e.AuxiliaryFuelTankTypeId);

                entity.ToTable("LtbAuxiliaryFuelTankType", "Codebook");

                entity.HasComment("This table contains types of aircraft auxiliary fuel tanks.");

                entity.Property(e => e.AuxiliaryFuelTankTypeId)
                    .HasColumnName("AuxiliaryFuelTankTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AuxiliaryFuelTankTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AuxiliaryFuelTankTypeParentId)
                    .HasColumnName("AuxiliaryFuelTankTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.AuxiliaryFuelTankTypeParent)
                    .WithMany(p => p.InverseAuxiliaryFuelTankTypeParent)
                    .HasForeignKey(d => d.AuxiliaryFuelTankTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbAuxiliaryFuelTankType_Codebook_LtbAuxiliaryFuelTankType_AuxiliaryFuelTankTypeParentID");
            });

            modelBuilder.Entity<LtbBoardPosition>(entity =>
            {
                entity.HasKey(e => e.BoardPositionId);

                entity.ToTable("LtbBoardPosition", "Codebook");

                entity.HasComment("This table provides a list of various investigation board positions that a board member may hold.");

                entity.Property(e => e.BoardPositionId)
                    .HasColumnName("BoardPositionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BoardPositionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.BoardPositionParentId)
                    .HasColumnName("BoardPositionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.BoardPositionParent)
                    .WithMany(p => p.InverseBoardPositionParent)
                    .HasForeignKey(d => d.BoardPositionParentId)
                    .HasConstraintName("FK_Codebook_LtbBoardPosition_Codebook_LtbBoardPosition_BoardPositionParentID");
            });

            modelBuilder.Entity<LtbBodyPart>(entity =>
            {
                entity.HasKey(e => e.BodyPartId);

                entity.ToTable("LtbBodyPart", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of body parts.");

                entity.Property(e => e.BodyPartId)
                    .HasColumnName("BodyPartID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BodyPartCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.BodyPartParentId)
                    .HasColumnName("BodyPartParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.BodyPartParent)
                    .WithMany(p => p.InverseBodyPartParent)
                    .HasForeignKey(d => d.BodyPartParentId)
                    .HasConstraintName("FK_Codebook_LtbBodyPart_Codebook_LtbBodyPart_BodyPartParentID");
            });

            modelBuilder.Entity<LtbBuildingWorkSiteOperationType>(entity =>
            {
                entity.HasKey(e => e.BuildingWorkSiteOperationTypeId);

                entity.ToTable("LtbBuildingWorkSiteOperationType", "Codebook");

                entity.Property(e => e.BuildingWorkSiteOperationTypeId)
                    .HasColumnName("BuildingWorkSiteOperationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BuildingWorkSiteOperationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.BuildingWorkSiteOperationTypeParentId)
                    .HasColumnName("BuildingWorkSiteOperationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.BuildingWorkSiteOperationTypeParent)
                    .WithMany(p => p.InverseBuildingWorkSiteOperationTypeParent)
                    .HasForeignKey(d => d.BuildingWorkSiteOperationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbBuildingWorkSiteOperationType_Codebook_LtbBuildingWorkSiteOperationType_BuildingWorkSiteOperationTypeParentID");
            });

            modelBuilder.Entity<LtbBuildingWorkSiteType>(entity =>
            {
                entity.HasKey(e => e.BuildingWorkSiteTypeId);

                entity.ToTable("LtbBuildingWorkSiteType", "Codebook");

                entity.Property(e => e.BuildingWorkSiteTypeId)
                    .HasColumnName("BuildingWorkSiteTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BuildingWorkSiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.BuildingWorkSiteTypeParentId)
                    .HasColumnName("BuildingWorkSiteTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.BuildingWorkSiteTypeParent)
                    .WithMany(p => p.InverseBuildingWorkSiteTypeParent)
                    .HasForeignKey(d => d.BuildingWorkSiteTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbBuildingWorkSiteType_Codebook_LtbBuildingWorkSiteType_BuildingWorkSiteTypeParentID");
            });

            modelBuilder.Entity<LtbCargoCategoryType>(entity =>
            {
                entity.HasKey(e => e.CargoCategoryTypeId);

                entity.ToTable("LtbCargoCategoryType", "Codebook");

                entity.HasComment("This table provides a list of cargo types (door bundle, heavy equipment,…).");

                entity.Property(e => e.CargoCategoryTypeId)
                    .HasColumnName("CargoCategoryTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CargoCategoryTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CargoCategoryTypeParentId)
                    .HasColumnName("CargoCategoryTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CargoCategoryTypeParent)
                    .WithMany(p => p.InverseCargoCategoryTypeParent)
                    .HasForeignKey(d => d.CargoCategoryTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbCargoCategoryType_Codebook_LtbCargoCategoryType_CargoCategoryTypeParentID");
            });

            modelBuilder.Entity<LtbCauseFactor>(entity =>
            {
                entity.HasKey(e => e.CauseFactorId);

                entity.ToTable("LtbCauseFactor", "Codebook");

                entity.HasComment("This table contains mishap cause factors (environmental, human factor, materiel).");

                entity.Property(e => e.CauseFactorId)
                    .HasColumnName("CauseFactorID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CauseFactorCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CauseFactorParentId)
                    .HasColumnName("CauseFactorParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CauseFactorParent)
                    .WithMany(p => p.InverseCauseFactorParent)
                    .HasForeignKey(d => d.CauseFactorParentId)
                    .HasConstraintName("FK_Codebook_LtbCauseFactor_Codebook_LtbCauseFactor_CauseFactorParentID");
            });

            modelBuilder.Entity<LtbCauseOfDeath>(entity =>
            {
                entity.HasKey(e => e.CauseOfDeathId);

                entity.ToTable("LtbCauseOfDeath", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of causes of death.");

                entity.Property(e => e.CauseOfDeathId)
                    .HasColumnName("CauseOfDeathID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CauseOfDeathCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CauseOfDeathParentId)
                    .HasColumnName("CauseOfDeathParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CauseOfDeathParent)
                    .WithMany(p => p.InverseCauseOfDeathParent)
                    .HasForeignKey(d => d.CauseOfDeathParentId)
                    .HasConstraintName("FK_Codebook_LtbCauseOfDeath_Codebook_LtbCauseOfDeath_CauseOfDeathParentID");
            });

            modelBuilder.Entity<LtbCeilingDescription>(entity =>
            {
                entity.HasKey(e => e.CeilingDescriptionId);

                entity.ToTable("LtbCeilingDescription", "Codebook");

                entity.HasComment("This table contains ceiling descriptions (broken, overcast,..) for aircraft mishaps.");

                entity.Property(e => e.CeilingDescriptionId)
                    .HasColumnName("CeilingDescriptionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CeilingDescriptionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CeilingDescriptionParentId)
                    .HasColumnName("CeilingDescriptionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CeilingDescriptionParent)
                    .WithMany(p => p.InverseCeilingDescriptionParent)
                    .HasForeignKey(d => d.CeilingDescriptionParentId)
                    .HasConstraintName("FK_Codebook_LtbCeilingDescription_Codebook_LtbCeilingDescription_CeilingDescriptionParentID");
            });

            modelBuilder.Entity<LtbCertificationType>(entity =>
            {
                entity.HasKey(e => e.CertificationTypeId);

                entity.ToTable("LtbCertificationType", "Codebook");

                entity.HasComment("This table provides a list of possible certification types that could be held for personnel.");

                entity.Property(e => e.CertificationTypeId)
                    .HasColumnName("CertificationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CertificationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CertificationTypeParentId)
                    .HasColumnName("CertificationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CertificationTypeParent)
                    .WithMany(p => p.InverseCertificationTypeParent)
                    .HasForeignKey(d => d.CertificationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbCertificationType_Codebook_LtbCertificationType_CertificationTypeParentID");
            });

            modelBuilder.Entity<LtbComplicationFactor>(entity =>
            {
                entity.HasKey(e => e.ComplicationFactorId);

                entity.ToTable("LtbComplicationFactor", "Codebook");

                entity.HasComment("This table provides a list of factors that could complicate survival or rescue operations in a mishap.");

                entity.Property(e => e.ComplicationFactorId)
                    .HasColumnName("ComplicationFactorID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComplicationFactorCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ComplicationFactorParentId)
                    .HasColumnName("ComplicationFactorParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ComplicationFactorParent)
                    .WithMany(p => p.InverseComplicationFactorParent)
                    .HasForeignKey(d => d.ComplicationFactorParentId)
                    .HasConstraintName("FK_Codebook_LtbComplicationFactor_Codebook_LtbComplicationFactor_ComplicationFactorParentID");
            });

            modelBuilder.Entity<LtbComplicationFactorType>(entity =>
            {
                entity.HasKey(e => e.ComplicationFactorTypeId);

                entity.ToTable("LtbComplicationFactorType", "Codebook");

                entity.HasComment("This table contains type of situations in a mishap that could experience complicating factors.");

                entity.Property(e => e.ComplicationFactorTypeId)
                    .HasColumnName("ComplicationFactorTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComplicationFactorTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ComplicationFactorTypeParentId)
                    .HasColumnName("ComplicationFactorTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ComplicationFactorTypeParent)
                    .WithMany(p => p.InverseComplicationFactorTypeParent)
                    .HasForeignKey(d => d.ComplicationFactorTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbComplicationFactorType_Codebook_LtbComplicationFactorType_ComplicationFactorTypeParentID");
            });

            modelBuilder.Entity<LtbComplicationFactorTypeFactorAssociation>(entity =>
            {
                entity.HasKey(e => e.ComplicationFactorTypeFactorAssociationId);

                entity.ToTable("LtbComplicationFactorTypeFactorAssociation", "Codebook");

                entity.HasComment("This table indicates which complicating factors can be used with the different complicating factor types.");

                entity.Property(e => e.ComplicationFactorTypeFactorAssociationId)
                    .HasColumnName("ComplicationFactorTypeFactorAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComplicationFactorId)
                    .HasColumnName("ComplicationFactorID")
                    .HasComment("Unique ID representing the complication factor.");

                entity.Property(e => e.ComplicationFactorTypeId)
                    .HasColumnName("ComplicationFactorTypeID")
                    .HasComment("Unique ID respresenting Complication Factor Type. ");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.ComplicationFactor)
                    .WithMany(p => p.LtbComplicationFactorTypeFactorAssociations)
                    .HasForeignKey(d => d.ComplicationFactorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbComplicationFactorTypeFactorAssociation_Codebook_LtbComplicationFactor_ComplicationFactorID");

                entity.HasOne(d => d.ComplicationFactorType)
                    .WithMany(p => p.LtbComplicationFactorTypeFactorAssociations)
                    .HasForeignKey(d => d.ComplicationFactorTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbComplicationFactorTypeFactorAssociation_Codebook_LtbComplicationFactorType_ComplicationFactorTypeID");
            });

            modelBuilder.Entity<LtbComponentPartFailureRootCause>(entity =>
            {
                entity.HasKey(e => e.ComponentPartFailureRootCauseId);

                entity.ToTable("LtbComponentPartFailureRootCause", "Codebook");

                entity.HasComment("This table contains a list of possible root causes for a component/part failure.");

                entity.Property(e => e.ComponentPartFailureRootCauseId)
                    .HasColumnName("ComponentPartFailureRootCauseID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComponentPartFailureRootCauseCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ComponentPartFailureRootCauseParentId)
                    .HasColumnName("ComponentPartFailureRootCauseParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ComponentPartFailureRootCauseParent)
                    .WithMany(p => p.InverseComponentPartFailureRootCauseParent)
                    .HasForeignKey(d => d.ComponentPartFailureRootCauseParentId)
                    .HasConstraintName("FK_Codebook_LtbComponentPartFailureRootCause_Codebook_LtbComponentPartFailureRootCause_ComponentPartFailureRootCauseParentID");
            });

            modelBuilder.Entity<LtbComponentPartFailureType>(entity =>
            {
                entity.HasKey(e => e.ComponentPartFailureTypeId);

                entity.ToTable("LtbComponentPartFailureType", "Codebook");

                entity.HasComment("This table contains a list of possible component/part failure types.");

                entity.Property(e => e.ComponentPartFailureTypeId)
                    .HasColumnName("ComponentPartFailureTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComponentPartFailureTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ComponentPartFailureTypeParentId)
                    .HasColumnName("ComponentPartFailureTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ComponentPartFailureTypeParent)
                    .WithMany(p => p.InverseComponentPartFailureTypeParent)
                    .HasForeignKey(d => d.ComponentPartFailureTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbComponentPartFailureType_Codebook_LtbComponentPartFailureType_ComponentPartFailureTypeParentID");
            });

            modelBuilder.Entity<LtbContractSource>(entity =>
            {
                entity.HasKey(e => e.ContractSourceId);

                entity.ToTable("LtbContractSource", "Codebook");

                entity.HasComment("This table contains funding sources for various contracts. The table was created specifically for the U.S. Army Corp of Engineers.");

                entity.Property(e => e.ContractSourceId)
                    .HasColumnName("ContractSourceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ContractSourceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ContractSourceParentId)
                    .HasColumnName("ContractSourceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ContractSourceParent)
                    .WithMany(p => p.InverseContractSourceParent)
                    .HasForeignKey(d => d.ContractSourceParentId)
                    .HasConstraintName("FK_Codebook_LtbContractSource_Codebook_LtbContractSource_ContractSourceParentID");
            });

            modelBuilder.Entity<LtbContractType>(entity =>
            {
                entity.HasKey(e => e.ContractTypeId);

                entity.ToTable("LtbContractType", "Codebook");

                entity.HasComment("This table contains a list of contract types. The table was created specifically for the U.S. Army Corp of Engineers.");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("ContractTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ContractTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ContractTypeParentId)
                    .HasColumnName("ContractTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ContractTypeParent)
                    .WithMany(p => p.InverseContractTypeParent)
                    .HasForeignKey(d => d.ContractTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbContractType_Codebook_LtbContractType_ContractTypeParentID");
            });

            modelBuilder.Entity<LtbContributingAssessment>(entity =>
            {
                entity.HasKey(e => e.ContributingAssessmentId);

                entity.ToTable("LtbContributingAssessment", "Codebook");

                entity.HasComment("This table provides the assessment values that indicates a factors causal and/or contributing role in a mishap (Yes, No, Suspected, Unknown).");

                entity.Property(e => e.ContributingAssessmentId)
                    .HasColumnName("ContributingAssessmentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ContributingAssessmentCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ContributingAssessmentParentId)
                    .HasColumnName("ContributingAssessmentParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ContributingAssessmentParent)
                    .WithMany(p => p.InverseContributingAssessmentParent)
                    .HasForeignKey(d => d.ContributingAssessmentParentId)
                    .HasConstraintName("FK_Codebook_LtbContributingAssessment_Codebook_LtbContributingAssessment_ContributingAssessmentParentID");
            });

            modelBuilder.Entity<LtbCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("LtbCountry", "Codebook");

                entity.HasComment("This table contains country codes based on the Geopolitical Entities, Names, and Codes (GENC) Standard. The Geopolitical Entities, Names, and Codes (GENC) Standard is the U.S. Government profile of ISO 3166 Codes for the representation of names of countries and their subdivisions. It specifies an authoritative set of country codes and names for use by the Federal Government for information exchange, using ISO 3166 (Parts 1 and 2) names and code elements wherever possible, with modifications only where necessary to comply with U.S. law and U.S. Government recognition policy. Entries of the GENC Standard are either based on direct reuse of ISO 3166 code elements, or are a type of variation from that standard (Exclusion, Exception, Extension, or Exigent) based on U.S. government requirements. Note that in the case of Exceptions, the codes do not differ from ISO 3166. Exceptions are based on differences in naming (some politically significant, others simply stylistic) as approved by the United States Board on Geographic Names, and/or differences in how the territorial extent of an entity is understood. GENC Extensions introduce new codes not included in ISO 3166. Entries from ISO 3166 that are excluded from the GENC Standard may be browsed in the GENC Entries Register.  External Data Source.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryCode2Char)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CountryCode3Char)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CountryGencstatusId)
                    .HasColumnName("CountryGENCStatusID")
                    .HasComment("Unique Identifier indicating Status of Country relation bewteen GENC Standards and ISO 3166 standard.");

                entity.Property(e => e.CountryParentId)
                    .HasColumnName("CountryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CountryUsrecognitionId)
                    .HasColumnName("CountryUSRecognitionID")
                    .HasComment("Unique Identifier indicating U.S. relationship.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NumericCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("NumericCode value for the DMIS Medical Treatment Facility.");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CountryGencstatus)
                    .WithMany(p => p.LtbCountries)
                    .HasForeignKey(d => d.CountryGencstatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbCountry_Codebook_LtbCountryGENCStatus_CountryGENCStatusID");

                entity.HasOne(d => d.CountryParent)
                    .WithMany(p => p.InverseCountryParent)
                    .HasForeignKey(d => d.CountryParentId)
                    .HasConstraintName("FK_Codebook_LtbCountry_Codebook_LtbCountry_CountryParentID");

                entity.HasOne(d => d.CountryUsrecognition)
                    .WithMany(p => p.LtbCountries)
                    .HasForeignKey(d => d.CountryUsrecognitionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbCountry_Codebook_LtbCountryUSRecognition_CountryUSRecognitionID");
            });

            modelBuilder.Entity<LtbCountryGencstatus>(entity =>
            {
                entity.HasKey(e => e.CountryGencstatusId);

                entity.ToTable("LtbCountryGENCStatus", "Codebook");

                entity.HasComment("This table provides codes and descriptions for Country Geopolitical Entities, Names, and Codes (GENC) Status. The information content of the GENC Standard is specified with respect to ISO 3166 (Parts 1 and 2). Entries of the GENC Standard are either based on direct reuse of ISO 3166 code elements, or are a type of variation from that standard (Exclusion, Exception, Extension, or Exigent) based on U.S. government requirements.  Note that in the case of Exceptions, the codes do not differ from ISO 3166. Exceptions are based on differences in naming as approved by the United States Board on Geographic Names, and/or differences in how the territorial extent of an entity is understood. GENC Extensions introduce new codes not included in ISO 3166. Entries from ISO 3166 that are excluded from the GENC Standard may be browsed in the GENC Entries Register.  External Data Source.");

                entity.Property(e => e.CountryGencstatusId)
                    .HasColumnName("CountryGENCStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryGencstatusCode)
                    .IsRequired()
                    .HasColumnName("CountryGENCStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CountryGencstatusParentId)
                    .HasColumnName("CountryGENCStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CountryGencstatusParent)
                    .WithMany(p => p.InverseCountryGencstatusParent)
                    .HasForeignKey(d => d.CountryGencstatusParentId)
                    .HasConstraintName("FK_Codebook_LtbCountryGENCStatus_Codebook_LtbCountryGENCStatus_CountryGENCStatusParentID");
            });

            modelBuilder.Entity<LtbCountryUsrecognition>(entity =>
            {
                entity.HasKey(e => e.CountryUsrecognitionId);

                entity.ToTable("LtbCountryUSRecognition", "Codebook");

                entity.HasComment("This table contains codes and descriptions for Country US Recognition. The U.S. Department of State, Bureau of Intelligence and Research maintains lists of Independent States and Dependencies. These lists provide the short-form and long-form names, two-letter country code, and capital or administrative center for countries and dependencies. The Independent States list indicates whether a state has diplomatic relations with the U.S. and whether the state is a member of the United Nations. The Dependencies and Areas of Special Sovereignty list indicates which state has sovereignty.   External Data Source.");

                entity.Property(e => e.CountryUsrecognitionId)
                    .HasColumnName("CountryUSRecognitionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryUsrecognitionCode)
                    .IsRequired()
                    .HasColumnName("CountryUSRecognitionCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CountryUsrecognitionParentId)
                    .HasColumnName("CountryUSRecognitionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.CountryUsrecognitionParent)
                    .WithMany(p => p.InverseCountryUsrecognitionParent)
                    .HasForeignKey(d => d.CountryUsrecognitionParentId)
                    .HasConstraintName("FK_Codebook_LtbCountryUSRecognition_Codebook_LtbCountryUSRecognition_CountryUSRecognitionParentID");
            });

            modelBuilder.Entity<LtbCountryWorldRegionAssociation>(entity =>
            {
                entity.HasKey(e => e.CountryWorldRegionAssociationId);

                entity.ToTable("LtbCountryWorldRegionAssociation", "Codebook");

                entity.HasComment("This table indicates the geographical world region in which a country resides.   ");

                entity.Property(e => e.CountryWorldRegionAssociationId)
                    .HasColumnName("CountryWorldRegionAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country belonging to the geographical world region.  Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.WorldRegionId)
                    .HasColumnName("WorldRegionID")
                    .HasComment("Unique ID representing World Region.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbCountryWorldRegionAssociations)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbCountryWorldRegionAssociation_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.WorldRegion)
                    .WithMany(p => p.LtbCountryWorldRegionAssociations)
                    .HasForeignKey(d => d.WorldRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbCountryWorldRegionAssociation_Codebook_LtbWorldRegion_WorldRegionID");
            });

            modelBuilder.Entity<LtbCounty>(entity =>
            {
                entity.HasKey(e => e.CountyId)
                    .HasName("PK_Ltb[LtbCounty");

                entity.ToTable("LtbCounty", "Codebook");

                entity.HasComment("This table contains a list of county codes. Populated from ZipCode file external data source.  External Data Source.");

                entity.Property(e => e.CountyId)
                    .HasColumnName("CountyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country the US County resides. Unique ID representing Country.");

                entity.Property(e => e.CountyCode)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.CountyParentId)
                    .HasColumnName("CountyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbCounties)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbCounty_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.CountyParent)
                    .WithMany(p => p.InverseCountyParent)
                    .HasForeignKey(d => d.CountyParentId)
                    .HasConstraintName("FK_Codebook_LtbCounty_Codebook_LtbCounty_CountyParentID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbCounties)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbCounty_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbDamageCostType>(entity =>
            {
                entity.HasKey(e => e.DamageCostTypeId);

                entity.ToTable("LtbDamageCostType", "Codebook");

                entity.HasComment("This table contains the types of damage costs that might be assessed in a mishap.");

                entity.Property(e => e.DamageCostTypeId)
                    .HasColumnName("DamageCostTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DamageCostTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DamageCostTypeParentId)
                    .HasColumnName("DamageCostTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DamageCostTypeParent)
                    .WithMany(p => p.InverseDamageCostTypeParent)
                    .HasForeignKey(d => d.DamageCostTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbDamageCostType_Codebook_LtbDamageCostType_DamageCostTypeParentID");
            });

            modelBuilder.Entity<LtbDateType>(entity =>
            {
                entity.HasKey(e => e.DateTypeId);

                entity.ToTable("LtbDateType", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of date types for collection for a mishap, personnel, etc.  ");

                entity.Property(e => e.DateTypeId)
                    .HasColumnName("DateTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DateTypeParentId)
                    .HasColumnName("DateTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DateTypeParent)
                    .WithMany(p => p.InverseDateTypeParent)
                    .HasForeignKey(d => d.DateTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbDateType_Codebook_LtbDateType_DateTypeParentID");
            });

            modelBuilder.Entity<LtbDirectionFacing>(entity =>
            {
                entity.HasKey(e => e.DirectionFacingId);

                entity.ToTable("LtbDirectionFacing", "Codebook");

                entity.HasComment("This table contains a list of the various directions an aircraft seat could face.");

                entity.Property(e => e.DirectionFacingId)
                    .HasColumnName("DirectionFacingID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DirectionFacingCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DirectionFacingParentId)
                    .HasColumnName("DirectionFacingParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DirectionFacingParent)
                    .WithMany(p => p.InverseDirectionFacingParent)
                    .HasForeignKey(d => d.DirectionFacingParentId)
                    .HasConstraintName("FK_Codebook_LtbDirectionFacing_Codebook_LtbDirectionFacing_DirectionFacingParentID");
            });

            modelBuilder.Entity<LtbDmdcpersonnelListing>(entity =>
            {
                entity.HasKey(e => e.DmdcpersonnelListingId);

                entity.ToTable("LtbDMDCPersonnelListing", "Codebook");

                entity.HasComment("This table contains the Raw Personnel data from DMDC.   External Data Source.");

                entity.Property(e => e.DmdcpersonnelListingId)
                    .HasColumnName("DMDCPersonnelListingID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.Age).HasComment("DMD Personnel Age value.");

                entity.Property(e => e.AssignedDoDinstallationId)
                    .HasColumnName("AssignedDoDInstallationID")
                    .HasComment("Unique ID representing the DMDC personnel assigned location DoD Installation.");

                entity.Property(e => e.AssignedLocationCountryId)
                    .HasColumnName("AssignedLocationCountryID")
                    .HasComment("Unique ID representing the DMDC personnel assigned location country.");

                entity.Property(e => e.AssignedLocationCountyCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("Code representing the DMDC personnel assigned country.");

                entity.Property(e => e.AssignedLocationStateId)
                    .HasColumnName("AssignedLocationStateID")
                    .HasComment("Unique ID representing the DMDC personnel assigned location state.");

                entity.Property(e => e.AssignedLocationZipCode4Digit)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AssignedLocationZipCode5Digit)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AssignedMajorCommandCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.AssignedUicid)
                    .HasColumnName("AssignedUICID")
                    .HasComment("Unique ID representing the Personnel Assigned UIC.");

                entity.Property(e => e.BirthDate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("DMDC personnel birth date.");

                entity.Property(e => e.Cadency)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("The cadency of the DMDC personnel.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Dmdcresponse)
                    .HasColumnName("DMDCResponse")
                    .IsUnicode(false)
                    .HasComment("The response received from DMDC.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service.");

                entity.Property(e => e.DutyDoDinstallationId)
                    .HasColumnName("DutyDoDInstallationID")
                    .HasComment("Unique ID representing the Duty DoD Installation of the DMDC personnel.");

                entity.Property(e => e.DutyDoDoccupationalJobTitleId)
                    .HasColumnName("DutyDoDOccupationalJobTitleID")
                    .HasComment("Unique ID representing the Duty DoD occupational job title of the DMDC personnel.");

                entity.Property(e => e.DutyLocationCountryId)
                    .HasColumnName("DutyLocationCountryID")
                    .HasComment("Unique ID representing the Duty country location of the DMDC personnel.");

                entity.Property(e => e.DutyLocationCountyCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyLocationStateId)
                    .HasColumnName("DutyLocationStateID")
                    .HasComment("Unique ID representing the Duty State of the DMDC personnel.");

                entity.Property(e => e.DutyLocationZipCode4Digit)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyLocationZipCode5Digit)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyMajorCommandCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyMoscivJobSeriesJobTitleId)
                    .HasColumnName("DutyMOSCivJobSeriesJobTitleID")
                    .HasComment("Unique ID representing the DMDC personnel duty MOS/Civilian Job Series.");

                entity.Property(e => e.DutyUicid)
                    .HasColumnName("DutyUICID")
                    .HasComment("Unique ID representing the duty UIC of the DMDC personnel.");

                entity.Property(e => e.Edipi)
                    .HasColumnName("EDIPI")
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasComment("The EDIPI of the DMDC Personnel.");

                entity.Property(e => e.EmailId)
                    .HasColumnName("EmailID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("DMDC personnel first name.");

                entity.Property(e => e.GenderId)
                    .HasColumnName("GenderID")
                    .HasComment("Unique Id respresenting the DMDC personnel gender.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("DMDC personnel Last name.");

                entity.Property(e => e.LastUpdated)
                    .HasColumnType("datetime")
                    .HasComment("DMDC record last updated date.");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("The middle name of the DMDC personnel.");

                entity.Property(e => e.MilAeronauticalRatingCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MilFlyingStatusIndicatorCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OrigUniqueIdentifier).HasComment("The Unique Identifier for the DMDC personnel.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique ID representing the pay grade of DMDC personnel.");

                entity.Property(e => e.PayGradeModifierCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PrimaryDoDoccupationalJobTitleId)
                    .HasColumnName("PrimaryDoDOccupationalJobTitleID")
                    .HasComment("Unique ID representing the primary DoD occupational code of the DMDC personnel.");

                entity.Property(e => e.PrimaryMoscivJobSeriesJobTitleId)
                    .HasColumnName("PrimaryMOSCivJobSeriesJobTitleID")
                    .HasComment("Unique ID representing the primary MOS/Civilian job series of the DMDC personnel.");

                entity.Property(e => e.SecondaryDoDoccupationalJobTitleId)
                    .HasColumnName("SecondaryDoDOccupationalJobTitleID")
                    .HasComment("Unique ID representing the secondary DoD occupational code of the DMDC personnel.");

                entity.Property(e => e.SecondaryMoscivJobSeriesJobTitleId)
                    .HasColumnName("SecondaryMOSCivJobSeriesJobTitleID")
                    .HasComment("Unique ID representing the secondary MOS/Civilian job series of the DMDC personnel.");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("The SSN of the DMDC personnel.");

                entity.Property(e => e.StartDate)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("The start date of the DMDC personnel record.");

                entity.Property(e => e.UniformedServiceOrganizationComponentCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UscitizenStatusCode)
                    .HasColumnName("USCitizenStatusCode")
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");
            });

            modelBuilder.Entity<LtbDoDdmismedicalTreatmentFacility>(entity =>
            {
                entity.HasKey(e => e.DoDdmismedicalTreatmentFacilityId);

                entity.ToTable("LtbDoDDMISMedicalTreatmentFacility", "Codebook");

                entity.HasComment("This table contains DoD Medical Treatment Facilities from the Defense Medical Information System (DMIS) a service of DoD which identifies past and current DoD Medical Facilities.   External Data Source.");

                entity.Property(e => e.DoDdmismedicalTreatmentFacilityId)
                    .HasColumnName("DoDDMISMedicalTreatmentFacilityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AuthorizedTricareenrollmentSite)
                    .HasColumnName("AuthorizedTRICAREEnrollmentSite")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Authorized TRICARE Enrollment Site for the DMIS medical treatment facility.");

                entity.Property(e => e.BranchofServiceId)
                    .HasColumnName("BranchofServiceID")
                    .HasComment("Unique ID representing the branch of service for DMIS medical treatment facility.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of the DoD DMIS Medical Treatment Facility. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Dcwid)
                    .HasColumnName("DCWID")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("DCWID for the DMIC medical treatment facility.");

                entity.Property(e => e.Dhpcode)
                    .HasColumnName("DHPCode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DmisfacilityName)
                    .HasColumnName("DMISFacilityName")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("The facility name for the DMIS medical treatment facility.");

                entity.Property(e => e.Dmisid)
                    .IsRequired()
                    .HasColumnName("DMISID")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("The DMIS unique ID for medical treatment facility.");

                entity.Property(e => e.DoDinstallationId)
                    .HasColumnName("DoDInstallationID")
                    .HasComment("Unique ID representing the DoD Installation for the Medical treatment facility.");

                entity.Property(e => e.DoDmedicalTreatmentFacilityDmisparentId)
                    .HasColumnName("DoDMedicalTreatmentFacilityDMISParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DoDmedicalTreatmentFacilityMeprsparentId)
                    .HasColumnName("DoDMedicalTreatmentFacilityMEPRSParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DodfacilityTypeId)
                    .HasColumnName("DODFacilityTypeID")
                    .HasComment("Unique ID representing the facility type for the DMIS medical treatment facility.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Facility4DigitZipcode)
                    .HasColumnName("Facility4DigitZIPCode")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.Facility5DigitZipcode)
                    .HasColumnName("Facility5DigitZIPCode")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FacilityCityName)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("City of the medical treatment facility.");

                entity.Property(e => e.FacilityCommandAssignmentCode)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FacilityName)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Facility name of the medical treatment facility.");

                entity.Property(e => e.FacilityServiceId)
                    .HasColumnName("FacilityServiceID")
                    .HasComment("Unique ID representing the facility service of the medical treatment facility.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HealthServiceRegionId)
                    .HasColumnName("HealthServiceRegionID")
                    .HasComment("Unique ID representing the Health service region of the Medical Treatment facility.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MeprsunitUic)
                    .HasColumnName("MEPRSUnitUIC")
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasComment("The MEPRS Unit UIC for the DMIS medical treatment facility.");

                entity.Property(e => e.MeprsunitUicid)
                    .HasColumnName("MEPRSUnitUICID")
                    .HasComment("The MEPRS Unit UIC ID for the DMIS medical treatment facility.");

                entity.Property(e => e.Npi2hipaataxonomy)
                    .HasColumnName("NPI2HIPAATaxonomy")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("NPI2HIPAATaxonomy value for the DMIS Medical Treatment Facility.");

                entity.Property(e => e.Npi2number)
                    .HasColumnName("NPI2Number")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("NPI2Number value for the DMIS Medical Treatment Facility.");

                entity.Property(e => e.Npi2required)
                    .HasColumnName("NPI2Required")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("NPI2Required value for the DMIS Medical Treatment Facility.");

                entity.Property(e => e.ServiceAreaCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsflagCode)
                    .HasColumnName("USFlagCode")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.BranchofService)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.BranchofServiceId)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbTCFacilityServiceBranch_FacilityServiceBranchID");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DoDinstallation)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.DoDinstallationId)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbDoDInstallation_DoDInstallationID");

                entity.HasOne(d => d.HealthServiceRegion)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.HealthServiceRegionId)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbHealthServiceRegion_HealthServiceRegionID");

                entity.HasOne(d => d.MeprsunitUicNavigation)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.MeprsunitUicid)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbUIC_MEPRSUnitUICID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbDoDdmismedicalTreatmentFacilities)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbDoDDMISMedicalTreatmentFacility_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbDoDinstallation>(entity =>
            {
                entity.HasKey(e => e.DoDinstallationId);

                entity.ToTable("LtbDoDInstallation", "Codebook");

                entity.HasComment("This table contains Department of Defense (DoD) Installations.   External Data Source. Currently used within ASOHEIMS for Medical Treatment Facilities.  Received with DMIS and Tricare Military Injury.");

                entity.Property(e => e.DoDinstallationId)
                    .HasColumnName("DoDInstallationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ComponentId)
                    .HasColumnName("ComponentID")
                    .HasComment("Unique ID respresenting the DoD Installation Component.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of the DoD Installation.  Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDinstallationCode)
                    .IsRequired()
                    .HasColumnName("DoDInstallationCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DodinstallationParentId)
                    .HasColumnName("DODInstallationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DodinstallationTypeId)
                    .HasColumnName("DODInstallationTypeID")
                    .HasComment("Unique ID representing the Installation Type.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FullCountryName)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("The DoD Installation full country name.");

                entity.Property(e => e.FullStateName)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("The DoD Installation full state name.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InstallationStatus)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("Installation status of the DoD Installation.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NearestCityName)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("The nearest city name to the DoD Installation.");

                entity.Property(e => e.PrimaryDoDserviceId)
                    .HasColumnName("PrimaryDoDServiceID")
                    .HasComment("Unique ID representing the primary DoD Service.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.Vppstatus)
                    .HasColumnName("VPPStatus")
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("VPP Status of DoD Installation.");

                entity.Property(e => e.WorldRegionId)
                    .HasColumnName("WorldRegionID")
                    .HasComment("Unique ID representing World Region.");

                entity.Property(e => e.ZipCode4Digit)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ZipCode5Digit)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.ComponentId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbDoDServiceComponent_ComponentID");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DodinstallationParent)
                    .WithMany(p => p.InverseDodinstallationParent)
                    .HasForeignKey(d => d.DodinstallationParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbDoDInstallation_DODInstallationParentID");

                entity.HasOne(d => d.DodinstallationType)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.DodinstallationTypeId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbDoDInstallationType_DODInstallationTypeID");

                entity.HasOne(d => d.PrimaryDoDservice)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.PrimaryDoDserviceId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbDoDService_PrimaryDoDServiceID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbUSState_USStateID");

                entity.HasOne(d => d.WorldRegion)
                    .WithMany(p => p.LtbDoDinstallations)
                    .HasForeignKey(d => d.WorldRegionId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallation_Codebook_LtbWorldRegion_WorldRegionID");
            });

            modelBuilder.Entity<LtbDoDinstallationMde>(entity =>
            {
                entity.HasKey(e => e.DoDinstallationMdeid);

                entity.ToTable("LtbDoDInstallationMDE", "Codebook");

                entity.HasComment("This table contain DoD Installations provided with DoD Minimum Data Element LOVs.   External Data Source.  Not currently used.");

                entity.Property(e => e.DoDinstallationMdeid)
                    .HasColumnName("DoDInstallationMDEID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.City)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("MDE DoD Installation City location.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of the MDE DoD Installation. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDinstallationMdecode)
                    .IsRequired()
                    .HasColumnName("DoDInstallationMDECode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DoDinstallationName)
                    .IsRequired()
                    .HasColumnName("DoDInstallationName")
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("MDE DoD installation name.");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service Component.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service.");

                entity.Property(e => e.DodinstallationMdeparentId)
                    .HasColumnName("DODInstallationMDEParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InstallationTypeId)
                    .HasColumnName("InstallationTypeID")
                    .HasComment("Unique ID representing the MDE DoD installation type.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.ZipCode5Digit)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbDoDinstallationMdes)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DoDserviceComponent)
                    .WithMany(p => p.LtbDoDinstallationMdes)
                    .HasForeignKey(d => d.DoDserviceComponentId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbDoDServiceComponent_DoDServiceComponentID");

                entity.HasOne(d => d.DoDservice)
                    .WithMany(p => p.LtbDoDinstallationMdes)
                    .HasForeignKey(d => d.DoDserviceId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbDoDService_DoDServiceID");

                entity.HasOne(d => d.DodinstallationMdeparent)
                    .WithMany(p => p.InverseDodinstallationMdeparent)
                    .HasForeignKey(d => d.DodinstallationMdeparentId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbDoDInstallationMDE_DODInstallationMDEParentID");

                entity.HasOne(d => d.InstallationType)
                    .WithMany(p => p.LtbDoDinstallationMdes)
                    .HasForeignKey(d => d.InstallationTypeId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbDODInstallationType_InstallationTypeID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbDoDinstallationMdes)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationMDE_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbDoDinstallationType>(entity =>
            {
                entity.HasKey(e => e.DoDinstallationTypeId);

                entity.ToTable("LtbDoDInstallationType", "Codebook");

                entity.HasComment("This table contain Department of Defense Service Installation Types.   External Data Source.");

                entity.Property(e => e.DoDinstallationTypeId)
                    .HasColumnName("DoDInstallationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDinstallationTypeCode)
                    .IsRequired()
                    .HasColumnName("DoDInstallationTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DodinstallationTypeParentId)
                    .HasColumnName("DODInstallationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DodinstallationTypeParent)
                    .WithMany(p => p.InverseDodinstallationTypeParent)
                    .HasForeignKey(d => d.DodinstallationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDInstallationType_Codebook_LtbDoDInstallationType_DODInstallationTypeParentID");
            });

            modelBuilder.Entity<LtbDoDrealPropertyAsset>(entity =>
            {
                entity.HasKey(e => e.DoDrealPropertyAssetId);

                entity.ToTable("LtbDoDRealPropertyAsset", "Codebook");

                entity.HasComment("This table contain a site list of DoD Real Property from the Real Property Assets Database (DoDs Real Property Inventory Authoritative Data Source).   External Data Source.");

                entity.Property(e => e.DoDrealPropertyAssetId)
                    .HasColumnName("DoDRealPropertyAssetID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("DoD Real Property Asset City location.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("DoD Real Property Asset Country location.  Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDrealPropertyAssetCode)
                    .IsRequired()
                    .HasColumnName("DoDRealPropertyAssetCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DodrealPropertyAssetParentId)
                    .HasColumnName("DODRealPropertyAssetParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InstallationId)
                    .HasColumnName("InstallationID")
                    .HasComment("DoD Real Property Asset Installation location.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.SiteName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("DoD Real Property Asset site name.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("DoD Real Property Asset US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.ZipCode5Digit)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbDoDrealPropertyAssets)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbDoDRealPropertyAsset_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DodrealPropertyAssetParent)
                    .WithMany(p => p.InverseDodrealPropertyAssetParent)
                    .HasForeignKey(d => d.DodrealPropertyAssetParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDRealPropertyAsset_Codebook_LtbDoDRealPropertyAsset_DODRealPropertyAssetParentID");

                entity.HasOne(d => d.Installation)
                    .WithMany(p => p.LtbDoDrealPropertyAssets)
                    .HasForeignKey(d => d.InstallationId)
                    .HasConstraintName("FK_Codebook_LtbDoDRealPropertyAsset_Codebook_LtbDODInstallation_InstallationID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbDoDrealPropertyAssets)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbDoDRealPropertyAsset_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbDoDservice>(entity =>
            {
                entity.HasKey(e => e.DoDserviceId);

                entity.ToTable("LtbDoDService", "Codebook");

                entity.HasComment("This table contain Department of Defense (DoD) Services.  Supporting DOD information. ");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceCode)
                    .IsRequired()
                    .HasColumnName("DoDServiceCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DoDserviceParentId)
                    .HasColumnName("DoDServiceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DoDserviceParent)
                    .WithMany(p => p.InverseDoDserviceParent)
                    .HasForeignKey(d => d.DoDserviceParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDService_Codebook_LtbDoDService_DoDServiceParentID");
            });

            modelBuilder.Entity<LtbDoDserviceComponent>(entity =>
            {
                entity.HasKey(e => e.DoDserviceComponentId);

                entity.ToTable("LtbDoDServiceComponent", "Codebook");

                entity.HasComment("This table contain Department of Defense Service Components. ");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceComponentCode)
                    .IsRequired()
                    .HasColumnName("DoDServiceComponentCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DoDserviceComponentParentId)
                    .HasColumnName("DoDServiceComponentParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DoDserviceComponentParent)
                    .WithMany(p => p.InverseDoDserviceComponentParent)
                    .HasForeignKey(d => d.DoDserviceComponentParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDServiceComponent_Codebook_LtbDoDServiceComponent_DoDServiceComponentParentID");
            });

            modelBuilder.Entity<LtbDoDserviceComponentAssociation>(entity =>
            {
                entity.HasKey(e => e.DoDserviceComponentAssociationId);

                entity.ToTable("LtbDoDServiceComponentAssociation", "Codebook");

                entity.HasComment("This table provides an association between DoD Components and DoD Services.   Supporting DOD information.  External Data Source.");

                entity.Property(e => e.DoDserviceComponentAssociationId)
                    .HasColumnName("DoDServiceComponentAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service Component.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DoDserviceComponent)
                    .WithMany(p => p.LtbDoDserviceComponentAssociations)
                    .HasForeignKey(d => d.DoDserviceComponentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDoDServiceComponentAssociation_Codebook_LtbDoDServiceComponent_DoDServiceComponentID");

                entity.HasOne(d => d.DoDservice)
                    .WithMany(p => p.LtbDoDserviceComponentAssociations)
                    .HasForeignKey(d => d.DoDserviceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDoDServiceComponentAssociation_Codebook_LtbDoDService_DoDServiceID");
            });

            modelBuilder.Entity<LtbDoDuccommandAreaOfResponsibility>(entity =>
            {
                entity.HasKey(e => e.DoDuccommandAreaOfResponsibilityId);

                entity.ToTable("LtbDoDUCCommandAreaOfResponsibility", "Codebook");

                entity.HasComment("This table indicates the area of responsibility (Country) for each Unified Combatant Command (UCC).  Supporting DOD information.  External Data Source.");

                entity.Property(e => e.DoDuccommandAreaOfResponsibilityId)
                    .HasColumnName("DoDUCCommandAreaOfResponsibilityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Unified Combatant Command Country area of responsibility. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDuccommandAreaOfResponsibilityParentId)
                    .HasColumnName("DoDUCCommandAreaOfResponsibilityParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DoDunifiedCombatantCommandId)
                    .HasColumnName("DoDUnifiedCombatantCommandID")
                    .HasComment("DoD Unified Combatant Command ID ");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbDoDuccommandAreaOfResponsibilities)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDoDUCCommandAreaOfResponsibility_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DoDuccommandAreaOfResponsibilityParent)
                    .WithMany(p => p.InverseDoDuccommandAreaOfResponsibilityParent)
                    .HasForeignKey(d => d.DoDuccommandAreaOfResponsibilityParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDUCCommandAreaOfResponsibility_Codebook_LtbDoDUCCommandAreaOfResponsibility_ParentID");

                entity.HasOne(d => d.DoDunifiedCombatantCommand)
                    .WithMany(p => p.LtbDoDuccommandAreaOfResponsibilities)
                    .HasForeignKey(d => d.DoDunifiedCombatantCommandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDoDUCCommandAreaOfResponsibility_Codebook_LtbDoDUnifiedCombatantCommand_DoDUnifiedCombatantCommandID");
            });

            modelBuilder.Entity<LtbDoDunifiedCombatantCommand>(entity =>
            {
                entity.HasKey(e => e.DoDunifiedCombatantCommandId);

                entity.ToTable("LtbDoDUnifiedCombatantCommand", "Codebook");

                entity.HasComment("This table contain Department of Defense Unified Combatant Commands (UCC).  UCC is a US DoD command composed of forces from at least two Military Departments.  These commands are established to provide effective command and control of US military forces, regardless of branch of service, in peace and war.  They are organized either on geographical basis known as Area of Responsibility (AOR) or on functional basis.  UCCs are joint commands with specific badges denoting affiliation. Supporting DOD information.  External Data Source.");

                entity.Property(e => e.DoDunifiedCombatantCommandId)
                    .HasColumnName("DoDUnifiedCombatantCommandID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDinstallationId)
                    .HasColumnName("DoDInstallationID")
                    .HasComment("Department of Defense (DoD) Installation Headquarters");

                entity.Property(e => e.DoDunifiedCombatantCommandCode)
                    .IsRequired()
                    .HasColumnName("DoDUnifiedCombatantCommandCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DoDunifiedCombatantCommandParentId)
                    .HasColumnName("DoDUnifiedCombatantCommandParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.DoDunifiedCombatantRoleId)
                    .HasColumnName("DoDUnifiedCombatantRoleID")
                    .HasComment("Unique ID representing the DoD Unified Combatant Roles.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DoDinstallation)
                    .WithMany(p => p.LtbDoDunifiedCombatantCommands)
                    .HasForeignKey(d => d.DoDinstallationId)
                    .HasConstraintName("FK_Codebook_LtbDoDUnifiedCombatantCommand_Codebook_LtbDoDInstallation_DoDInstallationID");

                entity.HasOne(d => d.DoDunifiedCombatantCommandParent)
                    .WithMany(p => p.InverseDoDunifiedCombatantCommandParent)
                    .HasForeignKey(d => d.DoDunifiedCombatantCommandParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDUnifiedCombatantCommand_Codebook_LtbDoDUnifiedCombatantCommand_DoDUnifiedCombatantCommandParentID");

                entity.HasOne(d => d.DoDunifiedCombatantRole)
                    .WithMany(p => p.LtbDoDunifiedCombatantCommands)
                    .HasForeignKey(d => d.DoDunifiedCombatantRoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDoDUnifiedCombatantCommand_Codebook_LtbDoDUnifiedCombatantRole_DoDUnifiedCombatantRoleID");
            });

            modelBuilder.Entity<LtbDoDunifiedCombatantRole>(entity =>
            {
                entity.HasKey(e => e.DoDunifiedCombatantRoleId);

                entity.ToTable("LtbDoDUnifiedCombatantRole", "Codebook");

                entity.HasComment("This table contains DoD Unified Combatant Roles indicating whether the type of organization of the UCC is Functional or Geographic.   Supporting DOD information.  External Data Source.");

                entity.Property(e => e.DoDunifiedCombatantRoleId)
                    .HasColumnName("DoDUnifiedCombatantRoleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDunifiedCombatantRoleCode)
                    .IsRequired()
                    .HasColumnName("DoDUnifiedCombatantRoleCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DoDunifiedCombatantRoleParentId)
                    .HasColumnName("DoDUnifiedCombatantRoleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DoDunifiedCombatantRoleParent)
                    .WithMany(p => p.InverseDoDunifiedCombatantRoleParent)
                    .HasForeignKey(d => d.DoDunifiedCombatantRoleParentId)
                    .HasConstraintName("FK_Codebook_LtbDoDUnifiedCombatantRole_Codebook_LtbDoDUnifiedCombatantRole_DoDUnifiedCombatantRoleParentID");
            });

            modelBuilder.Entity<LtbDocumentUploadArea>(entity =>
            {
                entity.HasKey(e => e.DocumentUploadAreaId);

                entity.ToTable("LtbDocumentUploadArea", "Codebook");

                entity.HasComment("This table provides a list of document upload areas.");

                entity.Property(e => e.DocumentUploadAreaId)
                    .HasColumnName("DocumentUploadAreaID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DocumentUploadAreaCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DocumentUploadAreaParentId)
                    .HasColumnName("DocumentUploadAreaParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DocumentUploadAreaParent)
                    .WithMany(p => p.InverseDocumentUploadAreaParent)
                    .HasForeignKey(d => d.DocumentUploadAreaParentId)
                    .HasConstraintName("FK_Codebook_LtbDocumentUploadArea_Codebook_LtbDocumentUploadArea_DocumentUploadAreaParentID");
            });

            modelBuilder.Entity<LtbDrugAlcoholType>(entity =>
            {
                entity.HasKey(e => e.DrugAlcoholTypeId);

                entity.ToTable("LtbDrugAlcoholType", "Codebook");

                entity.HasComment("This table contains drug types.  It is a self-referencing hierarchy drug types and alcohol.");

                entity.Property(e => e.DrugAlcoholTypeId)
                    .HasColumnName("DrugAlcoholTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DrugAlcoholTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DrugAlcoholTypeParentId)
                    .HasColumnName("DrugAlcoholTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DrugAlcoholTypeParent)
                    .WithMany(p => p.InverseDrugAlcoholTypeParent)
                    .HasForeignKey(d => d.DrugAlcoholTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbDrugAlcoholType_Codebook_LtbDrugAlcoholType_DrugAlcoholTypeParentID");
            });

            modelBuilder.Entity<LtbDutyPositionDutyPositionRatingAssociation>(entity =>
            {
                entity.HasKey(e => e.DutyPositionDutyPositionRatingAssociationId);

                entity.ToTable("LtbDutyPositionDutyPositionRatingAssociation", "Codebook");

                entity.HasComment("This table indicates if specific duty positions are rated or non-rated and the assoication with mishap category group.");

                entity.Property(e => e.DutyPositionDutyPositionRatingAssociationId)
                    .HasColumnName("DutyPositionDutyPositionRatingAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyPositionId)
                    .HasColumnName("DutyPositionID")
                    .HasComment("Unique ID representing duty position (PersonnelActivityID).");

                entity.Property(e => e.DutyPositionRatingId)
                    .HasColumnName("DutyPositionRatingID")
                    .HasComment("Unique ID representing Duty Position Rating.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing the mishap category group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UasseatPositionId)
                    .HasColumnName("UASSeatPositionID")
                    .HasComment("Unique ID representing the UAS seat position.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DutyPosition)
                    .WithMany(p => p.LtbDutyPositionDutyPositionRatingAssociations)
                    .HasForeignKey(d => d.DutyPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyPositionDutyPositionRatingAssociation_Codebook_LtbPersonnelActivity_DutyPositionID");

                entity.HasOne(d => d.DutyPositionRating)
                    .WithMany(p => p.LtbDutyPositionDutyPositionRatingAssociations)
                    .HasForeignKey(d => d.DutyPositionRatingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyPositionDutyPositionRatingAssociation_Codebook_LtbDutyPositionRating_DutyPositionRatingID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbDutyPositionDutyPositionRatingAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyPositionDutyPositionRatingAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.UasseatPosition)
                    .WithMany(p => p.LtbDutyPositionDutyPositionRatingAssociations)
                    .HasForeignKey(d => d.UasseatPositionId)
                    .HasConstraintName("FK_Codebook_LtbDutyPositionDutyPositionRatingAssociation_Codebook_LtbUASSeatPosition_UASSeatPositionID");
            });

            modelBuilder.Entity<LtbDutyPositionRating>(entity =>
            {
                entity.HasKey(e => e.DutyPositionRatingId);

                entity.ToTable("LtbDutyPositionRating", "Codebook");

                entity.HasComment("This table contains a list of duty position ratings (rated, non-rated).");

                entity.Property(e => e.DutyPositionRatingId)
                    .HasColumnName("DutyPositionRatingID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyPositionRatingCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyPositionRatingParentId)
                    .HasColumnName("DutyPositionRatingParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DutyPositionRatingParent)
                    .WithMany(p => p.InverseDutyPositionRatingParent)
                    .HasForeignKey(d => d.DutyPositionRatingParentId)
                    .HasConstraintName("FK_Codebook_LtbDutyPositionRating_Codebook_LtbDutyPositionRating_DutyPositionRatingParentID");
            });

            modelBuilder.Entity<LtbDutyPostionExperienceCollected>(entity =>
            {
                entity.HasKey(e => e.DutyPostionExperienceCollectedId);

                entity.ToTable("LtbDutyPostionExperienceCollected", "Codebook");

                entity.HasComment("This table provides a listing of duty positions with seat positions for which experience hours is collected in event of a mishap.");

                entity.Property(e => e.DutyPostionExperienceCollectedId)
                    .HasColumnName("DutyPostionExperienceCollectedID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyPositionId)
                    .HasColumnName("DutyPositionID")
                    .HasComment("Unique ID representing duty position (PersonnelActivityID).");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DutyPosition)
                    .WithMany(p => p.LtbDutyPostionExperienceCollecteds)
                    .HasForeignKey(d => d.DutyPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyPostionExperienceCollected_Codebook_LtbPersonnelActivity_DutyPositionID");
            });

            modelBuilder.Entity<LtbDutyStatus>(entity =>
            {
                entity.HasKey(e => e.DutyStatusId);

                entity.ToTable("LtbDutyStatus", "Codebook");

                entity.HasComment("This table contains the first level of Duty Status values for an individual (On-Duty, Off-Duty).");

                entity.Property(e => e.DutyStatusId)
                    .HasColumnName("DutyStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyStatusParentId)
                    .HasColumnName("DutyStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DutyStatusParent)
                    .WithMany(p => p.InverseDutyStatusParent)
                    .HasForeignKey(d => d.DutyStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbDutyStatus_Codebook_LtbDutyStatus_DutyStatusParentID");
            });

            modelBuilder.Entity<LtbDutyStatusLevel2>(entity =>
            {
                entity.HasKey(e => e.DutyStatusLevel2Id);

                entity.ToTable("LtbDutyStatusLevel2", "Codebook");

                entity.HasComment("This table contains the 2nd level of Duty Status values for an individual.");

                entity.Property(e => e.DutyStatusLevel2Id)
                    .HasColumnName("DutyStatusLevel2ID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyStatusLevel2Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DutyStatusLevel2ParentId)
                    .HasColumnName("DutyStatusLevel2ParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DutyStatusLevel2Parent)
                    .WithMany(p => p.InverseDutyStatusLevel2Parent)
                    .HasForeignKey(d => d.DutyStatusLevel2ParentId)
                    .HasConstraintName("FK_Codebook_LtbDutyStatusLevel2_Codebook_LtbDutyStatusLevel2_DutyStatusLevel2ParentID");
            });

            modelBuilder.Entity<LtbDutyStatusLevel2Association>(entity =>
            {
                entity.HasKey(e => e.DutyStatusLevel2AssociationId);

                entity.ToTable("LtbDutyStatusLevel2Association", "Codebook");

                entity.HasComment("This table relates duty status level 1 and duty status level 2.");

                entity.Property(e => e.DutyStatusLevel2AssociationId)
                    .HasColumnName("DutyStatusLevel2AssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyStatusId)
                    .HasColumnName("DutyStatusID")
                    .HasComment("Unique ID representing the Duty Status level 1.");

                entity.Property(e => e.DutyStatusLevel2Id)
                    .HasColumnName("DutyStatusLevel2ID")
                    .HasComment("Unique ID representing the duty status level 2.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DutyStatus)
                    .WithMany(p => p.LtbDutyStatusLevel2Associations)
                    .HasForeignKey(d => d.DutyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyStatusLevel2Association_Codebook_LtbDutyStatus_DutyStatusID");

                entity.HasOne(d => d.DutyStatusLevel2)
                    .WithMany(p => p.LtbDutyStatusLevel2Associations)
                    .HasForeignKey(d => d.DutyStatusLevel2Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbDutyStatusLevel2Association_Codebook_LtbDutyStatuslevel2_DutyStatuslevel2ID");
            });

            modelBuilder.Entity<LtbDwprocessingStage>(entity =>
            {
                entity.HasKey(e => e.DwprocessingStageId);

                entity.ToTable("LtbDWProcessingStage", "Codebook");

                entity.HasComment("This table provides a list of mishap data warehouse processing stages that identify the flow of the mishap through the data warehouse and shows the stage of a mishap at a particular point in time.  Mishap data warehouse processing stages are created and identified internally and are not regulatory. ");

                entity.Property(e => e.DwprocessingStageId)
                    .HasColumnName("DWProcessingStageID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DwprocessingStageCode)
                    .IsRequired()
                    .HasColumnName("DWProcessingStageCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.DwprocessingStageParentId)
                    .HasColumnName("DWProcessingStageParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DwprocessingStageParent)
                    .WithMany(p => p.InverseDwprocessingStageParent)
                    .HasForeignKey(d => d.DwprocessingStageParentId)
                    .HasConstraintName("FK_Codebook_LtbDWProcessingStage_Codebook_LtbDWProcessingStage_DWProcessingStageParentID");
            });

            modelBuilder.Entity<LtbEmploymentStatus>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusId);

                entity.ToTable("LtbEmploymentStatus", "Codebook");

                entity.HasComment("This table contains Personnel Employment status values with self-referencing hierarchy of categories.");

                entity.Property(e => e.EmploymentStatusId)
                    .HasColumnName("EmploymentStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EmploymentStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.EmploymentStatusParentId)
                    .HasColumnName("EmploymentStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.EmploymentStatusParent)
                    .WithMany(p => p.InverseEmploymentStatusParent)
                    .HasForeignKey(d => d.EmploymentStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatus_Codebook_LtbEmploymentStatus_EmploymentStatusParentID");
            });

            modelBuilder.Entity<LtbEmploymentStatusArmyCountableInjuryAssociation>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusArmyCountableInjuryAssociationId)
                    .HasName("PK_LtbEmpStatusArmyCountableInjuryAssociation");

                entity.ToTable("LtbEmploymentStatusArmyCountableInjuryAssociation", "Codebook");

                entity.HasComment("Table provides informaiton to determine if an injury is countable as an army injury");

                entity.Property(e => e.EmploymentStatusArmyCountableInjuryAssociationId).HasColumnName("EmploymentStatusArmyCountableInjuryAssociationID");

                entity.Property(e => e.ArmyCountableInjuryResponseId).HasColumnName("ArmyCountableInjuryResponseID");

                entity.Property(e => e.ArmyRecordableMishapResponseId).HasColumnName("ArmyRecordableMishapResponseID");

                entity.Property(e => e.ArmyResponsibleInjuryCostResponseId).HasColumnName("ArmyResponsibleInjuryCostResponseID");

                entity.Property(e => e.AssignedAttachedToArmyResponseId).HasColumnName("AssignedAttachedToArmyResponseID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DutyStatusId).HasColumnName("DutyStatusID");

                entity.Property(e => e.EmploymentStatusId).HasColumnName("EmploymentStatusID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IndividualInjuredResponseId).HasColumnName("IndividualInjuredResponseID");

                entity.Property(e => e.InjuryCostResponsibleDoDserviceComponentId).HasColumnName("InjuryCostResponsibleDoDServiceComponentID");

                entity.Property(e => e.InjuryCostResponsibleDoDserviceId).HasColumnName("InjuryCostResponsibleDoDServiceID");

                entity.Property(e => e.InjuryDueToArmyOperationsResponseId).HasColumnName("InjuryDueToArmyOperationsResponseID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReviewFlagResponseId).HasColumnName("ReviewFlagResponseID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ArmyCountableInjuryResponse)
                    .WithMany(p => p.LtbEmploymentStatusArmyCountableInjuryAssociationArmyCountableInjuryResponses)
                    .HasForeignKey(d => d.ArmyCountableInjuryResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusArmyCountableInjuryAssociation_Codebook_LtbResponse_ArmyCountableInjuryResponseID");

                entity.HasOne(d => d.DutyStatus)
                    .WithMany(p => p.LtbEmploymentStatusArmyCountableInjuryAssociations)
                    .HasForeignKey(d => d.DutyStatusId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusArmyCountableInjuryAssociation_Codebook_LtbDutyStatus_DutyStatusID");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbEmploymentStatusArmyCountableInjuryAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusArmyCountableInjuryAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");

                entity.HasOne(d => d.IndividualInjuredResponse)
                    .WithMany(p => p.LtbEmploymentStatusArmyCountableInjuryAssociationIndividualInjuredResponses)
                    .HasForeignKey(d => d.IndividualInjuredResponseId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusArmyCountableInjuryAssociation_Codebook_LtbResponse_IndividualInjuredResponseID");

                entity.HasOne(d => d.ReviewFlagResponse)
                    .WithMany(p => p.LtbEmploymentStatusArmyCountableInjuryAssociationReviewFlagResponses)
                    .HasForeignKey(d => d.ReviewFlagResponseId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusArmyCountableInjuryAssociation_Codebook_LtbResponse_ReviewFlagResponseID");
            });

            modelBuilder.Entity<LtbEmploymentStatusDutyStatusAssociation>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusDutyStatusAssociationId);

                entity.ToTable("LtbEmploymentStatusDutyStatusAssociation", "Codebook");

                entity.HasComment("This table indicates valid duty status values for each personnel employment status.");

                entity.Property(e => e.EmploymentStatusDutyStatusAssociationId)
                    .HasColumnName("EmploymentStatusDutyStatusAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyStatusId)
                    .HasColumnName("DutyStatusID")
                    .HasComment("Unique ID representing the Duty Status level 1.");

                entity.Property(e => e.EmploymentStatusId)
                    .HasColumnName("EmploymentStatusID")
                    .HasComment("Unique ID representing the personnel employment status.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DutyStatus)
                    .WithMany(p => p.LtbEmploymentStatusDutyStatusAssociations)
                    .HasForeignKey(d => d.DutyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusDutyStatusAssociation_Codebook_LtbDutyStatus_DutyStatusID");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbEmploymentStatusDutyStatusAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusDutyStatusAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");
            });

            modelBuilder.Entity<LtbEmploymentStatusInjuryDueToArmyOpsAssociation>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusInjuryDueToArmyOpsAssociationId);

                entity.ToTable("LtbEmploymentStatusInjuryDueToArmyOpsAssociation", "Codebook");

                entity.HasComment("Table provides informaiton to determine if an injury is countable as an army injury");

                entity.Property(e => e.EmploymentStatusInjuryDueToArmyOpsAssociationId).HasColumnName("EmploymentStatusInjuryDueToArmyOpsAssociationID");

                entity.Property(e => e.ArmyRecordableMishapResponseId).HasColumnName("ArmyRecordableMishapResponseID");

                entity.Property(e => e.AssignedAttachedToArmyResponseId).HasColumnName("AssignedAttachedToArmyResponseID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DutyStatusId).HasColumnName("DutyStatusID");

                entity.Property(e => e.EmploymentStatusId).HasColumnName("EmploymentStatusID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ArmyRecordableMishapResponse)
                    .WithMany(p => p.LtbEmploymentStatusInjuryDueToArmyOpsAssociationArmyRecordableMishapResponses)
                    .HasForeignKey(d => d.ArmyRecordableMishapResponseId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusInjuryDueToArmyOpsAssociation_Codebook_LtbResponse_ArmyRecordableMishapResponseID");

                entity.HasOne(d => d.AssignedAttachedToArmyResponse)
                    .WithMany(p => p.LtbEmploymentStatusInjuryDueToArmyOpsAssociationAssignedAttachedToArmyResponses)
                    .HasForeignKey(d => d.AssignedAttachedToArmyResponseId)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusInjuryDueToArmyOpsAssociation_Codebook_LtbResponse_AssignedAttachedToArmyResponseID");

                entity.HasOne(d => d.DutyStatus)
                    .WithMany(p => p.LtbEmploymentStatusInjuryDueToArmyOpsAssociations)
                    .HasForeignKey(d => d.DutyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusInjuryDueToArmyOpsAssociation_Codebook_LtbDutyStatus_DutyStatusID");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbEmploymentStatusInjuryDueToArmyOpsAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusInjuryDueToArmyOpsAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");
            });

            modelBuilder.Entity<LtbEmploymentStatusPayGradeAssociation>(entity =>
            {
                entity.HasKey(e => e.EmploymentStatusPayGradeAssociationId);

                entity.ToTable("LtbEmploymentStatusPayGradeAssociation", "Codebook");

                entity.HasComment("This table provides a cross reference for which employment status values and pay grades can be used together.");

                entity.Property(e => e.EmploymentStatusPayGradeAssociationId)
                    .HasColumnName("EmploymentStatusPayGradeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EmploymentStatusId)
                    .HasColumnName("EmploymentStatusID")
                    .HasComment("Unique ID representing the personnel employment status.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique ID representing the pay grade.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbEmploymentStatusPayGradeAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusPayGradeAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbEmploymentStatusPayGradeAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEmploymentStatusPayGradeAssociation_Codebook_LtbPayGrade_PayGradeID");
            });

            modelBuilder.Entity<LtbEnvironmentalConditionType>(entity =>
            {
                entity.HasKey(e => e.EnvironmentalConditionTypeId);

                entity.ToTable("LtbEnvironmentalConditionType", "Codebook");

                entity.HasComment("This table contains a list of environmental conditions that may have contributed to the mishap. ");

                entity.Property(e => e.EnvironmentalConditionTypeId)
                    .HasColumnName("EnvironmentalConditionTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EnvironmentalConditionTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.EnvironmentalConditionTypeParentId)
                    .HasColumnName("EnvironmentalConditionTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.EnvironmentalConditionTypeParent)
                    .WithMany(p => p.InverseEnvironmentalConditionTypeParent)
                    .HasForeignKey(d => d.EnvironmentalConditionTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbEnvironmentalConditionType_Codebook_LtbEnvironmentalConditionType_EnvironmentalConditionTypeParentID");
            });

            modelBuilder.Entity<LtbEnvironmentalDetailType>(entity =>
            {
                entity.HasKey(e => e.EnvironmentalDetailTypeId);

                entity.ToTable("LtbEnvironmentalDetailType", "Codebook");

                entity.HasComment("This table contains environmental measurements that may be recorded in event of a mishap.");

                entity.Property(e => e.EnvironmentalDetailTypeId)
                    .HasColumnName("EnvironmentalDetailTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasComment("The column name of the environmental data element.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EnvironmentalDetailTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.EnvironmentalDetailTypeParentId)
                    .HasColumnName("EnvironmentalDetailTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaxValue).HasComment("The maximum value that should be accepted for the environmental data element.");

                entity.Property(e => e.MinValue).HasComment("The minimum value that should be accepted for the environmental data element.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.EnvironmentalDetailTypeParent)
                    .WithMany(p => p.InverseEnvironmentalDetailTypeParent)
                    .HasForeignKey(d => d.EnvironmentalDetailTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbEnvironmentalDetailType_Codebook_LtbEnvironmentalDetailType_EnvironmentalDetailTypeParentID");
            });

            modelBuilder.Entity<LtbEstablishmentNaicassociation>(entity =>
            {
                entity.HasKey(e => e.EstablishmentNaicassociationId);

                entity.ToTable("LtbEstablishmentNAICAssociation", "Codebook");

                entity.HasComment("This table provides a mapping of NAIC codes to OSHA Establishment code.");

                entity.Property(e => e.EstablishmentNaicassociationId)
                    .HasColumnName("EstablishmentNAICAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NaindustryClassificationId)
                    .HasColumnName("NAIndustryClassificationID")
                    .HasComment("Unique ID respresenting the NAIndustry Classification.");

                entity.Property(e => e.OshaEstablishmentId)
                    .HasColumnName("OshaEstablishmentID")
                    .HasComment("Unique ID representing the OSHA Establishment.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.NaindustryClassification)
                    .WithMany(p => p.LtbEstablishmentNaicassociations)
                    .HasForeignKey(d => d.NaindustryClassificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEstablishmentNAICAssociation_Codebook_LtbNAIndustryClassification_NAIndustryClassificationID");

                entity.HasOne(d => d.OshaEstablishment)
                    .WithMany(p => p.LtbEstablishmentNaicassociations)
                    .HasForeignKey(d => d.OshaEstablishmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbEstablishmentNAICAssociation_Codebook_LtbOshaEstablishment_OshaEstablishmentID");
            });

            modelBuilder.Entity<LtbEventType>(entity =>
            {
                entity.HasKey(e => e.EventTypeId);

                entity.ToTable("LtbEventType", "Codebook");

                entity.HasComment("This table contains a list of the events leading to the mishap.");

                entity.Property(e => e.EventTypeId)
                    .HasColumnName("EventTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.EventTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.EventTypeParentId)
                    .HasColumnName("EventTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PrimaryEvent).HasComment("A bit value indicating whether an event can be at the primary level or is required to be at the primary level.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.EventTypeParent)
                    .WithMany(p => p.InverseEventTypeParent)
                    .HasForeignKey(d => d.EventTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbEventType_Codebook_LtbEventType_EventTypeParentID");
            });

            modelBuilder.Entity<LtbExplosivePackaging>(entity =>
            {
                entity.HasKey(e => e.ExplosivePackagingId);

                entity.ToTable("LtbExplosivePackaging", "Codebook");

                entity.HasComment("This table provides a list of type of packaging for explosive items.");

                entity.Property(e => e.ExplosivePackagingId)
                    .HasColumnName("ExplosivePackagingID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.ExplosivePackagingCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ExplosivePackagingParentId)
                    .HasColumnName("ExplosivePackagingParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ExplosivePackagingParent)
                    .WithMany(p => p.InverseExplosivePackagingParent)
                    .HasForeignKey(d => d.ExplosivePackagingParentId)
                    .HasConstraintName("FK_Codebook_LtbExplosivePackaging_Codebook_LtbExplosivePackaging_ExplosivePackagingParentID");
            });

            modelBuilder.Entity<LtbExtentDamage>(entity =>
            {
                entity.HasKey(e => e.ExtentDamageId);

                entity.ToTable("LtbExtentDamage", "Codebook");

                entity.HasComment("This table contains a list of degree of damage values for a materiel object damaged as a result of the mishap.");

                entity.Property(e => e.ExtentDamageId)
                    .HasColumnName("ExtentDamageID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.ExtentDamageCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ExtentDamageParentId)
                    .HasColumnName("ExtentDamageParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ExtentDamageParent)
                    .WithMany(p => p.InverseExtentDamageParent)
                    .HasForeignKey(d => d.ExtentDamageParentId)
                    .HasConstraintName("FK_Codebook_LtbExtentDamage_Codebook_LtbExtentDamage_ExtentDamageParentID");
            });

            modelBuilder.Entity<LtbExtentSpaceCompromised>(entity =>
            {
                entity.HasKey(e => e.ExtentSpaceCompromisedId);

                entity.ToTable("LtbExtentSpaceCompromised", "Codebook");

                entity.HasComment("This table provides a list of the manner in which aircraft passenger space is deformed or affected.");

                entity.Property(e => e.ExtentSpaceCompromisedId)
                    .HasColumnName("ExtentSpaceCompromisedID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.ExtentSpaceCompromisedCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ExtentSpaceCompromisedParentId)
                    .HasColumnName("ExtentSpaceCompromisedParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ExtentSpaceCompromisedParent)
                    .WithMany(p => p.InverseExtentSpaceCompromisedParent)
                    .HasForeignKey(d => d.ExtentSpaceCompromisedParentId)
                    .HasConstraintName("FK_Codebook_LtbExtentSpaceCompromised_Codebook_LtbExtentSpaceCompromised_ExtentSpaceCompromisedParentID");
            });

            modelBuilder.Entity<LtbExternalReportType>(entity =>
            {
                entity.HasKey(e => e.ExternalReportTypeId);

                entity.ToTable("LtbExternalReportType", "Codebook");

                entity.HasComment("This table provides a list of external reports that could be filed when a mishap occurs.  Example:  U.S. Coast Guard");

                entity.Property(e => e.ExternalReportTypeId)
                    .HasColumnName("ExternalReportTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.ExternalReportTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ExternalReportTypeParentId)
                    .HasColumnName("ExternalReportTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ExternalReportTypeParent)
                    .WithMany(p => p.InverseExternalReportTypeParent)
                    .HasForeignKey(d => d.ExternalReportTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbExternalReportType_Codebook_LtbExternalReportType_ExternalReportTypeParentID");
            });

            modelBuilder.Entity<LtbFeedbackMethod>(entity =>
            {
                entity.HasKey(e => e.FeedbackMethodId);

                entity.ToTable("LtbFeedbackMethod", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.FeedbackMethodId)
                    .HasColumnName("FeedbackMethodID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FeedbackMethodCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FeedbackMethodParentId)
                    .HasColumnName("FeedbackMethodParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FeedbackMethodParent)
                    .WithMany(p => p.InverseFeedbackMethodParent)
                    .HasForeignKey(d => d.FeedbackMethodParentId)
                    .HasConstraintName("FK_Codebook_LtbFeedbackMethod_Codebook_LtbFeedbackMethod_FeedbackMethodParentID");
            });

            modelBuilder.Entity<LtbFindingAssessment>(entity =>
            {
                entity.HasKey(e => e.FindingAssessmentId);

                entity.ToTable("LtbFindingAssessment", "Codebook");

                entity.HasComment("This table provides a list of assemment values that are used for a finding (Causal, Contributing to Severity Injury/Damage, Present but not Causal, Known but not extracted).");

                entity.Property(e => e.FindingAssessmentId)
                    .HasColumnName("FindingAssessmentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FindingAssessmentCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FindingAssessmentParentId)
                    .HasColumnName("FindingAssessmentParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FindingAssessmentParent)
                    .WithMany(p => p.InverseFindingAssessmentParent)
                    .HasForeignKey(d => d.FindingAssessmentParentId)
                    .HasConstraintName("FK_Codebook_LtbFindingAssessment_Codebook_LtbFindingAssessment_FindingAssessmentParentID");
            });

            modelBuilder.Entity<LtbFireExtinguisherEffect>(entity =>
            {
                entity.HasKey(e => e.FireExtinguisherEffectId);

                entity.ToTable("LtbFireExtinguisherEffect", "Codebook");

                entity.HasComment("This table provides a listing of the effects the fire extinguishing system had on the fire and whether the fire extinguishing system was activated.");

                entity.Property(e => e.FireExtinguisherEffectId)
                    .HasColumnName("FireExtinguisherEffectID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FireExtinguisherEffectCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FireExtinguisherEffectParentId)
                    .HasColumnName("FireExtinguisherEffectParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FireExtinguisherEffectParent)
                    .WithMany(p => p.InverseFireExtinguisherEffectParent)
                    .HasForeignKey(d => d.FireExtinguisherEffectParentId)
                    .HasConstraintName("FK_Codebook_LtbFireExtinguisherEffect_Codebook_LtbFireExtinguisherEffect_FireExtinguisherEffectParentID");
            });

            modelBuilder.Entity<LtbFireExtinguisherType>(entity =>
            {
                entity.HasKey(e => e.FireExtinguisherTypeId);

                entity.ToTable("LtbFireExtinguisherType", "Codebook");

                entity.HasComment("This table provides a list of fire extinguishing system types.");

                entity.Property(e => e.FireExtinguisherTypeId)
                    .HasColumnName("FireExtinguisherTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FireExtinguisherTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FireExtinguisherTypeParentId)
                    .HasColumnName("FireExtinguisherTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FireExtinguisherTypeParent)
                    .WithMany(p => p.InverseFireExtinguisherTypeParent)
                    .HasForeignKey(d => d.FireExtinguisherTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbFireExtinguisherType_Codebook_LtbFireExtinguisherType_FireExtinguisherTypeParentID");
            });

            modelBuilder.Entity<LtbFireType>(entity =>
            {
                entity.HasKey(e => e.FireTypeId);

                entity.ToTable("LtbFireType", "Codebook");

                entity.HasComment("This table provides a list of fire types that are tracked by the system.");

                entity.Property(e => e.FireTypeId)
                    .HasColumnName("FireTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FireTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FireTypeParentId)
                    .HasColumnName("FireTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FireTypeParent)
                    .WithMany(p => p.InverseFireTypeParent)
                    .HasForeignKey(d => d.FireTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbFireType_Codebook_LtbFireType_FireTypeParentID");
            });

            modelBuilder.Entity<LtbFlightActivityCategory>(entity =>
            {
                entity.HasKey(e => e.FlightActivityCategoryId);

                entity.ToTable("LtbFlightActivityCategory", "Codebook");

                entity.HasComment("This table provides a listing of flight activity categories that flight crew member could be engaged in.");

                entity.Property(e => e.FlightActivityCategoryId)
                    .HasColumnName("FlightActivityCategoryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightActivityCategoryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightActivityCategoryParentId)
                    .HasColumnName("FlightActivityCategoryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightActivityCategoryParent)
                    .WithMany(p => p.InverseFlightActivityCategoryParent)
                    .HasForeignKey(d => d.FlightActivityCategoryParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightActivityCategory_Codebook_LtbFlightActivityCategory_FlightActivityCategoryParentID");
            });

            modelBuilder.Entity<LtbFlightConditionExperience>(entity =>
            {
                entity.HasKey(e => e.FlightConditionExperienceId);

                entity.ToTable("LtbFlightConditionExperience", "Codebook");

                entity.HasComment("This table provides a list of conditions where personnel flight experience hours will be collected.");

                entity.Property(e => e.FlightConditionExperienceId)
                    .HasColumnName("FlightConditionExperienceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightConditionExperienceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightConditionExperienceParentId)
                    .HasColumnName("FlightConditionExperienceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightConditionExperienceParent)
                    .WithMany(p => p.InverseFlightConditionExperienceParent)
                    .HasForeignKey(d => d.FlightConditionExperienceParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightConditionExperience_Codebook_LtbFlightConditionExperience_FlightConditionExperienceParentID");
            });

            modelBuilder.Entity<LtbFlightDataType>(entity =>
            {
                entity.HasKey(e => e.FlightDataTypeId);

                entity.ToTable("LtbFlightDataType", "Codebook");

                entity.HasComment("This table provides the different stages of the flight from which the data is collected (mishap sequence start, mishap occurred and at takeoff).");

                entity.Property(e => e.FlightDataTypeId)
                    .HasColumnName("FlightDataTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightDataTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightDataTypeParentId)
                    .HasColumnName("FlightDataTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightDataTypeParent)
                    .WithMany(p => p.InverseFlightDataTypeParent)
                    .HasForeignKey(d => d.FlightDataTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightDataType_Codebook_LtbFlightDataType_FlightDataTypeParentID");
            });

            modelBuilder.Entity<LtbFlightMeteorologicalCondition>(entity =>
            {
                entity.HasKey(e => e.FlightMeteorologicalConditionId);

                entity.ToTable("LtbFlightMeteorologicalCondition", "Codebook");

                entity.HasComment("This table provides a list of instrumental or visual meteorlogical conditions.");

                entity.Property(e => e.FlightMeteorologicalConditionId)
                    .HasColumnName("FlightMeteorologicalConditionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightMeteorologicalConditionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightMeteorologicalConditionParentId)
                    .HasColumnName("FlightMeteorologicalConditionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightMeteorologicalConditionParent)
                    .WithMany(p => p.InverseFlightMeteorologicalConditionParent)
                    .HasForeignKey(d => d.FlightMeteorologicalConditionParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightMeteorologicalCondition_Codebook_LtbFlightMeteorologicalCondition_FlightMeteorologicalConditionParentID");
            });

            modelBuilder.Entity<LtbFlightPlan>(entity =>
            {
                entity.HasKey(e => e.FlightPlanId);

                entity.ToTable("LtbFlightPlan", "Codebook");

                entity.HasComment("This table provides a list of flight plan rules that can be selected.");

                entity.Property(e => e.FlightPlanId)
                    .HasColumnName("FlightPlanID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightPlanCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightPlanParentId)
                    .HasColumnName("FlightPlanParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightPlanParent)
                    .WithMany(p => p.InverseFlightPlanParent)
                    .HasForeignKey(d => d.FlightPlanParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightPlan_Codebook_LtbFlightPlan_FlightPlanParentID");
            });

            modelBuilder.Entity<LtbFlightTerminationSystemActivationType>(entity =>
            {
                entity.HasKey(e => e.FlightTerminationSystemActivationTypeId);

                entity.ToTable("LtbFlightTerminationSystemActivationType", "Codebook");

                entity.HasComment("This table provides a list of different modes for flight termination system for an unmanned aircraft.");

                entity.Property(e => e.FlightTerminationSystemActivationTypeId)
                    .HasColumnName("FlightTerminationSystemActivationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightTerminationSystemActivationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FlightTerminationSystemActivationTypeParentId)
                    .HasColumnName("FlightTerminationSystemActivationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FlightTerminationSystemActivationTypeParent)
                    .WithMany(p => p.InverseFlightTerminationSystemActivationTypeParent)
                    .HasForeignKey(d => d.FlightTerminationSystemActivationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbFlightTerminationSystemActivationType_Codebook_LtbFlightTerminationSystemActvationType_ParentID");
            });

            modelBuilder.Entity<LtbFluidAmount>(entity =>
            {
                entity.HasKey(e => e.FluidAmountId);

                entity.ToTable("LtbFluidAmount", "Codebook");

                entity.HasComment("This table provides amounts of fluid. ");

                entity.Property(e => e.FluidAmountId)
                    .HasColumnName("FluidAmountID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FluidAmountCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FluidAmountParentId)
                    .HasColumnName("FluidAmountParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FluidAmountParent)
                    .WithMany(p => p.InverseFluidAmountParent)
                    .HasForeignKey(d => d.FluidAmountParentId)
                    .HasConstraintName("FK_Codebook_LtbFluidAmount_Codebook_LtbFluidAmount_FluidAmountParentID");
            });

            modelBuilder.Entity<LtbFluidSource>(entity =>
            {
                entity.HasKey(e => e.FluidSourceId);

                entity.ToTable("LtbFluidSource", "Codebook");

                entity.HasComment("This table provides a list of fluid spillage sources.");

                entity.Property(e => e.FluidSourceId)
                    .HasColumnName("FluidSourceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FluidSourceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FluidSourceParentId)
                    .HasColumnName("FluidSourceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FluidSourceParent)
                    .WithMany(p => p.InverseFluidSourceParent)
                    .HasForeignKey(d => d.FluidSourceParentId)
                    .HasConstraintName("FK_Codebook_LtbFluidSource_Codebook_LtbFluidSource_FluidSourceParentID");
            });

            modelBuilder.Entity<LtbFluidType>(entity =>
            {
                entity.HasKey(e => e.FluidTypeId);

                entity.ToTable("LtbFluidType", "Codebook");

                entity.HasComment("This table provides a list of fluid types.");

                entity.Property(e => e.FluidTypeId)
                    .HasColumnName("FluidTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FluidTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.FluidTypeParentId)
                    .HasColumnName("FluidTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.FluidTypeParent)
                    .WithMany(p => p.InverseFluidTypeParent)
                    .HasForeignKey(d => d.FluidTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbFluidType_Codebook_LtbFluidType_FluidTypeParentID");
            });

            modelBuilder.Entity<LtbForecastAccuracy>(entity =>
            {
                entity.HasKey(e => e.ForecastAccuracyId);

                entity.ToTable("LtbForecastAccuracy", "Codebook");

                entity.HasComment("This table provides the degree to which the weather forecast was accurate.");

                entity.Property(e => e.ForecastAccuracyId)
                    .HasColumnName("ForecastAccuracyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.ForecastAccuracyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ForecastAccuracyParentId)
                    .HasColumnName("ForecastAccuracyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ForecastAccuracyParent)
                    .WithMany(p => p.InverseForecastAccuracyParent)
                    .HasForeignKey(d => d.ForecastAccuracyParentId)
                    .HasConstraintName("FK_Codebook_LtbForecastAccuracy_Codebook_LtbForecastAccuracy_ForecastAccuracyParentID");
            });

            modelBuilder.Entity<LtbGender>(entity =>
            {
                entity.HasKey(e => e.GenderId);

                entity.ToTable("LtbGender", "Codebook");

                entity.HasComment("This table contains a list of genders for the purpose of standardizing input (F - Female, M - Male, U - Unknown).");

                entity.Property(e => e.GenderId)
                    .HasColumnName("GenderID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.GenderCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.GenderParentId)
                    .HasColumnName("GenderParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.GenderParent)
                    .WithMany(p => p.InverseGenderParent)
                    .HasForeignKey(d => d.GenderParentId)
                    .HasConstraintName("FK_Codebook_LtbGender_Codebook_LtbGender_GenderParentID");
            });

            modelBuilder.Entity<LtbGeographicLocation>(entity =>
            {
                entity.HasKey(e => e.GeographicLocationId);

                entity.ToTable("LtbGeographicLocation", "Codebook");

                entity.HasComment("This table contains Geographic Locations in accordance with DRRS/Asorts and Army Location File. External Data Source.");

                entity.Property(e => e.GeographicLocationId)
                    .HasColumnName("GeographicLocationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Unique ID representing the country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.GeographicLocationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing the US State.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbGeographicLocations)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbGeographicLocation_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbGeographicLocations)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbGeographicLocation_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbHazardActionStatus>(entity =>
            {
                entity.HasKey(e => e.HazardActionStatusId);

                entity.ToTable("LtbHazardActionStatus", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardActionStatusId)
                    .HasColumnName("HazardActionStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardActionStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardActionStatusParentId)
                    .HasColumnName("HazardActionStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardActionStatusParent)
                    .WithMany(p => p.InverseHazardActionStatusParent)
                    .HasForeignKey(d => d.HazardActionStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardActionStatus_Codebook_LtbHazardActionStatus_HazardActionStatusParentID");
            });

            modelBuilder.Entity<LtbHazardCategory>(entity =>
            {
                entity.HasKey(e => e.HazardCategoryId);

                entity.ToTable("LtbHazardCategory", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardCategoryId)
                    .HasColumnName("HazardCategoryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardCategoryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardCategoryParentId)
                    .HasColumnName("HazardCategoryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardCategoryParent)
                    .WithMany(p => p.InverseHazardCategoryParent)
                    .HasForeignKey(d => d.HazardCategoryParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardCategory_Codebook_LtbHazardCategory_HazardCategoryParentID");
            });

            modelBuilder.Entity<LtbHazardReportStatus>(entity =>
            {
                entity.HasKey(e => e.HazardReportStatusId);

                entity.ToTable("LtbHazardReportStatus", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardReportStatusId)
                    .HasColumnName("HazardReportStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardReportStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardReportStatusParentId)
                    .HasColumnName("HazardReportStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardReportStatusParent)
                    .WithMany(p => p.InverseHazardReportStatusParent)
                    .HasForeignKey(d => d.HazardReportStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardReportStatus_Codebook_LtbHazardReportStatus_HazardReportStatusParentID");
            });

            modelBuilder.Entity<LtbHazardResourceDeficiency>(entity =>
            {
                entity.HasKey(e => e.HazardResourceDeficiencyId);

                entity.ToTable("LtbHazardResourceDeficiency", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardResourceDeficiencyId)
                    .HasColumnName("HazardResourceDeficiencyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardResourceDeficiencyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardResourceDeficiencyParentId)
                    .HasColumnName("HazardResourceDeficiencyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardResourceDeficiencyParent)
                    .WithMany(p => p.InverseHazardResourceDeficiencyParent)
                    .HasForeignKey(d => d.HazardResourceDeficiencyParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardResourceDeficiency_Codebook_LtbHazardResourceDeficiency_HazardResourceDeficiencyParentID");
            });

            modelBuilder.Entity<LtbHazardRiskAcceptanceMethod>(entity =>
            {
                entity.HasKey(e => e.HazardRiskAcceptanceMethodId);

                entity.ToTable("LtbHazardRiskAcceptanceMethod", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardRiskAcceptanceMethodId)
                    .HasColumnName("HazardRiskAcceptanceMethodID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardRiskAcceptanceMethodCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardRiskAcceptanceMethodParentId)
                    .HasColumnName("HazardRiskAcceptanceMethodParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardRiskAcceptanceMethodParent)
                    .WithMany(p => p.InverseHazardRiskAcceptanceMethodParent)
                    .HasForeignKey(d => d.HazardRiskAcceptanceMethodParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardRiskAcceptanceMethod_Codebook_LtbHazardRiskAcceptanceMethod_HazardRiskAcceptanceMethodParentID");
            });

            modelBuilder.Entity<LtbHazardSource>(entity =>
            {
                entity.HasKey(e => e.HazardSourceId);

                entity.ToTable("LtbHazardSource", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardSourceId)
                    .HasColumnName("HazardSourceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardSourceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardSourceParentId)
                    .HasColumnName("HazardSourceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardSourceParent)
                    .WithMany(p => p.InverseHazardSourceParent)
                    .HasForeignKey(d => d.HazardSourceParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardSource_Codebook_LtbHazardSource_HazardSourceParentID");
            });

            modelBuilder.Entity<LtbHazardStatus>(entity =>
            {
                entity.HasKey(e => e.HazardStatusId);

                entity.ToTable("LtbHazardStatus", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.HazardStatusId)
                    .HasColumnName("HazardStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HazardStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HazardStatusParentId)
                    .HasColumnName("HazardStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HazardStatusParent)
                    .WithMany(p => p.InverseHazardStatusParent)
                    .HasForeignKey(d => d.HazardStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbHazardStatus_Codebook_LtbHazardStatus_HazardStatusParentID");
            });

            modelBuilder.Entity<LtbHealthServiceRegion>(entity =>
            {
                entity.HasKey(e => e.HealthServiceRegionId);

                entity.ToTable("LtbHealthServiceRegion", "Codebook");

                entity.HasComment("This table contains a list of Health Service Regions for DoD DMIS Medical Treatment Facilities.  External Data Source.  Supporting DOD information.");

                entity.Property(e => e.HealthServiceRegionId)
                    .HasColumnName("HealthServiceRegionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HealthServiceRegionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HealthServiceRegionParentId)
                    .HasColumnName("HealthServiceRegionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HealthServiceRegionParent)
                    .WithMany(p => p.InverseHealthServiceRegionParent)
                    .HasForeignKey(d => d.HealthServiceRegionParentId)
                    .HasConstraintName("FK_Codebook_LtbHealthServiceRegion_Codebook_LtbHealthServiceRegion_HealthServiceRegionParentID");
            });

            modelBuilder.Entity<LtbHumanFactor>(entity =>
            {
                entity.HasKey(e => e.HumanFactorId);

                entity.ToTable("LtbHumanFactor", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of human-factor nano codes.");

                entity.Property(e => e.HumanFactorId)
                    .HasColumnName("HumanFactorID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HumanFactorCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HumanFactorParentId)
                    .HasColumnName("HumanFactorParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HumanFactorParent)
                    .WithMany(p => p.InverseHumanFactorParent)
                    .HasForeignKey(d => d.HumanFactorParentId)
                    .HasConstraintName("FK_Codebook_LtbHumanFactor_Codebook_LtbHumanFactor_HumanFactorParentID");
            });

            modelBuilder.Entity<LtbHumanFactorNature>(entity =>
            {
                entity.HasKey(e => e.HumanFactorNatureId);

                entity.ToTable("LtbHumanFactorNature", "Codebook");

                entity.HasComment("This table provides the way Human factor codes are identified (Act, Latent Failure).");

                entity.Property(e => e.HumanFactorNatureId)
                    .HasColumnName("HumanFactorNatureID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HumanFactorNatureCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.HumanFactorNatureParentId)
                    .HasColumnName("HumanFactorNatureParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.HumanFactorNatureParent)
                    .WithMany(p => p.InverseHumanFactorNatureParent)
                    .HasForeignKey(d => d.HumanFactorNatureParentId)
                    .HasConstraintName("FK_Codebook_LtbHumanFactorNature_Codebook_LtbHumanFactorNature_HumanFactorNatureParentID");
            });

            modelBuilder.Entity<LtbInformationType>(entity =>
            {
                entity.HasKey(e => e.InformationTypeId);

                entity.ToTable("LtbInformationType", "Codebook");

                entity.HasComment("This table provides the types of information that are contained in mishap supporting documentation.");

                entity.Property(e => e.InformationTypeId)
                    .HasColumnName("InformationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InformationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InformationTypeParentId)
                    .HasColumnName("InformationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InformationTypeParent)
                    .WithMany(p => p.InverseInformationTypeParent)
                    .HasForeignKey(d => d.InformationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInformationType_Codebook_LtbInformationType_InformationTypeParentID");
            });

            modelBuilder.Entity<LtbInformationTypeAssociationTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.InformationTypeAssociationTypeAssociationId);

                entity.ToTable("LtbInformationTypeAssociationTypeAssociation", "Codebook");

                entity.HasComment("This table indicates what supporting documentation information types can be associated with (mishap, human factor, materiel).");

                entity.Property(e => e.InformationTypeAssociationTypeAssociationId)
                    .HasColumnName("InformationTypeAssociationTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AssociationTypeId)
                    .HasColumnName("AssociationTypeID")
                    .HasComment("Unique ID representing the association type of the supporting documentation information type.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InformationTypeId)
                    .HasColumnName("InformationTypeID")
                    .HasComment("Unique ID respresenting the supporting documentation information type.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.AssociationType)
                    .WithMany(p => p.LtbInformationTypeAssociationTypeAssociations)
                    .HasForeignKey(d => d.AssociationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInformationTypeAssociationTypeAssociation_Codebook_LtbAssociationType_AssociationTypeID");

                entity.HasOne(d => d.InformationType)
                    .WithMany(p => p.LtbInformationTypeAssociationTypeAssociations)
                    .HasForeignKey(d => d.InformationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInformationTypeAssociationTypeAssociation_Codebook_LtbInformationType_InformationTypeID");
            });

            modelBuilder.Entity<LtbIninjuryCostCategoryMishapPersonAssociation>(entity =>
            {
                entity.HasKey(e => e.IninjuryCostCategoryMishapPersonAssociationId);

                entity.ToTable("LtbINInjuryCostCategoryMishapPersonAssociation", "Codebook");

                entity.HasComment("Table provides grouping for mishap personnel into the injury cost categories for Initial Notification mishaps.");

                entity.Property(e => e.IninjuryCostCategoryMishapPersonAssociationId).HasColumnName("INInjuryCostCategoryMishapPersonAssociationID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmploymentStatusId).HasColumnName("EmploymentStatusID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InjuryCostCategoryId).HasColumnName("InjuryCostCategoryID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.PayGradeId).HasColumnName("PayGradeID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbIninjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .HasConstraintName("FK_Codebook_LtbINInjuryCostCategoryMishapPersonAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");

                entity.HasOne(d => d.InjuryCostCategory)
                    .WithMany(p => p.LtbIninjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.InjuryCostCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbINInjuryCostCategoryMishapPersonAssociation_Codebook_LtbInjuryCostCategory_InjuryCostCategoryID");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbIninjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .HasConstraintName("FK_Codebook_LtbINInjuryCostCategoryMishapPersonAssociation_Codebook_LtbPayGrade_PayGradeID");
            });

            modelBuilder.Entity<LtbInjuryCause>(entity =>
            {
                entity.HasKey(e => e.InjuryCauseId);

                entity.ToTable("LtbInjuryCause", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of injury causes.");

                entity.Property(e => e.InjuryCauseId)
                    .HasColumnName("InjuryCauseID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InjuryCauseCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InjuryCauseParentId)
                    .HasColumnName("InjuryCauseParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjuryCauseParent)
                    .WithMany(p => p.InverseInjuryCauseParent)
                    .HasForeignKey(d => d.InjuryCauseParentId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCause_Codebook_LtbInjuryCause_InjuryCauseParentID");
            });

            modelBuilder.Entity<LtbInjuryCostCategory>(entity =>
            {
                entity.HasKey(e => e.InjuryCostCategoryId);

                entity.ToTable("LtbInjuryCostCategory", "Codebook");

                entity.HasComment("This table provides a list of injury cost categories for how mishap personnel are grouped.");

                entity.Property(e => e.InjuryCostCategoryId)
                    .HasColumnName("InjuryCostCategoryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InjuryCostCategoryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InjuryCostCategoryParentId)
                    .HasColumnName("InjuryCostCategoryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjuryCostCategoryParent)
                    .WithMany(p => p.InverseInjuryCostCategoryParent)
                    .HasForeignKey(d => d.InjuryCostCategoryParentId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategory_Codebook_LtbInjuryCostCategory_InjuryCostCategoryParentID");
            });

            modelBuilder.Entity<LtbInjuryCostCategoryMishapPersonAssociation>(entity =>
            {
                entity.HasKey(e => e.InjuryCostCategoryMishapPersonAssociationId);

                entity.ToTable("LtbInjuryCostCategoryMishapPersonAssociation", "Codebook");

                entity.HasComment("Table provides grouping for mishap personnel into the injury cost categories.");

                entity.Property(e => e.InjuryCostCategoryMishapPersonAssociationId).HasColumnName("InjuryCostCategoryMishapPersonAssociationID");

                entity.Property(e => e.ArmyCountableInjuryResponseId).HasColumnName("ArmyCountableInjuryResponseID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EmploymentStatusId).HasColumnName("EmploymentStatusID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.FlightStatusResponseId).HasColumnName("FlightStatusResponseID");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InjuryCostCategoryId).HasColumnName("InjuryCostCategoryID");

                entity.Property(e => e.JobTitleId).HasColumnName("JobTitleID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PayGradeId).HasColumnName("PayGradeID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ArmyCountableInjuryResponse)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociationArmyCountableInjuryResponses)
                    .HasForeignKey(d => d.ArmyCountableInjuryResponseId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbResponse_ArmyCountableInjuryResponseID");

                entity.HasOne(d => d.EmploymentStatus)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.EmploymentStatusId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbEmploymentStatus_EmploymentStatusID");

                entity.HasOne(d => d.FlightStatusResponse)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociationFlightStatusResponses)
                    .HasForeignKey(d => d.FlightStatusResponseId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbResponse_FlightStatusResponseID");

                entity.HasOne(d => d.InjuryCostCategory)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.InjuryCostCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbInjuryCostCategory_InjuryCostCategoryID");

                entity.HasOne(d => d.JobTitle)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.JobTitleId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbJobTitle_JobTitleID");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbInjuryCostCategoryMishapPersonAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostCategoryMishapPersonAssociation_Codebook_LtbPayGrade_PayGradeID");
            });

            modelBuilder.Entity<LtbInjuryCostFactorDateRange>(entity =>
            {
                entity.HasKey(e => e.InjuryCostFactorDateRangeId);

                entity.ToTable("LtbInjuryCostFactorDateRange", "Codebook");

                entity.HasComment("This table provides the date range that injury cost factors are applicable to.");

                entity.Property(e => e.InjuryCostFactorDateRangeId)
                    .HasColumnName("InjuryCostFactorDateRangeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DaysAwayFromWorkCostPerDay).HasComment("Days away from work cost per day for injury costing,");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HospitalizedCostPerDay).HasComment("Days hospitalized cost per day for injury costing,");

                entity.Property(e => e.InjuryCostFactorDateRangeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InjuryCostFactorDateRangeParentId)
                    .HasColumnName("InjuryCostFactorDateRangeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjuryCostFactorDateRangeParent)
                    .WithMany(p => p.InverseInjuryCostFactorDateRangeParent)
                    .HasForeignKey(d => d.InjuryCostFactorDateRangeParentId)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostFactorDateRange_Codebook_LtbInjuryCostFactorDateRange_InjuryCostFactorDateRangeParentID");
            });

            modelBuilder.Entity<LtbInjuryCostStandard>(entity =>
            {
                entity.HasKey(e => e.InjuryCostStandardId);

                entity.ToTable("LtbInjuryCostStandard", "Codebook");

                entity.HasComment("This table provides the standard injury cost for various injury severity,  personnel type and date range.");

                entity.Property(e => e.InjuryCostStandardId)
                    .HasColumnName("InjuryCostStandardID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.Cost).HasComment("Injury cost value to be used in personnel injury cost calculation.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InjuryCostCategoryId)
                    .HasColumnName("InjuryCostCategoryID")
                    .HasComment("Unique ID respresenting the Injury Cost Category.");

                entity.Property(e => e.InjuryCostFactorDateRangeId)
                    .HasColumnName("InjuryCostFactorDateRangeID")
                    .HasComment("Unqiue ID representing the injury cost factor date range.");

                entity.Property(e => e.InjurySeverityId)
                    .HasColumnName("InjurySeverityID")
                    .HasComment("Unique ID representing Injury severity.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjuryCostCategory)
                    .WithMany(p => p.LtbInjuryCostStandards)
                    .HasForeignKey(d => d.InjuryCostCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostStandard_Codebook_LtbInjuryCostCategory_InjuryCostCategoryID");

                entity.HasOne(d => d.InjuryCostFactorDateRange)
                    .WithMany(p => p.LtbInjuryCostStandards)
                    .HasForeignKey(d => d.InjuryCostFactorDateRangeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostStandard_Codebook_LtbInjuryCostFactorDateRange_InjuryCostFactorDateRangeID");

                entity.HasOne(d => d.InjurySeverity)
                    .WithMany(p => p.LtbInjuryCostStandards)
                    .HasForeignKey(d => d.InjurySeverityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInjuryCostStandard_Codebook_LtbInjurySeverity_InjurySeverityID");
            });

            modelBuilder.Entity<LtbInjurySeverity>(entity =>
            {
                entity.HasKey(e => e.InjurySeverityId);

                entity.ToTable("LtbInjurySeverity", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of injury severity levels that a personnel may incur in a mishap.");

                entity.Property(e => e.InjurySeverityId)
                    .HasColumnName("InjurySeverityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InjurySeverityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InjurySeverityParentId)
                    .HasColumnName("InjurySeverityParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjurySeverityParent)
                    .WithMany(p => p.InverseInjurySeverityParent)
                    .HasForeignKey(d => d.InjurySeverityParentId)
                    .HasConstraintName("FK_Codebook_LtbInjurySeverity_Codebook_LtbInjurySeverity_InjurySeverityParentID");
            });

            modelBuilder.Entity<LtbInjuryType>(entity =>
            {
                entity.HasKey(e => e.InjuryTypeId);

                entity.ToTable("LtbInjuryType", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of types of injuries that are tracked by the system.");

                entity.Property(e => e.InjuryTypeId)
                    .HasColumnName("InjuryTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InjuryTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InjuryTypeParentId)
                    .HasColumnName("InjuryTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InjuryTypeParent)
                    .WithMany(p => p.InverseInjuryTypeParent)
                    .HasForeignKey(d => d.InjuryTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInjuryType_Codebook_LtbInjuryType_InjuryTypeParentID");
            });

            modelBuilder.Entity<LtbInspectionAnswerType>(entity =>
            {
                entity.HasKey(e => e.InspectionAnswerTypeId);

                entity.ToTable("LtbInspectionAnswerType", "Codebook");

                entity.Property(e => e.InspectionAnswerTypeId)
                    .HasColumnName("InspectionAnswerTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionAnswerTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionAnswerTypeParentId)
                    .HasColumnName("InspectionAnswerTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionAnswerTypeParent)
                    .WithMany(p => p.InverseInspectionAnswerTypeParent)
                    .HasForeignKey(d => d.InspectionAnswerTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionAnswerType_Codebook_LtbInspectionAnswerType_InspectionAnswerTypeParentID");
            });

            modelBuilder.Entity<LtbInspectionAnswerTypeAnswerValueAssociation>(entity =>
            {
                entity.HasKey(e => e.InspectionAnswerTypeAnswerValueAssociationId);

                entity.ToTable("LtbInspectionAnswerTypeAnswerValueAssociation", "Codebook");

                entity.Property(e => e.InspectionAnswerTypeAnswerValueAssociationId)
                    .HasColumnName("InspectionAnswerTypeAnswerValueAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionAnswerTypeId)
                    .HasColumnName("InspectionAnswerTypeID")
                    .HasComment("Unique ID representing the Inspection Answer Type.");

                entity.Property(e => e.InspectionAnswerValueId)
                    .HasColumnName("InspectionAnswerValueID")
                    .HasComment("Unique ID representing the Inspection answer value.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.InspectionAnswerType)
                    .WithMany(p => p.LtbInspectionAnswerTypeAnswerValueAssociations)
                    .HasForeignKey(d => d.InspectionAnswerTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInspectionAnswerTypeAnswerValueAssociation_Codebook_LtbInspectionAnswerType_InspectionAnswerTypeID");

                entity.HasOne(d => d.InspectionAnswerValue)
                    .WithMany(p => p.LtbInspectionAnswerTypeAnswerValueAssociations)
                    .HasForeignKey(d => d.InspectionAnswerValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbInspectionAnswerTypeAnswerValueAssociation_Codebook_LtbInspectionAnswerValue_InspectionAnswerValueID");
            });

            modelBuilder.Entity<LtbInspectionAnswerValue>(entity =>
            {
                entity.HasKey(e => e.InspectionAnswerValueId);

                entity.ToTable("LtbInspectionAnswerValue", "Codebook");

                entity.Property(e => e.InspectionAnswerValueId)
                    .HasColumnName("InspectionAnswerValueID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionAnswerValueCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionAnswerValueParentId)
                    .HasColumnName("InspectionAnswerValueParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionAnswerValueParent)
                    .WithMany(p => p.InverseInspectionAnswerValueParent)
                    .HasForeignKey(d => d.InspectionAnswerValueParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionAnswerValue_Codebook_LtbInspectionAnswerValue_InspectionAnswerValueParentID");
            });

            modelBuilder.Entity<LtbInspectionCheckListStatus>(entity =>
            {
                entity.HasKey(e => e.InspectionCheckListStatusId);

                entity.ToTable("LtbInspectionCheckListStatus", "Codebook");

                entity.Property(e => e.InspectionCheckListStatusId)
                    .HasColumnName("InspectionCheckListStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionCheckListStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionCheckListStatusParentId)
                    .HasColumnName("InspectionCheckListStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionCheckListStatusParent)
                    .WithMany(p => p.InverseInspectionCheckListStatusParent)
                    .HasForeignKey(d => d.InspectionCheckListStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionCheckListStatus_Codebook_LtbInspectionCheckListStatus_InspectionCheckListStatusParentID");
            });

            modelBuilder.Entity<LtbInspectionCheckListType>(entity =>
            {
                entity.HasKey(e => e.InspectionCheckListTypeId);

                entity.ToTable("LtbInspectionCheckListType", "Codebook");

                entity.Property(e => e.InspectionCheckListTypeId)
                    .HasColumnName("InspectionCheckListTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionCheckListTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionCheckListTypeParentId)
                    .HasColumnName("InspectionCheckListTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionCheckListTypeParent)
                    .WithMany(p => p.InverseInspectionCheckListTypeParent)
                    .HasForeignKey(d => d.InspectionCheckListTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionCheckListType_Codebook_LtbInspectionCheckListType_InspectionCheckListTypeParentID");
            });

            modelBuilder.Entity<LtbInspectionFrequency>(entity =>
            {
                entity.HasKey(e => e.InspectionFrequencyId);

                entity.ToTable("LtbInspectionFrequency", "Codebook");

                entity.Property(e => e.InspectionFrequencyId)
                    .HasColumnName("InspectionFrequencyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionFrequencyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionFrequencyParentId)
                    .HasColumnName("InspectionFrequencyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionFrequencyParent)
                    .WithMany(p => p.InverseInspectionFrequencyParent)
                    .HasForeignKey(d => d.InspectionFrequencyParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionFrequency_Codebook_LtbInspectionFrequency_InspectionFrequencyParentID");
            });

            modelBuilder.Entity<LtbInspectionGoverningDocument>(entity =>
            {
                entity.HasKey(e => e.InspectionGoverningDocumentId);

                entity.ToTable("LtbInspectionGoverningDocument", "Codebook");

                entity.Property(e => e.InspectionGoverningDocumentId)
                    .HasColumnName("InspectionGoverningDocumentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionGoverningDocumentCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionGoverningDocumentParentId)
                    .HasColumnName("InspectionGoverningDocumentParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionGoverningDocumentParent)
                    .WithMany(p => p.InverseInspectionGoverningDocumentParent)
                    .HasForeignKey(d => d.InspectionGoverningDocumentParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionGoverningDocument_Codebook_LtbInspectionGoverningDocument_InspectionGoverningDocumentParentID");
            });

            modelBuilder.Entity<LtbInspectionProgramElement>(entity =>
            {
                entity.HasKey(e => e.InspectionProgramElementId);

                entity.ToTable("LtbInspectionProgramElement", "Codebook");

                entity.Property(e => e.InspectionProgramElementId)
                    .HasColumnName("InspectionProgramElementID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionProgramElementCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionProgramElementParentId)
                    .HasColumnName("InspectionProgramElementParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionProgramElementParent)
                    .WithMany(p => p.InverseInspectionProgramElementParent)
                    .HasForeignKey(d => d.InspectionProgramElementParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionProgramElement_Codebook_LtbInspectionProgramElement_InspectionProgramElementParentID");
            });

            modelBuilder.Entity<LtbInspectionQuestionProbability>(entity =>
            {
                entity.HasKey(e => e.InspectionQuestionProbabilityId);

                entity.ToTable("LtbInspectionQuestionProbability", "Codebook");

                entity.Property(e => e.InspectionQuestionProbabilityId)
                    .HasColumnName("InspectionQuestionProbabilityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionQuestionProbabilityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionQuestionProbabilityParentId)
                    .HasColumnName("InspectionQuestionProbabilityParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionQuestionProbabilityParent)
                    .WithMany(p => p.InverseInspectionQuestionProbabilityParent)
                    .HasForeignKey(d => d.InspectionQuestionProbabilityParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionProbability_Codebook_LtbInspectionQuestionProbability_InspectionQuestionProbabilityParentID");
            });

            modelBuilder.Entity<LtbInspectionQuestionRac>(entity =>
            {
                entity.HasKey(e => e.InspectionQuestionRacid);

                entity.ToTable("LtbInspectionQuestionRAC", "Codebook");

                entity.Property(e => e.InspectionQuestionRacid).HasColumnName("InspectionQuestionRACID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionQuestionProbabilityId).HasColumnName("InspectionQuestionProbabilityID");

                entity.Property(e => e.InspectionQuestionRacparentId).HasColumnName("InspectionQuestionRACParentID");

                entity.Property(e => e.InspectionQuestionRatingId).HasColumnName("InspectionQuestionRatingID");

                entity.Property(e => e.InspectionQuestionSeverityId).HasColumnName("InspectionQuestionSeverityID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.InspectionQuestionProbability)
                    .WithMany(p => p.LtbInspectionQuestionRacs)
                    .HasForeignKey(d => d.InspectionQuestionProbabilityId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionRAC_Codebook_LtbInspectionQuestionProbability_InspectionQuestionProbabilityID");

                entity.HasOne(d => d.InspectionQuestionRacparent)
                    .WithMany(p => p.InverseInspectionQuestionRacparent)
                    .HasForeignKey(d => d.InspectionQuestionRacparentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionRAC_Codebook_LtbInspectionQuestionRAC_InspectionQuestionRACParentID");

                entity.HasOne(d => d.InspectionQuestionRating)
                    .WithMany(p => p.LtbInspectionQuestionRacs)
                    .HasForeignKey(d => d.InspectionQuestionRatingId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionRAC_Codebook_LtbInspectionQuestionRating_InspectionQuestionRatingID");

                entity.HasOne(d => d.InspectionQuestionSeverity)
                    .WithMany(p => p.LtbInspectionQuestionRacs)
                    .HasForeignKey(d => d.InspectionQuestionSeverityId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionRAC_Codebook_LtbInspectionQuestionSeverity_InspectionQuestionSeverityID");
            });

            modelBuilder.Entity<LtbInspectionQuestionRating>(entity =>
            {
                entity.HasKey(e => e.InspectionQuestionRatingId);

                entity.ToTable("LtbInspectionQuestionRating", "Codebook");

                entity.Property(e => e.InspectionQuestionRatingId).HasColumnName("InspectionQuestionRatingID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionQuestionRatingCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionQuestionRatingParentId).HasColumnName("InspectionQuestionRatingParentID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.InspectionQuestionRatingParent)
                    .WithMany(p => p.InverseInspectionQuestionRatingParent)
                    .HasForeignKey(d => d.InspectionQuestionRatingParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionRating_Codebook_LtbInspectionQuestionRating_InspectionQuestionRatingParentID");
            });

            modelBuilder.Entity<LtbInspectionQuestionSeverity>(entity =>
            {
                entity.HasKey(e => e.InspectionQuestionSeverityId);

                entity.ToTable("LtbInspectionQuestionSeverity", "Codebook");

                entity.Property(e => e.InspectionQuestionSeverityId)
                    .HasColumnName("InspectionQuestionSeverityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionQuestionSeverityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionQuestionSeverityParentId)
                    .HasColumnName("InspectionQuestionSeverityParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionQuestionSeverityParent)
                    .WithMany(p => p.InverseInspectionQuestionSeverityParent)
                    .HasForeignKey(d => d.InspectionQuestionSeverityParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionQuestionSeverity_Codebook_LtbInspectionQuestionSeverity_InspectionQuestionSeverityParentID");
            });

            modelBuilder.Entity<LtbInspectionSpecialInterestLevel>(entity =>
            {
                entity.HasKey(e => e.InspectionSpecialInterestLevelId);

                entity.ToTable("LtbInspectionSpecialInterestLevel", "Codebook");

                entity.Property(e => e.InspectionSpecialInterestLevelId)
                    .HasColumnName("InspectionSpecialInterestLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionSpecialInterestLevelCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionSpecialInterestLevelParentId)
                    .HasColumnName("InspectionSpecialInterestLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionSpecialInterestLevelParent)
                    .WithMany(p => p.InverseInspectionSpecialInterestLevelParent)
                    .HasForeignKey(d => d.InspectionSpecialInterestLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionSpecialInterestLevel_Codebook_LtbInspectionSpecialInterestLevel_InspectionSpecialInterestLevelParentID");
            });

            modelBuilder.Entity<LtbInspectionStatus>(entity =>
            {
                entity.HasKey(e => e.InspectionStatusId);

                entity.ToTable("LtbInspectionStatus", "Codebook");

                entity.Property(e => e.InspectionStatusId)
                    .HasColumnName("InspectionStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InspectionStatusParentId)
                    .HasColumnName("InspectionStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionStatusParent)
                    .WithMany(p => p.InverseInspectionStatusParent)
                    .HasForeignKey(d => d.InspectionStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbInspectionStatus_Codebook_LtbInspectionStatus_InspectionStatusParentID");
            });

            modelBuilder.Entity<LtbInstallationLocationType>(entity =>
            {
                entity.HasKey(e => e.InstallationLocationTypeId);

                entity.ToTable("LtbInstallationLocationType", "Codebook");

                entity.HasComment("This table contains installation location types, or activity represented by a Geographic Location Code. These codes are based on Geographic location codes defined with the Army Station Code File.  External Data Source.");

                entity.Property(e => e.InstallationLocationTypeId)
                    .HasColumnName("InstallationLocationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InstallationLocationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InstallationLocationTypeParentId)
                    .HasColumnName("InstallationLocationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InstallationLocationTypeParent)
                    .WithMany(p => p.InverseInstallationLocationTypeParent)
                    .HasForeignKey(d => d.InstallationLocationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInstallationLocationType_Codebook_LtbInstallationLocationType_InstallationLocationTypeParentID");
            });

            modelBuilder.Entity<LtbInvestigationType>(entity =>
            {
                entity.HasKey(e => e.InvestigationTypeId);

                entity.ToTable("LtbInvestigationType", "Codebook");

                entity.HasComment("This table provides a list of Mishap investigation types (CAI, IAI).");

                entity.Property(e => e.InvestigationTypeId)
                    .HasColumnName("InvestigationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InvestigationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.InvestigationTypeParentId)
                    .HasColumnName("InvestigationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InvestigationTypeParent)
                    .WithMany(p => p.InverseInvestigationTypeParent)
                    .HasForeignKey(d => d.InvestigationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbInvestigationType_Codebook_LtbInvestigationType_InvestigationTypeParentID");
            });

            modelBuilder.Entity<LtbJobTitle>(entity =>
            {
                entity.HasKey(e => e.JobTitleId);

                entity.ToTable("LtbJobTitle", "Codebook");

                entity.HasComment("This tables a hierarachial listing of job titles derived from OPM and DOD of job titles (Military Occupational Specility (MOS) and Civilian Job Series). External Data Source.");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("JobTitleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JobTitleCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.JobTitleParentId)
                    .HasColumnName("JobTitleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.JobTitleParent)
                    .WithMany(p => p.InverseJobTitleParent)
                    .HasForeignKey(d => d.JobTitleParentId)
                    .HasConstraintName("FK_Codebook_LtbJobTitle_Codebook_LtbJobTitle_JobTitleParentID");
            });

            modelBuilder.Entity<LtbJobTitleBackupPreTfs3543>(entity =>
            {
                entity.HasKey(e => e.JobTitleId);

                entity.ToTable("LtbJobTitle_Backup_Pre_TFS_3543", "Codebook");

                entity.HasComment("This tables a hierarachial listing of job titles derived from OPM and DOD of job titles (Military Occupational Specility (MOS) and Civilian Job Series). External Data Source.");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("JobTitleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JobTitleCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.JobTitleParentId)
                    .HasColumnName("JobTitleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.JobTitleParent)
                    .WithMany(p => p.InverseJobTitleParent)
                    .HasForeignKey(d => d.JobTitleParentId)
                    .HasConstraintName("FK_Codebook_LtbJobTitle_Backup_Pre_TFS_3543_Codebook_LtbJobTitle_Backup_Pre_TFS_3543_JobTitleParentID");
            });

            modelBuilder.Entity<LtbJumpCategory>(entity =>
            {
                entity.HasKey(e => e.JumpCategoryId);

                entity.ToTable("LtbJumpCategory", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of parachute jump categories that are tracked (free fall, static line,…).");

                entity.Property(e => e.JumpCategoryId)
                    .HasColumnName("JumpCategoryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JumpCategoryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.JumpCategoryParentId)
                    .HasColumnName("JumpCategoryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.JumpCategoryParent)
                    .WithMany(p => p.InverseJumpCategoryParent)
                    .HasForeignKey(d => d.JumpCategoryParentId)
                    .HasConstraintName("FK_Codebook_LtbJumpCategory_Codebook_LtbJumpCategory_JumpCategoryParentID");
            });

            modelBuilder.Entity<LtbJumpType>(entity =>
            {
                entity.HasKey(e => e.JumpTypeId);

                entity.ToTable("LtbJumpType", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of parachute jump operation types (tactical, non-tactical,…).");

                entity.Property(e => e.JumpTypeId)
                    .HasColumnName("JumpTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JumpTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.JumpTypeParentId)
                    .HasColumnName("JumpTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.JumpTypeParent)
                    .WithMany(p => p.InverseJumpTypeParent)
                    .HasForeignKey(d => d.JumpTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbJumpType_Codebook_LtbJumpType_JumpTypeParentID");
            });

            modelBuilder.Entity<LtbLikelyConsequence>(entity =>
            {
                entity.HasKey(e => e.LikelyConsequenceId);

                entity.ToTable("LtbLikelyConsequence", "Codebook");

                entity.HasComment("This table provides a list of likely consequences.");

                entity.Property(e => e.LikelyConsequenceId)
                    .HasColumnName("LikelyConsequenceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LikelyConsequenceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.LikelyConsequenceParentId)
                    .HasColumnName("LikelyConsequenceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.LikelyConsequenceParent)
                    .WithMany(p => p.InverseLikelyConsequenceParent)
                    .HasForeignKey(d => d.LikelyConsequenceParentId)
                    .HasConstraintName("FK_Codebook_LtbLikelyConsequence_Codebook_LtbLikelyConsequence_LikelyConsequenceParentID");
            });

            modelBuilder.Entity<LtbLocationInAircraft>(entity =>
            {
                entity.HasKey(e => e.LocationInAircraftId);

                entity.ToTable("LtbLocationInAircraft", "Codebook");

                entity.HasComment("This table provides a list locations within an aircraft.");

                entity.Property(e => e.LocationInAircraftId)
                    .HasColumnName("LocationInAircraftID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LocationInAircraftCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.LocationInAircraftParentId)
                    .HasColumnName("LocationInAircraftParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.LocationInAircraftParent)
                    .WithMany(p => p.InverseLocationInAircraftParent)
                    .HasForeignKey(d => d.LocationInAircraftParentId)
                    .HasConstraintName("FK_Codebook_LtbLocationInAircraft_Codebook_LtbLocationInAircraft_LocationInAircraftParentID");
            });

            modelBuilder.Entity<LtbLocationMethod>(entity =>
            {
                entity.HasKey(e => e.LocationMethodId);

                entity.ToTable("LtbLocationMethod", "Codebook");

                entity.HasComment("This table provides the means used to locate a missing person in an aircraft mishap.");

                entity.Property(e => e.LocationMethodId)
                    .HasColumnName("LocationMethodID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LocationMethodCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.LocationMethodParentId)
                    .HasColumnName("LocationMethodParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.LocationMethodParent)
                    .WithMany(p => p.InverseLocationMethodParent)
                    .HasForeignKey(d => d.LocationMethodParentId)
                    .HasConstraintName("FK_Codebook_LtbLocationMethod_Codebook_LtbLocationMethod_LocationMethodParentID");
            });

            modelBuilder.Entity<LtbLocationType>(entity =>
            {
                entity.HasKey(e => e.LocationTypeId);

                entity.ToTable("LtbLocationType", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of location types where a mishap could occur.");

                entity.Property(e => e.LocationTypeId)
                    .HasColumnName("LocationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LocationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.LocationTypeParentId)
                    .HasColumnName("LocationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.LocationTypeParent)
                    .WithMany(p => p.InverseLocationTypeParent)
                    .HasForeignKey(d => d.LocationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbLocationType_Codebook_LtbLocationType_LocationTypeParentID");
            });

            modelBuilder.Entity<LtbManufacturer>(entity =>
            {
                entity.HasKey(e => e.ManufacturerId);

                entity.ToTable("LtbManufacturer", "Codebook");

                entity.HasComment("This table contains a list of materiel/part manufacturers. External Data Source.");

                entity.Property(e => e.ManufacturerId)
                    .HasColumnName("ManufacturerID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of the Manufacturer. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ManufacturerCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ManufacturerParentId)
                    .HasColumnName("ManufacturerParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbManufacturers)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbManufacturer_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.ManufacturerParent)
                    .WithMany(p => p.InverseManufacturerParent)
                    .HasForeignKey(d => d.ManufacturerParentId)
                    .HasConstraintName("FK_Codebook_LtbManufacturer_Codebook_LtbManufacturer_ManufacturerParentID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbManufacturers)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbManufacturer_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbMaterielObject>(entity =>
            {
                entity.HasKey(e => e.MaterielObjectId);

                entity.ToTable("LtbMaterielObject", "Codebook");

                entity.HasComment("This table provides a self referencing hierarchy of materiel involved in a mishap.  It also includes subsets of items required to additonal data elements such as (night vision device, protective equipment, dive platform,…).");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MaterielObjectParentId)
                    .HasColumnName("MaterielObjectParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MaterielObjectParent)
                    .WithMany(p => p.InverseMaterielObjectParent)
                    .HasForeignKey(d => d.MaterielObjectParentId)
                    .HasConstraintName("FK_Codebook_LtbMaterielObject_Codebook_LtbMaterielObject_MaterielObjectParentID");
            });

            modelBuilder.Entity<LtbMaterielObjectTacticalIndicatorAssociation>(entity =>
            {
                entity.HasKey(e => e.MaterielObjectTacticalIndicatorAssociationId);

                entity.ToTable("LtbMaterielObjectTacticalIndicatorAssociation", "Codebook");

                entity.HasComment("This table indicates whether a materiel object (vehicles) are tactical, non-tactical or both.");

                entity.Property(e => e.MaterielObjectTacticalIndicatorAssociationId)
                    .HasColumnName("MaterielObjectTacticalIndicatorAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.NonTacticalResponseId)
                    .HasColumnName("NonTacticalResponseID")
                    .HasComment("Unique ID indicating whether the materiel object is non-tactical.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TacticalResponseId)
                    .HasColumnName("TacticalResponseID")
                    .HasComment("Unique ID indicating whether the materiel object is tactical.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MaterielObject)
                    .WithMany(p => p.LtbMaterielObjectTacticalIndicatorAssociations)
                    .HasForeignKey(d => d.MaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMaterielObjectTacticalIndicatorAssociation_Codebook_LtbMaterielObject_MaterielObjectID");

                entity.HasOne(d => d.NonTacticalResponse)
                    .WithMany(p => p.LtbMaterielObjectTacticalIndicatorAssociationNonTacticalResponses)
                    .HasForeignKey(d => d.NonTacticalResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMaterielObjectTacticalIndicatorAssociation_Codebook_LtbResponse_NonTacticalResponseID");

                entity.HasOne(d => d.TacticalResponse)
                    .WithMany(p => p.LtbMaterielObjectTacticalIndicatorAssociationTacticalResponses)
                    .HasForeignKey(d => d.TacticalResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMaterielObjectTacticalIndicatorAssociation_Codebook_LtbResponse_ID");
            });

            modelBuilder.Entity<LtbMaterielType>(entity =>
            {
                entity.HasKey(e => e.MaterielTypeId);

                entity.ToTable("LtbMaterielType", "Codebook");

                entity.HasComment("This table contains component part types (component, part, UAS subsystem).");

                entity.Property(e => e.MaterielTypeId)
                    .HasColumnName("MaterielTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MaterielTypeParentId)
                    .HasColumnName("MaterielTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MaterielTypeParent)
                    .WithMany(p => p.InverseMaterielTypeParent)
                    .HasForeignKey(d => d.MaterielTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbMaterielType_Codebook_LtbMaterielType_MaterielTypeParentID");
            });

            modelBuilder.Entity<LtbMishapCategory>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryId);

                entity.ToTable("LtbMishapCategory", "Codebook");

                entity.HasComment("This table provides a hierarchial listing of the Mishap Categories that a mishap will be categorized.  There are 3 category types contained within this table (mishap category group,  Army mishap category and DoD mishap category).  DoD Mishap Category is External Data Source.");

                entity.Property(e => e.MishapCategoryId)
                    .HasColumnName("MishapCategoryID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapCategoryParentId)
                    .HasColumnName("MishapCategoryParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapCategoryParent)
                    .WithMany(p => p.InverseMishapCategoryParent)
                    .HasForeignKey(d => d.MishapCategoryParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapCategory_Codebook_LtbMishapCategory_MishapCategoryParentID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupAircraftMdstypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupAircraftMdstypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupAircraftMDSTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of Aircraft Type that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupAircraftMdstypeAssociationId)
                    .HasColumnName("MishapCategoryGroupAircraftMDSTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMdstypeId)
                    .HasColumnName("AircraftMDSTypeID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.AircraftMdstype)
                    .WithMany(p => p.LtbMishapCategoryGroupAircraftMdstypeAssociations)
                    .HasForeignKey(d => d.AircraftMdstypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupAircraftMDSTypeAssociation_Codebook_LtbAircraftMDSType_AircraftMDSTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupAircraftMdstypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupAircraftMDSTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupAircraftMtdsassociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupAircraftMtdsassociationId);

                entity.ToTable("LtbMishapCategoryGroupAircraftMTDSAssociation", "Codebook");

                entity.HasComment("This table provides the set of Aircraft MTDS that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupAircraftMtdsassociationId)
                    .HasColumnName("MishapCategoryGroupAircraftMTDSAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftMtdsid)
                    .HasColumnName("AircraftMTDSID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.AircraftMtds)
                    .WithMany(p => p.LtbMishapCategoryGroupAircraftMtdsassociations)
                    .HasForeignKey(d => d.AircraftMtdsid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupAircraftMTDSAssociation_Codebook_LtbAircraftMTDS_AircraftMTDSID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupAircraftMtdsassociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupAircraftMTDSAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupApplicationModuleAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupApplicationModuleAssociationId);

                entity.ToTable("LtbMishapCategoryGroupApplicationModuleAssociation", "Codebook");

                entity.HasComment("Table containing an association between application modules and Mishap Category Groups.");

                entity.Property(e => e.MishapCategoryGroupApplicationModuleAssociationId).HasColumnName("MishapCategoryGroupApplicationModuleAssociationID");

                entity.Property(e => e.ApplicationModuleId).HasColumnName("ApplicationModuleID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.ApplicationModule)
                    .WithMany(p => p.LtbMishapCategoryGroupApplicationModuleAssociations)
                    .HasForeignKey(d => d.ApplicationModuleId)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupApplicationModuleAssociation_Codebook_LtbApplicationModule_ApplicationModuleID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupApplicationModuleAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupApplicationModuleAssociation_Codebook_LtbMishapCategory_MishapCategoryID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupCertificationTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupCertificationTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupCertificationTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of certification types that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupCertificationTypeAssociationId)
                    .HasColumnName("MishapCategoryGroupCertificationTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CertificationTypeId)
                    .HasColumnName("CertificationTypeID")
                    .HasComment("Unique ID representing Certification Type.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.CertificationType)
                    .WithMany(p => p.LtbMishapCategoryGroupCertificationTypeAssociations)
                    .HasForeignKey(d => d.CertificationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupCertificationTypeAssociation_Codebook_LtbCertificationType_CertificationTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupCertificationTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupCertificationTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupEnvironmentalDetailTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupEnvironmentalDetailTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupEnvironmentalDetailTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of Environmental Detail Type data elements/columns that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupEnvironmentalDetailTypeAssociationId)
                    .HasColumnName("MishapCategoryGroupEnvironmentalDetailTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EnvironmentalDetailTypeId)
                    .HasColumnName("EnvironmentalDetailTypeID")
                    .HasComment("Unique ID representing the environment detail data element associated with mishap category group.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.EnvironmentalDetailType)
                    .WithMany(p => p.LtbMishapCategoryGroupEnvironmentalDetailTypeAssociations)
                    .HasForeignKey(d => d.EnvironmentalDetailTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupEnvironmentalDetailTypeAssociation_Codebook_LtbEnvironmentalDetailType_EnvirDetailTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupEnvironmentalDetailTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupEnvironmentalDetailTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupEventTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupEventTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupEventTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of Event Types that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupEventTypeAssociationId)
                    .HasColumnName("MishapCategoryGroupEventTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.EventTypeId)
                    .HasColumnName("EventTypeID")
                    .HasComment("Unique ID representing event type association with mishap category group.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.LtbMishapCategoryGroupEventTypeAssociations)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupEventTypeAssociation_Codebook_LtbEventType_EventTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupEventTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupEventTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupFireTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupFireTypeId);

                entity.ToTable("LtbMishapCategoryGroupFireTypeAssociation", "Codebook");

                entity.HasComment("This table indicates which fire types should be available for specific mishap category groups.");

                entity.Property(e => e.MishapCategoryGroupFireTypeId)
                    .HasColumnName("MishapCategoryGroupFireTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FireTypeId)
                    .HasColumnName("FireTypeID")
                    .HasComment("Unique ID representing the fire type.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryId)
                    .HasColumnName("MishapCategoryID")
                    .HasComment("Unique ID representing the mishap category group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.FireType)
                    .WithMany(p => p.LtbMishapCategoryGroupFireTypeAssociations)
                    .HasForeignKey(d => d.FireTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupFireTypeAssociation_Codebook_LtbFireType_FireTypeID");

                entity.HasOne(d => d.MishapCategory)
                    .WithMany(p => p.LtbMishapCategoryGroupFireTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupFireTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupGeneralMaterielObjectAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupMaterielObjectAssociationId);

                entity.ToTable("LtbMishapCategoryGroupGeneralMaterielObjectAssociation", "Codebook");

                entity.HasComment("This table provides the set of Materiel items that can be selected for a given mishap category group in a mishap within the specialized Materiel screens.");

                entity.Property(e => e.MishapCategoryGroupMaterielObjectAssociationId)
                    .HasColumnName("MishapCategoryGroupMaterielObjectAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MaterielObject)
                    .WithMany(p => p.LtbMishapCategoryGroupGeneralMaterielObjectAssociations)
                    .HasForeignKey(d => d.MaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupGeneralMaterielObjectAssociation_Codebook_LtbMaterielObject_MaterielObjectID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupGeneralMaterielObjectAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupGeneralMaterielObjectAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupGeneralMaterielObjectAssociation09082020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbMishapCategoryGroupGeneralMaterielObjectAssociation09082020", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MaterielObjectId).HasColumnName("MaterielObjectID");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.MishapCategoryGroupMaterielObjectAssociationId)
                    .HasColumnName("MishapCategoryGroupMaterielObjectAssociationID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbMishapCategoryGroupInformationTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupInformationTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupInformationTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of Supporting Documentation Information Types that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupInformationTypeAssociationId)
                    .HasColumnName("MishapCategoryGroupInformationTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InformationTypeId)
                    .HasColumnName("InformationTypeID")
                    .HasComment("Unique ID respresenting the supporting documentation information type.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.InformationType)
                    .WithMany(p => p.LtbMishapCategoryGroupInformationTypeAssociations)
                    .HasForeignKey(d => d.InformationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupInformationTypeAssociation_Codebook_LtbInformationType_InformationTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupInformationTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupInformationTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupMaterielObjectAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupMaterielObjectAssociationId);

                entity.ToTable("LtbMishapCategoryGroupMaterielObjectAssociation", "Codebook");

                entity.HasComment("This table provides the set of Materiel items that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupMaterielObjectAssociationId)
                    .HasColumnName("MishapCategoryGroupMaterielObjectAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MaterielObject)
                    .WithMany(p => p.LtbMishapCategoryGroupMaterielObjectAssociations)
                    .HasForeignKey(d => d.MaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMaterielObjectAssociation_Codebook_LtbMaterielObject_MaterielObjectID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupMaterielObjectAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMaterielObjectAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupMaterielObjectAssociation09082020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbMishapCategoryGroupMaterielObjectAssociation09082020", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MaterielObjectId).HasColumnName("MaterielObjectID");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.MishapCategoryGroupMaterielObjectAssociationId)
                    .HasColumnName("MishapCategoryGroupMaterielObjectAssociationID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbMishapCategoryGroupMishapCategoryAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupMishapCategoryAssociationId);

                entity.ToTable("LtbMishapCategoryGroupMishapCategoryAssociation", "Codebook");

                entity.HasComment("This table provides a list of data elements and values with mishap category groups to facilitate behind the scenes determination of the Mishap Category.");

                entity.Property(e => e.MishapCategoryGroupMishapCategoryAssociationId)
                    .HasColumnName("MishapCategoryGroupMishapCategoryAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.MishapCategoryId)
                    .HasColumnName("MishapCategoryID")
                    .HasComment("Unique ID representing Mishap Category.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupMishapCategoryAssociationMishapCategoryGroups)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMishapCategoryAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.MishapCategory)
                    .WithMany(p => p.LtbMishapCategoryGroupMishapCategoryAssociationMishapCategories)
                    .HasForeignKey(d => d.MishapCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMishapCategoryAssociation_Codebook_LtbMishapCategory_MishapCategoryID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupMissionTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupMissionTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupMissionTypeAssociation", "Codebook");

                entity.HasComment("Table provides the set of Mission Types that can be selected from given the category of the mishap.");

                entity.Property(e => e.MishapCategoryGroupMissionTypeAssociationId).HasColumnName("MishapCategoryGroupMissionTypeAssociationID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.MissionTypeId).HasColumnName("MissionTypeID");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupMissionTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMissionTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.MissionType)
                    .WithMany(p => p.LtbMishapCategoryGroupMissionTypeAssociations)
                    .HasForeignKey(d => d.MissionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMissionTypeAssociation_Codebook_LtbMissionType_MissionTypeID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupMistakeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupMistakeId);

                entity.ToTable("LtbMishapCategoryGroupMistakeAssociation", "Codebook");

                entity.HasComment("This table indicates which mistakes should be available for specific mishap category groups.");

                entity.Property(e => e.MishapCategoryGroupMistakeId)
                    .HasColumnName("MishapCategoryGroupMistakeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryId)
                    .HasColumnName("MishapCategoryID")
                    .HasComment("Unique ID representing the mishap category group.");

                entity.Property(e => e.MistakeId)
                    .HasColumnName("MistakeID")
                    .HasComment("Unique ID representing the fire type.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MishapCategory)
                    .WithMany(p => p.LtbMishapCategoryGroupMistakeAssociations)
                    .HasForeignKey(d => d.MishapCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMistakeAssociation_Codebook_LtbMishapCategory_MishapCategoryID");

                entity.HasOne(d => d.Mistake)
                    .WithMany(p => p.LtbMishapCategoryGroupMistakeAssociations)
                    .HasForeignKey(d => d.MistakeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupMistakeAssociation_Codebook_LtbMistake_MistakeID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupNarrativeTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupNarrativeTypeAssociationId);

                entity.ToTable("LtbMishapCategoryGroupNarrativeTypeAssociation", "Codebook");

                entity.HasComment("This table provides the set of narrative types that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupNarrativeTypeAssociationId)
                    .HasColumnName("MishapCategoryGroupNarrativeTypeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.NarrativeTypeId)
                    .HasColumnName("NarrativeTypeID")
                    .HasComment("Unique ID representing the narrative type.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupNarrativeTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupNarrativeTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.NarrativeType)
                    .WithMany(p => p.LtbMishapCategoryGroupNarrativeTypeAssociations)
                    .HasForeignKey(d => d.NarrativeTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupNarrativeTypeAssociation_Codebook_LtbNarrativeType_NarrativeTypeID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupNightVisionDeviceAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupNightVisionDeviceAssociationId);

                entity.ToTable("LtbMishapCategoryGroupNightVisionDeviceAssociation", "Codebook");

                entity.HasComment("This table provides the set of night vision devices that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupNightVisionDeviceAssociationId)
                    .HasColumnName("MishapCategoryGroupNightVisionDeviceAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DutyStatusId)
                    .HasColumnName("DutyStatusID")
                    .HasComment("Unique ID representing the personnel duty status.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.NightVisionMaterielObjectId)
                    .HasColumnName("NightVisionMaterielObjectID")
                    .HasComment("Unique ID representing the night vision device materiel object.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DutyStatus)
                    .WithMany(p => p.LtbMishapCategoryGroupNightVisionDeviceAssociations)
                    .HasForeignKey(d => d.DutyStatusId)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupNightVisionDeviceAssociation_Codebook_LtbDutyStatus_DutyStatusID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupNightVisionDeviceAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupNightVisionDeviceAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.NightVisionMaterielObject)
                    .WithMany(p => p.LtbMishapCategoryGroupNightVisionDeviceAssociations)
                    .HasForeignKey(d => d.NightVisionMaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupNightVisionDeviceAssociation_Codebook_LtbMaterielObject_NightVisionDeviceID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupPersonnelActivityAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupPersonnelActivityAssociationId);

                entity.ToTable("LtbMishapCategoryGroupPersonnelActivityAssociation", "Codebook");

                entity.HasComment("This table indicates which personnel activities are relevant for Ground specific mishap category groups.");

                entity.Property(e => e.MishapCategoryGroupPersonnelActivityAssociationId)
                    .HasColumnName("MishapCategoryGroupPersonnelActivityAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing the mishap category group.");

                entity.Property(e => e.PersonRoleId)
                    .HasColumnName("PersonRoleID")
                    .HasComment("Person Role within the Mishap.");

                entity.Property(e => e.PersonnelActivityId)
                    .HasColumnName("PersonnelActivityID")
                    .HasComment("Unique ID representing the personnel activity.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupPersonnelActivityAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPersonnelActivityAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.PersonRole)
                    .WithMany(p => p.LtbMishapCategoryGroupPersonnelActivityAssociations)
                    .HasForeignKey(d => d.PersonRoleId)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPersonnelActivityAssociation_Codebook_LtbPersonRole_PersonRoleID");

                entity.HasOne(d => d.PersonnelActivity)
                    .WithMany(p => p.LtbMishapCategoryGroupPersonnelActivityAssociations)
                    .HasForeignKey(d => d.PersonnelActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPersonnelActivityAssociation_Codebook_LtbPersonnelActivity_PersonnelActivityID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupPersonnelActivityAssociationBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbMishapCategoryGroupPersonnelActivityAssociationBackup", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MishapCategoryGroupId).HasColumnName("MishapCategoryGroupID");

                entity.Property(e => e.MishapCategoryGroupPersonnelActivityAssociationId)
                    .HasColumnName("MishapCategoryGroupPersonnelActivityAssociationID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PersonRoleId).HasColumnName("PersonRoleID");

                entity.Property(e => e.PersonnelActivityId).HasColumnName("PersonnelActivityID");

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbMishapCategoryGroupPhaseOfOperationAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupPhaseOfOperationAssociationId);

                entity.ToTable("LtbMishapCategoryGroupPhaseOfOperationAssociation", "Codebook");

                entity.HasComment("This table provides the set of phase of operation values that can be selected for a given mishap category group in a mishap.  It also indicates which phase of operations are relevant for specific flight data types and  aircraft designations  (manned, unmanned, aerostat).");

                entity.Property(e => e.MishapCategoryGroupPhaseOfOperationAssociationId)
                    .HasColumnName("MishapCategoryGroupPhaseOfOperationAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AircraftDesignationId)
                    .HasColumnName("AircraftDesignationID")
                    .HasComment("Unique ID representing the US State.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.FlightDataTypeId)
                    .HasColumnName("FlightDataTypeID")
                    .HasComment("Unique ID representing the flight data type.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.PhaseOfOperationId)
                    .HasColumnName("PhaseOfOperationID")
                    .HasComment("Unique ID representing the phase of operation.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.AircraftDesignation)
                    .WithMany(p => p.LtbMishapCategoryGroupPhaseOfOperationAssociations)
                    .HasForeignKey(d => d.AircraftDesignationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPhaseOfOperationAssociation_Codebook_LtbAircraftDesignation_AircraftDesignationID");

                entity.HasOne(d => d.FlightDataType)
                    .WithMany(p => p.LtbMishapCategoryGroupPhaseOfOperationAssociations)
                    .HasForeignKey(d => d.FlightDataTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPhaseOfOperationAssociation_Codebook_LtbFlightDataType_FlightDataTypeID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupPhaseOfOperationAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPhaseOfOperationAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.PhaseOfOperation)
                    .WithMany(p => p.LtbMishapCategoryGroupPhaseOfOperationAssociations)
                    .HasForeignKey(d => d.PhaseOfOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupPhaseOfOperationAssociation_Codebook_LtbPhaseofOperation_PhaseofOperationID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupProtectiveEquipmentAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupProtectiveEquipmentAssociationId);

                entity.ToTable("LtbMishapCategoryGroupProtectiveEquipmentAssociation", "Codebook");

                entity.HasComment("This table provides the set of personal protective equipment that can be selected for a given mishap category group in a mishap.");

                entity.Property(e => e.MishapCategoryGroupProtectiveEquipmentAssociationId)
                    .HasColumnName("MishapCategoryGroupProtectiveEquipmentAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique ID representing the protective equipment.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MaterielObject)
                    .WithMany(p => p.LtbMishapCategoryGroupProtectiveEquipmentAssociations)
                    .HasForeignKey(d => d.MaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupProtectiveEquipmentAssociation_Codebook_LtbMaterielObject_ProtectiveEquipmentID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapCategoryGroupProtectiveEquipmentAssociations)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupProtectiveEquipmentAssociation_Codebook_LtbMishapCategory_MishapCategoryGroupID");
            });

            modelBuilder.Entity<LtbMishapCategoryGroupTrainingTypeAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapCategoryGroupTrainingTypeId);

                entity.ToTable("LtbMishapCategoryGroupTrainingTypeAssociation", "Codebook");

                entity.HasComment("This table indicates which training types are relevant for specific mishap category groups.");

                entity.Property(e => e.MishapCategoryGroupTrainingTypeId)
                    .HasColumnName("MishapCategoryGroupTrainingTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryId)
                    .HasColumnName("MishapCategoryID")
                    .HasComment("Unique ID representing the mishap category group.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TrainingTypeId)
                    .HasColumnName("TrainingTypeID")
                    .HasComment("Unique ID representing the training type.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MishapCategory)
                    .WithMany(p => p.LtbMishapCategoryGroupTrainingTypeAssociations)
                    .HasForeignKey(d => d.MishapCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupTrainingTypeAssociation_Codebook_LtbMishapCategory_MishapCategoryID");

                entity.HasOne(d => d.TrainingType)
                    .WithMany(p => p.LtbMishapCategoryGroupTrainingTypeAssociations)
                    .HasForeignKey(d => d.TrainingTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapCategoryGroupTrainingTypeAssociation_Codebook_LtbTrainingType_TrainingTypeID");
            });

            modelBuilder.Entity<LtbMishapClassification>(entity =>
            {
                entity.HasKey(e => e.MishapClassificationId);

                entity.ToTable("LtbMishapClassification", "Codebook");

                entity.HasComment("This table provides all mishap classifications with criteria of mishaps per AR 385-10, AR 385-40 and DA PAM 385-40.");

                entity.Property(e => e.MishapClassificationId)
                    .HasColumnName("MishapClassificationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ArmyAccountable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Mishap classification criteria of army accountable mishap.");

                entity.Property(e => e.Category)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("The mishap classification criteria of mishap category group category codes.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DaysLostLimit).HasComment("Days lost limit for injury costing.");

                entity.Property(e => e.DaysRestrictedLimit).HasComment("Days restricted limit for injury costing.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HighCost).HasComment("Mishap Classificaiton High Cost criteria.");

                entity.Property(e => e.InjurySeverity)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Injury Severity criteria list for mishap classification calculation.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LowCost).HasComment("Mishap Classificaiton Low Cost criteria.");

                entity.Property(e => e.MishapClassificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapClassificationParentId)
                    .HasColumnName("MishapClassificationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.MishapClassificationTypeId)
                    .HasColumnName("MishapClassificationTypeID")
                    .HasComment("Unique ID representing Mishap Classification Type.");

                entity.Property(e => e.MistakesMade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Mishap Classification criteria item of Mistake Made.");

                entity.Property(e => e.PersonnelHospitalizedLimit).HasComment("The number of personnel hospitalized Limt in the mishap classification calculation.");

                entity.Property(e => e.PrimaryEvent)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the primary event criteria in the mishap classification calculation.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TotalLoss)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Total Loss criteria for mishap classification calculation.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapClassificationParent)
                    .WithMany(p => p.InverseMishapClassificationParent)
                    .HasForeignKey(d => d.MishapClassificationParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapClassification_Codebook_LtbMishapClassification_MishapClassificationParentID");

                entity.HasOne(d => d.MishapClassificationType)
                    .WithMany(p => p.LtbMishapClassifications)
                    .HasForeignKey(d => d.MishapClassificationTypeId)
                    .HasConstraintName("FK_Codebook_LtbMishapClassification_Codebook_LtbMishapClassificationType_MishapClassificationTypeID");
            });

            modelBuilder.Entity<LtbMishapClassificationType>(entity =>
            {
                entity.HasKey(e => e.MishapClassificationTypeId);

                entity.ToTable("LtbMishapClassificationType", "Codebook");

                entity.HasComment("This table contains a listing of mishap classification types used to define mishap classifications per AR 385-10, AR 385-40 and DA PAM 385-40 (accident, incident,…).");

                entity.Property(e => e.MishapClassificationTypeId)
                    .HasColumnName("MishapClassificationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapClassificationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapClassificationTypeParentId)
                    .HasColumnName("MishapClassificationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapClassificationTypeParent)
                    .WithMany(p => p.InverseMishapClassificationTypeParent)
                    .HasForeignKey(d => d.MishapClassificationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapClassificationType_Codebook_LtbMishapClassificationType_MishapClassificationTypeParentID");
            });

            modelBuilder.Entity<LtbMishapInitialDueDateCriterion>(entity =>
            {
                entity.HasKey(e => e.MishapInitialDueDateCriteriaId)
                    .HasName("PK_Codebook_LtbMishapInitialDueDateCriteria");

                entity.ToTable("LtbMishapInitialDueDateCriteria", "Codebook");

                entity.HasComment("This table provides the mishap criteria to determine the Mishap Initial Due Date.");

                entity.Property(e => e.MishapInitialDueDateCriteriaId)
                    .HasColumnName("MishapInitialDueDateCriteriaID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Days).HasComment("The number of days to be added to the mishap date to determine the initial due date.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InvestigationRequiredResponseId)
                    .HasColumnName("InvestigationRequiredResponseID")
                    .HasComment("Unique ID representing whether an Investigation is required.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapCategoryGroupId)
                    .HasColumnName("MishapCategoryGroupID")
                    .HasComment("Unique ID representing Mishap Category Group of the Mishap.");

                entity.Property(e => e.MishapClassification)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Mishap Classification of the Mishap (A - F).");

                entity.Property(e => e.MishapDutyStatusId)
                    .HasColumnName("MishapDutyStatusID")
                    .HasComment("Unique ID representing the Mishap Duty Status of the Mishap.");

                entity.Property(e => e.MishapSourceId)
                    .HasColumnName("MishapSourceID")
                    .HasComment("Unique ID representing the Mishap Source of the Mishap.");

                entity.Property(e => e.MissionTypeId)
                    .HasColumnName("MissionTypeID")
                    .HasComment("Unique ID representing the Mission Type of the Mishap.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.InvestigationRequiredResponse)
                    .WithMany(p => p.LtbMishapInitialDueDateCriteria)
                    .HasForeignKey(d => d.InvestigationRequiredResponseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapInitialDueDateCriteria_Codebook_LtbResponse_InvestigationRequiredResponseID");

                entity.HasOne(d => d.MishapCategoryGroup)
                    .WithMany(p => p.LtbMishapInitialDueDateCriteria)
                    .HasForeignKey(d => d.MishapCategoryGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapInitialDueDateCriteria_Codebook_LtbMishapCategory_MishapCategoryGroupID");

                entity.HasOne(d => d.MishapDutyStatus)
                    .WithMany(p => p.LtbMishapInitialDueDateCriteria)
                    .HasForeignKey(d => d.MishapDutyStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapInitialDueDateCriteria_Codebook_LtbResponse_MishapDutyStatusID");

                entity.HasOne(d => d.MishapSource)
                    .WithMany(p => p.LtbMishapInitialDueDateCriteria)
                    .HasForeignKey(d => d.MishapSourceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapInitialDueDateCriteria_Codebook_LtbMishapSource_MishapSourceID");

                entity.HasOne(d => d.MissionType)
                    .WithMany(p => p.LtbMishapInitialDueDateCriteria)
                    .HasForeignKey(d => d.MissionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapInitialDueDateCriteria_Codebook_LtbMissionType_MissionTypeID");
            });

            modelBuilder.Entity<LtbMishapReviewerConcurrenceType>(entity =>
            {
                entity.HasKey(e => e.MishapReviewerConcurrenceTypeId);

                entity.ToTable("LtbMishapReviewerConcurrenceType", "Codebook");

                entity.HasComment("This table provides the set of approval/concurrence types that are used in the review/approval process.");

                entity.Property(e => e.MishapReviewerConcurrenceTypeId)
                    .HasColumnName("MishapReviewerConcurrenceTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapReviewerConcurerenceTypeParentId)
                    .HasColumnName("MishapReviewerConcurerenceTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.MishapReviewerConcurrenceTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapReviewerConcurerenceTypeParent)
                    .WithMany(p => p.InverseMishapReviewerConcurerenceTypeParent)
                    .HasForeignKey(d => d.MishapReviewerConcurerenceTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapReviewerConcurrenceType_Codebook_LtbMishapReviewerConcurrenceType_MishapReviewerConcurerenceTypeParentID");
            });

            modelBuilder.Entity<LtbMishapReviewerType>(entity =>
            {
                entity.HasKey(e => e.MishapReviewerTypeId);

                entity.ToTable("LtbMishapReviewerType", "Codebook");

                entity.HasComment("This table provides the different types of review that are possible in the mishap review process.");

                entity.Property(e => e.MishapReviewerTypeId)
                    .HasColumnName("MishapReviewerTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapReviewerTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapReviewerTypeParentId)
                    .HasColumnName("MishapReviewerTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapReviewerTypeParent)
                    .WithMany(p => p.InverseMishapReviewerTypeParent)
                    .HasForeignKey(d => d.MishapReviewerTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapReviewerType_Codebook_LtbMishapReviewerType_MishapReviewerTypeParentID");
            });

            modelBuilder.Entity<LtbMishapSource>(entity =>
            {
                entity.HasKey(e => e.MishapSourceId);

                entity.ToTable("LtbMishapSource", "Codebook");

                entity.HasComment("This table provides a list of original sources for the reported mishap data (initial notification, ReportIt, ASOHEIMS mishap report,…).");

                entity.Property(e => e.MishapSourceId)
                    .HasColumnName("MishapSourceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapSourceCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapSourceParentId)
                    .HasColumnName("MishapSourceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapSourceParent)
                    .WithMany(p => p.InverseMishapSourceParent)
                    .HasForeignKey(d => d.MishapSourceParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapSource_Codebook_LtbMishapSource_MishapSourceParentID");
            });

            modelBuilder.Entity<LtbMishapStatus>(entity =>
            {
                entity.HasKey(e => e.MishapStatusId);

                entity.ToTable("LtbMishapStatus", "Codebook");

                entity.HasComment("This table provides a list of mishap report status values that identify the state of a mishap report at a particular point in time during its flow through the mishap reporting tool.   Mishap Report status values are created and identified internally and are not regulatory.");

                entity.Property(e => e.MishapStatusId)
                    .HasColumnName("MishapStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MishapStatusParentId)
                    .HasColumnName("MishapStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MishapStatusParent)
                    .WithMany(p => p.InverseMishapStatusParent)
                    .HasForeignKey(d => d.MishapStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbMishapStatus_Codebook_LtbMishapStatus_MishapStatusParentID");
            });

            modelBuilder.Entity<LtbMishapStatusDwprocessingStageAssociation>(entity =>
            {
                entity.HasKey(e => e.MishapStatusDwprocessingStageAssociationId);

                entity.ToTable("LtbMishapStatusDWProcessingStageAssociation", "Codebook");

                entity.HasComment("This table provides the set of DW Processing Stages that can be set for a given Mishap Status in a mishap.");

                entity.Property(e => e.MishapStatusDwprocessingStageAssociationId)
                    .HasColumnName("MishapStatusDWProcessingStageAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DwprocessingStageId)
                    .HasColumnName("DWProcessingStageID")
                    .HasComment("Unique ID representing DW Processing Stage.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MishapSourceId)
                    .HasColumnName("MishapSourceID")
                    .HasComment("Unique ID representing Mishap Source.");

                entity.Property(e => e.MishapStatusId)
                    .HasColumnName("MishapStatusID")
                    .HasComment("Unique ID representing Mishap Status.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.DwprocessingStage)
                    .WithMany(p => p.LtbMishapStatusDwprocessingStageAssociations)
                    .HasForeignKey(d => d.DwprocessingStageId)
                    .HasConstraintName("FK_Codebook_LtbMishapStatusDWProcessingStageAssociation_Codebook_LtbDWProcessingStage_DWProcessingStageID");

                entity.HasOne(d => d.MishapStatus)
                    .WithMany(p => p.LtbMishapStatusDwprocessingStageAssociations)
                    .HasForeignKey(d => d.MishapStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbMishapStatusDWProcessingStageAssociation_Codebook_LtbMishapStatus_MishapStatusID");
            });

            modelBuilder.Entity<LtbMissionRiskLevel>(entity =>
            {
                entity.HasKey(e => e.MissionRiskLevelId);

                entity.ToTable("LtbMissionRiskLevel", "Codebook");

                entity.HasComment("This table provides the set of evaluated risk levels of a missison.");

                entity.Property(e => e.MissionRiskLevelId)
                    .HasColumnName("MissionRiskLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MissionRiskLevelCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MissionRiskLevelParentId)
                    .HasColumnName("MissionRiskLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MissionRiskLevelParent)
                    .WithMany(p => p.InverseMissionRiskLevelParent)
                    .HasForeignKey(d => d.MissionRiskLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbMissionRiskLevel_Codebook_LtbMissionRiskLevel_MissionRiskLevelParentID");
            });

            modelBuilder.Entity<LtbMissionType>(entity =>
            {
                entity.HasKey(e => e.MissionTypeId);

                entity.ToTable("LtbMissionType", "Codebook");

                entity.HasComment("This table contains a self-referencing hierarchy of types of missions.");

                entity.Property(e => e.MissionTypeId)
                    .HasColumnName("MissionTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MissionTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MissionTypeParentId)
                    .HasColumnName("MissionTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MissionTypeParent)
                    .WithMany(p => p.InverseMissionTypeParent)
                    .HasForeignKey(d => d.MissionTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbMissionType_Codebook_LtbMissionType_MissionTypeParentID");
            });

            modelBuilder.Entity<LtbMistake>(entity =>
            {
                entity.HasKey(e => e.MistakeId);

                entity.ToTable("LtbMistake", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of personnel mistake codes.");

                entity.Property(e => e.MistakeId)
                    .HasColumnName("MistakeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MistakeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MistakeParentId)
                    .HasColumnName("MistakeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MistakeParent)
                    .WithMany(p => p.InverseMistakeParent)
                    .HasForeignKey(d => d.MistakeParentId)
                    .HasConstraintName("FK_Codebook_LtbMistake_Codebook_LtbMistake_MistakeParentID");
            });

            modelBuilder.Entity<LtbMtdsexperience>(entity =>
            {
                entity.HasKey(e => e.MtdsexperienceId);

                entity.ToTable("LtbMTDSExperience", "Codebook");

                entity.HasComment("This table provides a listing of  experience areas that aircrew personnel might have for a particular MTDS (combat hours, aircraft design, aircraft series, imminent danger).");

                entity.Property(e => e.MtdsexperienceId)
                    .HasColumnName("MTDSExperienceID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MtdsexperienceCode)
                    .IsRequired()
                    .HasColumnName("MTDSExperienceCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MtdsexperienceParentId)
                    .HasColumnName("MTDSExperienceParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MtdsexperienceParent)
                    .WithMany(p => p.InverseMtdsexperienceParent)
                    .HasForeignKey(d => d.MtdsexperienceParentId)
                    .HasConstraintName("FK_Codebook_LtbMTDSExperience_Codebook_LtbMTDSExperience_MTDSExperienceParentID");
            });

            modelBuilder.Entity<LtbMtdsqualifiedLevel>(entity =>
            {
                entity.HasKey(e => e.MtdsqualifiedLevelId);

                entity.ToTable("LtbMTDSQualifiedLevel", "Codebook");

                entity.HasComment("This table provides the MTDS qualification level that aircrew personnel might have.");

                entity.Property(e => e.MtdsqualifiedLevelId)
                    .HasColumnName("MTDSQualifiedLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MtdsqualifiedLevelCode)
                    .IsRequired()
                    .HasColumnName("MTDSQualifiedLevelCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.MtdsqualifiedLevelParentId)
                    .HasColumnName("MTDSQualifiedLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.MtdsqualifiedLevelParent)
                    .WithMany(p => p.InverseMtdsqualifiedLevelParent)
                    .HasForeignKey(d => d.MtdsqualifiedLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbMTDSQualifiedLevel_Codebook_LtbMTDSQualifiedLevel_MTDSQualifiedLevelParentID");
            });

            modelBuilder.Entity<LtbNaindustryClassification>(entity =>
            {
                entity.HasKey(e => e.NaindustryClassificationId);

                entity.ToTable("LtbNAIndustryClassification", "Codebook");

                entity.HasComment("This table provides a flat listing of standard North American Industry Classification System (NAICS) codes.  The standard used by Federal statistical agencies in classifying business establishments for the purpose of collecting, analyzing, and publishing statistical data related to the U.S. business economy.  External Data Source.");

                entity.Property(e => e.NaindustryClassificationId)
                    .HasColumnName("NAIndustryClassificationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NaindustryClassificationCode)
                    .IsRequired()
                    .HasColumnName("NAIndustryClassificationCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.NaindustryClassificationParentId)
                    .HasColumnName("NAIndustryClassificationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.NaindustryClassificationParent)
                    .WithMany(p => p.InverseNaindustryClassificationParent)
                    .HasForeignKey(d => d.NaindustryClassificationParentId)
                    .HasConstraintName("FK_Codebook_LtbNAIndustryClassification_Codebook_LtbNAIndustryClassification_NAIndustryClassificationParentID");
            });

            modelBuilder.Entity<LtbNarrativeType>(entity =>
            {
                entity.HasKey(e => e.NarrativeTypeId);

                entity.ToTable("LtbNarrativeType", "Codebook");

                entity.HasComment("This table provides the various types of narratives that are collected for a mishap.");

                entity.Property(e => e.NarrativeTypeId)
                    .HasColumnName("NarrativeTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NarrativeTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.NarrativeTypeParentId)
                    .HasColumnName("NarrativeTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.NarrativeTypeParent)
                    .WithMany(p => p.InverseNarrativeTypeParent)
                    .HasForeignKey(d => d.NarrativeTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbNarrativeType_Codebook_LtbNarrativeType_NarrativeTypeParentID");
            });

            modelBuilder.Entity<LtbNoteType>(entity =>
            {
                entity.HasKey(e => e.NoteTypeId);

                entity.ToTable("LtbNoteType", "Codebook");

                entity.HasComment("This table provides a list of hazard note types.");

                entity.Property(e => e.NoteTypeId)
                    .HasColumnName("NoteTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NoteTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.NoteTypeParentId)
                    .HasColumnName("NoteTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.NoteTypeParent)
                    .WithMany(p => p.InverseNoteTypeParent)
                    .HasForeignKey(d => d.NoteTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbNoteType_Codebook_LtbNoteType_NoteTypeParentID");
            });

            modelBuilder.Entity<LtbNotificationType>(entity =>
            {
                entity.HasKey(e => e.NotificationTypeId);

                entity.ToTable("LtbNotificationType", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of notification types for mishap reporting, mishap review,…).");

                entity.Property(e => e.NotificationTypeId)
                    .HasColumnName("NotificationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NotificationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.NotificationTypeParentId)
                    .HasColumnName("NotificationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.PersonRoleId)
                    .HasColumnName("PersonRoleID")
                    .HasComment("Person Role for which the notification is addressed.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.NotificationTypeParent)
                    .WithMany(p => p.InverseNotificationTypeParent)
                    .HasForeignKey(d => d.NotificationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbNotificationType_Codebook_LtbNotificationType_NotificationTypeParentID");

                entity.HasOne(d => d.PersonRole)
                    .WithMany(p => p.LtbNotificationTypes)
                    .HasForeignKey(d => d.PersonRoleId)
                    .HasConstraintName("FK_Codebook_LtbNotificationType_Codebook_LtbPersonRole_PersonRoleID");
            });

            modelBuilder.Entity<LtbObjectOwnership>(entity =>
            {
                entity.HasKey(e => e.ObjectOwnershipId);

                entity.ToTable("LtbObjectOwnership", "Codebook");

                entity.HasComment("This table provides a hierachial listing of organzations that own material within a mishap.");

                entity.Property(e => e.ObjectOwnershipId)
                    .HasColumnName("ObjectOwnershipID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ObjectOwnershipCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ObjectOwnershipParentId)
                    .HasColumnName("ObjectOwnershipParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ObjectOwnershipParent)
                    .WithMany(p => p.InverseObjectOwnershipParent)
                    .HasForeignKey(d => d.ObjectOwnershipParentId)
                    .HasConstraintName("FK_Codebook_LtbObjectOwnership_Codebook_LtbObjectOwnership_ObjectOwnershipParentID");
            });

            modelBuilder.Entity<LtbOperationalContingency>(entity =>
            {
                entity.HasKey(e => e.OperationalContingencyId);

                entity.ToTable("LtbOperationalContingency", "Codebook");

                entity.HasComment("This table provides a listing of conflicts/operational contingencies.");

                entity.Property(e => e.OperationalContingencyId)
                    .HasColumnName("OperationalContingencyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BeginFy)
                    .HasColumnName("BeginFY")
                    .HasComment("The beginning fiscal year of the operational contingency.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EndFy)
                    .HasColumnName("EndFY")
                    .HasComment("The ending fiscal year of the operational contingency.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OperationalContingencyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OperationalContingencyParentId)
                    .HasColumnName("OperationalContingencyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OperationalContingencyParent)
                    .WithMany(p => p.InverseOperationalContingencyParent)
                    .HasForeignKey(d => d.OperationalContingencyParentId)
                    .HasConstraintName("FK_Codebook_LtbOperationalContingency_Codebook_LtbOperationalContingency_OperationalContingencyParentID");
            });

            modelBuilder.Entity<LtbOrganizationType>(entity =>
            {
                entity.HasKey(e => e.OrganizationTypeId);

                entity.ToTable("LtbOrganizationType", "Codebook");

                entity.HasComment("This table provides a listing of the organizational types tracked by the system(military, civilian).");

                entity.Property(e => e.OrganizationTypeId)
                    .HasColumnName("OrganizationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OrganizationTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OrganizationTypeParentId)
                    .HasColumnName("OrganizationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OrganizationTypeParent)
                    .WithMany(p => p.InverseOrganizationTypeParent)
                    .HasForeignKey(d => d.OrganizationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbOrganizationType_Codebook_LtbOrganizationType_OrganizationTypeParentID");
            });

            modelBuilder.Entity<LtbOshaEstablishment>(entity =>
            {
                entity.HasKey(e => e.OshaEstablishmentId);

                entity.ToTable("LtbOshaEstablishment", "Codebook");

                entity.HasComment("This table provides a listing of OSHA establishement codes. External Data Source.");

                entity.Property(e => e.OshaEstablishmentId)
                    .HasColumnName("OshaEstablishmentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.BuildingStreetAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Building street address of the OSHA establishment.");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("OSAH Establishment City location.");

                entity.Property(e => e.CommandName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("The OSHA Establishment command name.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of the OSHA Establishment. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MajorCommand)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("The major command of the OSHA establishment.");

                entity.Property(e => e.Msc)
                    .HasColumnName("MSC")
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("The MSC of the OSHA Establishment.");

                entity.Property(e => e.OshaEstablishmentCode)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.SubordinateReport1)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Subordinate Report 1 for OSHA Establishment.");

                entity.Property(e => e.SubordinateReport2)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Subordinate Report 2 for OSHA Establishment.");

                entity.Property(e => e.SubordinateReport3)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Subordinate Report 3 for OSHA Establishment.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.Zipcode4Digit)
                    .HasColumnName("ZIPCode4Digit")
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.Zipcode5Digit)
                    .HasColumnName("ZIPCode5Digit")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbOshaEstablishments)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbOshaEstablishment_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbOshaEstablishments)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbOshaEstablishment_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbOshaappealStatus>(entity =>
            {
                entity.HasKey(e => e.OshaappealStatusId);

                entity.ToTable("LtbOSHAAppealStatus", "Codebook");

                entity.Property(e => e.OshaappealStatusId)
                    .HasColumnName("OSHAAppealStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaappealStatusCode)
                    .IsRequired()
                    .HasColumnName("OSHAAppealStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaappealStatusParentId)
                    .HasColumnName("OSHAAppealStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaappealStatusParent)
                    .WithMany(p => p.InverseOshaappealStatusParent)
                    .HasForeignKey(d => d.OshaappealStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAAppealStatus_Codebook_LtbOSHAAppealStatus_OSHAAppealStatusParentID");
            });

            modelBuilder.Entity<LtbOshainspectionInitiatingEvent>(entity =>
            {
                entity.HasKey(e => e.OshainspectionInitiatingEventId);

                entity.ToTable("LtbOSHAInspectionInitiatingEvent", "Codebook");

                entity.Property(e => e.OshainspectionInitiatingEventId)
                    .HasColumnName("OSHAInspectionInitiatingEventID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshainspectionInitiatingEventCode)
                    .IsRequired()
                    .HasColumnName("OSHAInspectionInitiatingEventCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshainspectionInitiatingEventParentId)
                    .HasColumnName("OSHAInspectionInitiatingEventParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshainspectionInitiatingEventParent)
                    .WithMany(p => p.InverseOshainspectionInitiatingEventParent)
                    .HasForeignKey(d => d.OshainspectionInitiatingEventParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAInspectionInitiatingEvent_Codebook_LtbOSHAInspectionInitiatingEvent_OSHAInspectionInitiatingEventParentID");
            });

            modelBuilder.Entity<LtbOshainspectionStatus>(entity =>
            {
                entity.HasKey(e => e.OshainspectionStatusId)
                    .HasName("PK_LtbOSHAInspectionStatusID");

                entity.ToTable("LtbOSHAInspectionStatus", "Codebook");

                entity.HasComment("A list of values for the type of organization an OSHA violation is issued to.  Current values are Army, Contractor, Other Agency.");

                entity.Property(e => e.OshainspectionStatusId)
                    .HasColumnName("OSHAInspectionStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshainspectionStatusCode)
                    .IsRequired()
                    .HasColumnName("OSHAInspectionStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshainspectionStatusParentId)
                    .HasColumnName("OSHAInspectionStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbOshaoperationInvolved>(entity =>
            {
                entity.HasKey(e => e.OshaoperationInvolvedId)
                    .HasName("PK_LtbOSHAOperationInvolvedID");

                entity.ToTable("LtbOSHAOperationInvolved", "Codebook");

                entity.HasComment("A list of values for the type of organization an OSHA violation is issued to.  Current values are Army, Contractor, Other Agency.");

                entity.Property(e => e.OshaoperationInvolvedId)
                    .HasColumnName("OSHAOperationInvolvedID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaoperationInvolvedCode)
                    .IsRequired()
                    .HasColumnName("OSHAOperationInvolvedCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaoperationInvolvedParentId)
                    .HasColumnName("OSHAOperationInvolvedParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");
            });

            modelBuilder.Entity<LtbOshasubPartStandard>(entity =>
            {
                entity.HasKey(e => e.OshasubPartStandardId);

                entity.ToTable("LtbOSHASubPartStandard", "Codebook");

                entity.Property(e => e.OshasubPartStandardId)
                    .HasColumnName("OSHASubPartStandardID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InspectionGoverningDocumentId)
                    .HasColumnName("InspectionGoverningDocumentID")
                    .HasComment("Unique ID representing the Inspection Governing Document.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshasubPartStandardCode)
                    .IsRequired()
                    .HasColumnName("OSHASubPartStandardCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record for the OSHA Sub Part Standard.");

                entity.Property(e => e.OshasubPartStandardParentId)
                    .HasColumnName("OSHASubPartStandardParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.InspectionGoverningDocument)
                    .WithMany(p => p.LtbOshasubPartStandards)
                    .HasForeignKey(d => d.InspectionGoverningDocumentId)
                    .HasConstraintName("FK_Codebook_LtbOSHASubPartStandard_Codebook_LtbInspectionGoverningDocument_InspectionGoverningDocumentID");

                entity.HasOne(d => d.OshasubPartStandardParent)
                    .WithMany(p => p.InverseOshasubPartStandardParent)
                    .HasForeignKey(d => d.OshasubPartStandardParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHASubPartStandard_Codebook_LtbOSHASubPartStandard_OSHASubPartStandardParentID");
            });

            modelBuilder.Entity<LtbOshaviolationIssuedTo>(entity =>
            {
                entity.HasKey(e => e.OshaviolationIssuedToId);

                entity.ToTable("LtbOSHAViolationIssuedTo", "Codebook");

                entity.Property(e => e.OshaviolationIssuedToId)
                    .HasColumnName("OSHAViolationIssuedToID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaviolationIssuedToCode)
                    .IsRequired()
                    .HasColumnName("OSHAViolationIssuedToCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaviolationIssuedToParentId)
                    .HasColumnName("OSHAViolationIssuedToParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaviolationIssuedToParent)
                    .WithMany(p => p.InverseOshaviolationIssuedToParent)
                    .HasForeignKey(d => d.OshaviolationIssuedToParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAViolationIssuedTo_Codebook_LtbOSHAViolationIssuedTo_OSHAViolationIssuedToParentID");
            });

            modelBuilder.Entity<LtbOshaviolationOfficeResponsible>(entity =>
            {
                entity.HasKey(e => e.OshaviolationOfficeResponsibleId);

                entity.ToTable("LtbOSHAViolationOfficeResponsible", "Codebook");

                entity.Property(e => e.OshaviolationOfficeResponsibleId)
                    .HasColumnName("OSHAViolationOfficeResponsibleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaviolationOfficeResponsibleCode)
                    .IsRequired()
                    .HasColumnName("OSHAViolationOfficeResponsibleCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaviolationOfficeResponsibleParentId)
                    .HasColumnName("OSHAViolationOfficeResponsibleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaviolationOfficeResponsibleParent)
                    .WithMany(p => p.InverseOshaviolationOfficeResponsibleParent)
                    .HasForeignKey(d => d.OshaviolationOfficeResponsibleParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAViolationOfficeResponsible_Codebook_LtbOSHAViolationOfficeResponsible_OSHAViolationOfficeResponsibleParentID");
            });

            modelBuilder.Entity<LtbOshaviolationStatus>(entity =>
            {
                entity.HasKey(e => e.OshaviolationStatusId);

                entity.ToTable("LtbOSHAViolationStatus", "Codebook");

                entity.Property(e => e.OshaviolationStatusId)
                    .HasColumnName("OSHAViolationStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaviolationStatusCode)
                    .IsRequired()
                    .HasColumnName("OSHAViolationStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaviolationStatusParentId)
                    .HasColumnName("OSHAViolationStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaviolationStatusParent)
                    .WithMany(p => p.InverseOshaviolationStatusParent)
                    .HasForeignKey(d => d.OshaviolationStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAViolationStatus_Codebook_LtbOSHAViolationStatus_OSHAViolationStatusParentID");
            });

            modelBuilder.Entity<LtbOshaviolationType>(entity =>
            {
                entity.HasKey(e => e.OshaviolationTypeId);

                entity.ToTable("LtbOSHAViolationType", "Codebook");

                entity.Property(e => e.OshaviolationTypeId)
                    .HasColumnName("OSHAViolationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.OshaviolationTypeCode)
                    .IsRequired()
                    .HasColumnName("OSHAViolationTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.OshaviolationTypeParentId)
                    .HasColumnName("OSHAViolationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaviolationTypeParent)
                    .WithMany(p => p.InverseOshaviolationTypeParent)
                    .HasForeignKey(d => d.OshaviolationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbOSHAViolationType_Codebook_LtbOSHAViolationType_OSHAViolationTypeParentID");
            });

            modelBuilder.Entity<LtbParachuteEquipmentMaterielObjectAssociation>(entity =>
            {
                entity.HasKey(e => e.JumpEquipmentMaterielObjectAssociationId);

                entity.ToTable("LtbParachuteEquipmentMaterielObjectAssociation", "Codebook");

                entity.HasComment("This table indicates which Materiel Objects within the LtbMaterielObject table should be considered as Parachute equipment.");

                entity.Property(e => e.JumpEquipmentMaterielObjectAssociationId)
                    .HasColumnName("JumpEquipmentMaterielObjectAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.MaterielObjectId)
                    .HasColumnName("MaterielObjectID")
                    .HasComment("Unique ID representing the materiel object.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.MaterielObject)
                    .WithMany(p => p.LtbParachuteEquipmentMaterielObjectAssociations)
                    .HasForeignKey(d => d.MaterielObjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbParachuteEquipmentMaterielObjectAssociation_Codebook_LtbMaterielObject_MaterielObjectID");
            });

            modelBuilder.Entity<LtbPayGrade>(entity =>
            {
                entity.HasKey(e => e.PayGradeId);

                entity.ToTable("LtbPayGrade", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy  of federal and non-federal pay grades for both military and civilian personnel.  External Data Source.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1025)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PayGradeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PayGradeParentId)
                    .HasColumnName("PayGradeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PayGradeParent)
                    .WithMany(p => p.InversePayGradeParent)
                    .HasForeignKey(d => d.PayGradeParentId)
                    .HasConstraintName("FK_Codebook_LtbPayGrade_Codebook_LtbPayGrade_PayGradeParentID");
            });

            modelBuilder.Entity<LtbPayGradeCivilianJobSeriesAssociation>(entity =>
            {
                entity.HasKey(e => e.PayGradeCivilianJobSeriesAssociationId);

                entity.ToTable("LtbPayGradeCivilianJobSeriesAssociation", "Codebook");

                entity.HasComment("This table provides a cross reference for which enlistment types and pay grades can be used together.");

                entity.Property(e => e.PayGradeCivilianJobSeriesAssociationId)
                    .HasColumnName("PayGradeCivilianJobSeriesAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("JobTitleID")
                    .HasComment("Unique ID representing the job title.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique ID representing the pay grade.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbPayGradeCivilianJobSeriesAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbPayGradeCivilianJobSeriesAssociation_Codebook_LtbPayGrade_PayGradeID");
            });

            modelBuilder.Entity<LtbPayGradeMilitaryOccupationSpecialityAssociation>(entity =>
            {
                entity.HasKey(e => e.PayGradeMilitaryOccupationSpecialityAssociationId);

                entity.ToTable("LtbPayGradeMilitaryOccupationSpecialityAssociation", "Codebook");

                entity.HasComment("This table provides a cross reference for which enlistment types and pay grades can be used together.");

                entity.Property(e => e.PayGradeMilitaryOccupationSpecialityAssociationId)
                    .HasColumnName("PayGradeMilitaryOccupationSpecialityAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("JobTitleID")
                    .HasComment("Unique ID representing the job title.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique ID representing the pay grade.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbPayGradeMilitaryOccupationSpecialityAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbPayGradeMilitaryOccupationSpecialityAssociation_Codebook_LtbPayGrade_PayGradeID");
            });

            modelBuilder.Entity<LtbPeriodofDay>(entity =>
            {
                entity.HasKey(e => e.PeriodofDayId);

                entity.ToTable("LtbPeriodofDay", "Codebook");

                entity.HasComment("This table provides a period of the day that a mishap could occur.");

                entity.Property(e => e.PeriodofDayId)
                    .HasColumnName("PeriodofDayID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PeriodofDayCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PeriodofDayParentId)
                    .HasColumnName("PeriodofDayParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PeriodofDayParent)
                    .WithMany(p => p.InversePeriodofDayParent)
                    .HasForeignKey(d => d.PeriodofDayParentId)
                    .HasConstraintName("FK_Codebook_LtbPeriodofDay_Codebook_LtbPeriodofDay_PeriodofDayParentID");
            });

            modelBuilder.Entity<LtbPermissionType>(entity =>
            {
                entity.HasKey(e => e.PermissionTypeId);

                entity.ToTable("LtbPermissionType", "Codebook");

                entity.HasComment("This table provides a list of application persmission types (read, create, modify, delete,….).");

                entity.Property(e => e.PermissionTypeId)
                    .HasColumnName("PermissionTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PermissionTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PermissionTypeParentId)
                    .HasColumnName("PermissionTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PermissionTypeParent)
                    .WithMany(p => p.InversePermissionTypeParent)
                    .HasForeignKey(d => d.PermissionTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbPermissionType_Codebook_LtbPermissionType_PermissionTypeParentID");
            });

            modelBuilder.Entity<LtbPersonResponsibleAgencyAssociation>(entity =>
            {
                entity.HasKey(e => e.PersonResponsibleAgencyAssociationId);

                entity.ToTable("LtbPersonResponsibleAgencyAssociation", "Codebook");

                entity.Property(e => e.PersonResponsibleAgencyAssociationId).HasColumnName("PersonResponsibleAgencyAssociationID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.ResponsibleAgencyId).HasColumnName("ResponsibleAgencyID");

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbPersonRole>(entity =>
            {
                entity.HasKey(e => e.PersonRoleId);

                entity.ToTable("LtbPersonRole", "Codebook");

                entity.HasComment("This table provides the various roles a person could have in a mishap, inspection,....");

                entity.Property(e => e.PersonRoleId)
                    .HasColumnName("PersonRoleID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PersonRoleCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PersonRoleParentId)
                    .HasColumnName("PersonRoleParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PersonRoleParent)
                    .WithMany(p => p.InversePersonRoleParent)
                    .HasForeignKey(d => d.PersonRoleParentId)
                    .HasConstraintName("FK_Codebook_LtbPersonRole_Codebook_LtbPersonRole_PersonRoleParentID");
            });

            modelBuilder.Entity<LtbPersonnelActivity>(entity =>
            {
                entity.HasKey(e => e.PersonnelActivityId);

                entity.ToTable("LtbPersonnelActivity", "Codebook");

                entity.HasComment("This table provides the potential set of personnel activities or duty positions that a person could be engaged in at the time of the mishap.");

                entity.Property(e => e.PersonnelActivityId)
                    .HasColumnName("PersonnelActivityID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PersonnelActivityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PersonnelActivityParentId)
                    .HasColumnName("PersonnelActivityParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PersonnelActivityParent)
                    .WithMany(p => p.InversePersonnelActivityParent)
                    .HasForeignKey(d => d.PersonnelActivityParentId)
                    .HasConstraintName("FK_Codebook_LtbPersonnelActivity_Codebook_LtbPersonnelActivity_PersonnelActivityParentID");
            });

            modelBuilder.Entity<LtbPersonnelActivityUasseatPositionAssociation>(entity =>
            {
                entity.HasKey(e => e.PersonnelActivityUasseatPositionAssociationId);

                entity.ToTable("LtbPersonnelActivityUASSeatPositionAssociation", "Codebook");

                entity.HasComment("This table provides a list of all aviation duty positions (personnel activity) with UAS seat positions associated.");

                entity.Property(e => e.PersonnelActivityUasseatPositionAssociationId)
                    .HasColumnName("PersonnelActivityUASSeatPositionAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PersonnelActivityId)
                    .HasColumnName("PersonnelActivityID")
                    .HasComment("Unique ID representing the personnel activity/duty position.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UaseatPositionId)
                    .HasColumnName("UASeatPositionID")
                    .HasComment("Unique ID representing the UAS seat position.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.PersonnelActivity)
                    .WithMany(p => p.LtbPersonnelActivityUasseatPositionAssociations)
                    .HasForeignKey(d => d.PersonnelActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbPersonnelActivityUASSeatPositionAssociation_Codebook_LtbPersonnelActivity_PersonnelActivityID");

                entity.HasOne(d => d.UaseatPosition)
                    .WithMany(p => p.LtbPersonnelActivityUasseatPositionAssociations)
                    .HasForeignKey(d => d.UaseatPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbPersonnelActivityUASSeatPositionAssociation_Codebook_LtbUASeatPosition_ID");
            });

            modelBuilder.Entity<LtbPhaseofOperation>(entity =>
            {
                entity.HasKey(e => e.PhaseofOperationId);

                entity.ToTable("LtbPhaseofOperation", "Codebook");

                entity.HasComment("This table provides a listing of the aviation phase of operation codes in progress at the time of the mishap.");

                entity.Property(e => e.PhaseofOperationId)
                    .HasColumnName("PhaseofOperationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PhaseofOperationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.PhaseofOperationParentId)
                    .HasColumnName("PhaseofOperationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.PhaseofOperationParent)
                    .WithMany(p => p.InversePhaseofOperationParent)
                    .HasForeignKey(d => d.PhaseofOperationParentId)
                    .HasConstraintName("FK_Codebook_LtbPhaseofOperation_Codebook_LtbPhaseofOperation_PhaseofOperationParentID");
            });

            modelBuilder.Entity<LtbPpequestionNarrativeAssociation>(entity =>
            {
                entity.HasKey(e => e.PpequestionNarrativeAssociationId);

                entity.ToTable("LtbPPEQuestionNarrativeAssociation", "Codebook");

                entity.HasComment("This table provides a mapping of specific narratives types to particular personal protective equipment questions.");

                entity.Property(e => e.PpequestionNarrativeAssociationId)
                    .HasColumnName("PPEQuestionNarrativeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.AssociatedColumn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The column containing the answer to the associated PPE question.");

                entity.Property(e => e.AssociatedTable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("The table containing the answer to the associated PPE question.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.NarrativeQuestion)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("The narrative question for the associated PPE question and response.");

                entity.Property(e => e.PpequestionNarrativeAssociationCode)
                    .IsRequired()
                    .HasColumnName("PPEQuestionNarrativeAssociationCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.QuestionNarrativeAssociationParentId)
                    .HasColumnName("QuestionNarrativeAssociationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.RequiredResponseId)
                    .HasColumnName("RequiredResponseID")
                    .HasComment("The response required to the associated question in order for the narrative question to be displayed.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.QuestionNarrativeAssociationParent)
                    .WithMany(p => p.InverseQuestionNarrativeAssociationParent)
                    .HasForeignKey(d => d.QuestionNarrativeAssociationParentId)
                    .HasConstraintName("FK_Codebook_LtbPPEQuestionNarrativeAssociation_Codebook_LtbPPEQuestionNarrativeAssociation_QuestionNarrativeAssociationParentID");
            });

            modelBuilder.Entity<LtbPrmdocumentType>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LtbPRMDocumentType", "Codebook");

                entity.Property(e => e.Code)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LtbPrmreportCategory>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LtbPRMReportCategory", "Codebook");

                entity.Property(e => e.Code)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LtbPrmreportStatus>(entity =>
            {
                entity.HasKey(e => e.Code);

                entity.ToTable("LtbPRMReportStatus", "Codebook");

                entity.Property(e => e.Code)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LtbRank>(entity =>
            {
                entity.HasKey(e => e.RankId);

                entity.ToTable("LtbRank", "Codebook");

                entity.HasComment("This table provides a list of personnel rank values.");

                entity.Property(e => e.RankId)
                    .HasColumnName("RankID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RankCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RankParentId)
                    .HasColumnName("RankParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RankParent)
                    .WithMany(p => p.InverseRankParent)
                    .HasForeignKey(d => d.RankParentId)
                    .HasConstraintName("FK_Codebook_LtbRank_Codebook_LtbRank_RankParentID");
            });

            modelBuilder.Entity<LtbRankPayGradeAssociation>(entity =>
            {
                entity.HasKey(e => e.RankPayGradeAssociationId);

                entity.ToTable("LtbRankPayGradeAssociation", "Codebook");

                entity.HasComment("This table provides the personnel rank and pay grade associations.");

                entity.Property(e => e.RankPayGradeAssociationId)
                    .HasColumnName("RankPayGradeAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PayGradeId)
                    .HasColumnName("PayGradeID")
                    .HasComment("Unique ID representing the pay grade.");

                entity.Property(e => e.RankId)
                    .HasColumnName("RankID")
                    .HasComment("Unique ID representing the rank.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.PayGrade)
                    .WithMany(p => p.LtbRankPayGradeAssociations)
                    .HasForeignKey(d => d.PayGradeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbRankPayGradeAssociation_Codebook_LtbPayGrade_PayGradeID");

                entity.HasOne(d => d.Rank)
                    .WithMany(p => p.LtbRankPayGradeAssociations)
                    .HasForeignKey(d => d.RankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbRankPayGradeAssociation_Codebook_LtbRank_RankID");
            });

            modelBuilder.Entity<LtbReadinessLevel>(entity =>
            {
                entity.HasKey(e => e.ReadinessLevelId);

                entity.ToTable("LtbReadinessLevel", "Codebook");

                entity.HasComment("This table provides a listing of the potential readiness level for aircrew personnel.");

                entity.Property(e => e.ReadinessLevelId)
                    .HasColumnName("ReadinessLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ReadinessLevelCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ReadinessLevelParentId)
                    .HasColumnName("ReadinessLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ReadinessLevelParent)
                    .WithMany(p => p.InverseReadinessLevelParent)
                    .HasForeignKey(d => d.ReadinessLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbReadinessLevel_Codebook_LtbReadinessLevel_ReadinessLevelParentID");
            });

            modelBuilder.Entity<LtbRecommendationCondition>(entity =>
            {
                entity.HasKey(e => e.RecommendationConditionId);

                entity.ToTable("LtbRecommendationCondition", "Codebook");

                entity.HasComment("This table provides a list of recommendation conditions determined during RTS evaluation (valid, supported, properly targeted; valid, supported, not properly targeted;….).");

                entity.Property(e => e.RecommendationConditionId)
                    .HasColumnName("RecommendationConditionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RecommendationConditionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RecommendationConditionParentId)
                    .HasColumnName("RecommendationConditionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RecommendationConditionParent)
                    .WithMany(p => p.InverseRecommendationConditionParent)
                    .HasForeignKey(d => d.RecommendationConditionParentId)
                    .HasConstraintName("FK_Codebook_LtbRecommendationCondition_Codebook_LtbRecommendationCondition_RecommendationConditionParentID");
            });

            modelBuilder.Entity<LtbRecommendationConditionRecStatusAssociation>(entity =>
            {
                entity.HasKey(e => e.RecommendationConditionRecStatusAssociationId);

                entity.ToTable("LtbRecommendationConditionRecStatusAssociation", "Codebook");

                entity.HasComment("This table indicates which training types are relevant for specific mishap category groups.");

                entity.Property(e => e.RecommendationConditionRecStatusAssociationId)
                    .HasColumnName("RecommendationConditionRecStatusAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RecommendationConditionId)
                    .HasColumnName("RecommendationConditionID")
                    .HasComment("Unique ID representing the Recommendation Condition.");

                entity.Property(e => e.RecommendationStatusId)
                    .HasColumnName("RecommendationStatusID")
                    .HasComment("Unique ID representing the recommendation status.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.RecommendationCondition)
                    .WithMany(p => p.LtbRecommendationConditionRecStatusAssociations)
                    .HasForeignKey(d => d.RecommendationConditionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbRecommendationConditionRecStatusAssociation_Codebook_LtbRecommendationCondition_RecommendationConditionID");

                entity.HasOne(d => d.RecommendationStatus)
                    .WithMany(p => p.LtbRecommendationConditionRecStatusAssociations)
                    .HasForeignKey(d => d.RecommendationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbRecommendationConditionRecStatusAssociation_Codebook_LtbRecommendationStatus_RecommendationStatusID");
            });

            modelBuilder.Entity<LtbRecommendationCorrespondenceReviewPhase>(entity =>
            {
                entity.HasKey(e => e.RecommendationCorrespondenceReviewPhaseId);

                entity.ToTable("LtbRecommendationCorrespondenceReviewPhase", "Codebook");

                entity.HasComment("This table provides the review phase for the Recommendation Correspondence.");

                entity.Property(e => e.RecommendationCorrespondenceReviewPhaseId).HasColumnName("RecommendationCorrespondenceReviewPhaseID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RecommendationCorrespondenceReviewPhaseCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RecommendationCorrespondenceReviewPhaseParentId).HasColumnName("RecommendationCorrespondenceReviewPhaseParentID");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.RecommendationCorrespondenceReviewPhaseParent)
                    .WithMany(p => p.InverseRecommendationCorrespondenceReviewPhaseParent)
                    .HasForeignKey(d => d.RecommendationCorrespondenceReviewPhaseParentId)
                    .HasConstraintName("FK_Codebook_LtbRecommendationCorrespondenceReviewPhase_LtbRecCorrespondenceReviewPhase_RecCorrespondenceReviewPhaseParentID");
            });

            modelBuilder.Entity<LtbRecommendationLevel>(entity =>
            {
                entity.HasKey(e => e.RecommendationLevelId);

                entity.ToTable("LtbRecommendationLevel", "Codebook");

                entity.HasComment("This table provides the various organization level that a recommendation can be directed.");

                entity.Property(e => e.RecommendationLevelId)
                    .HasColumnName("RecommendationLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RecommendationLevelCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RecommendationLevelParentId)
                    .HasColumnName("RecommendationLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RecommendationLevelParent)
                    .WithMany(p => p.InverseRecommendationLevelParent)
                    .HasForeignKey(d => d.RecommendationLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbRecommendationLevel_Codebook_LtbRecommendationLevel_RecommendationLevelParentID");
            });

            modelBuilder.Entity<LtbRecommendationStatus>(entity =>
            {
                entity.HasKey(e => e.RecommendationStatusId);

                entity.ToTable("LtbRecommendationStatus", "Codebook");

                entity.HasComment("This table provides a list of recommendation status values once the correspondence has been distributed.");

                entity.Property(e => e.RecommendationStatusId)
                    .HasColumnName("RecommendationStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RecommendationStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RecommendationStatusParentId)
                    .HasColumnName("RecommendationStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RecommendationStatusParent)
                    .WithMany(p => p.InverseRecommendationStatusParent)
                    .HasForeignKey(d => d.RecommendationStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbRecommendationStatus_Codebook_LtbRecommendationStatus_RecommendationStatusParentID");
            });

            modelBuilder.Entity<LtbRecommendationTargetState>(entity =>
            {
                entity.HasKey(e => e.RecommendationTargetStateId);

                entity.ToTable("LtbRecommendationTargetState", "Codebook");

                entity.HasComment("This table provides a list of the recommendation target(agency) states for Army Level Recommendations (Mishap original, Mishap original removed, RTS revision,…).  ");

                entity.Property(e => e.RecommendationTargetStateId)
                    .HasColumnName("RecommendationTargetStateID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RecommendationTargetStateCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RecommendationTargetStateParentId)
                    .HasColumnName("RecommendationTargetStateParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RecommendationTargetStateParent)
                    .WithMany(p => p.InverseRecommendationTargetStateParent)
                    .HasForeignKey(d => d.RecommendationTargetStateParentId)
                    .HasConstraintName("FK_Codebook_LtbRecommendationTargetState_Codebook_LtbRecommendationTargetState_RecommendationTargetStateParentID");
            });

            modelBuilder.Entity<LtbReminderType>(entity =>
            {
                entity.HasKey(e => e.ReminderTypeId);

                entity.ToTable("LtbReminderType", "Codebook");

                entity.HasComment("This table provides a list of hazard report statuses.");

                entity.Property(e => e.ReminderTypeId)
                    .HasColumnName("ReminderTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ReminderTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ReminderTypeParentId)
                    .HasColumnName("ReminderTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ReminderTypeParent)
                    .WithMany(p => p.InverseReminderTypeParent)
                    .HasForeignKey(d => d.ReminderTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbReminderType_Codebook_LtbReminderType_ReminderTypeParentID");
            });

            modelBuilder.Entity<LtbRequestStatus>(entity =>
            {
                entity.HasKey(e => e.RequestStatusId);

                entity.ToTable("LtbRequestStatus", "Codebook");

                entity.HasComment("This table indicates the possible status values for a request.");

                entity.Property(e => e.RequestStatusId)
                    .HasColumnName("RequestStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RequestStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RequestStatusParentId)
                    .HasColumnName("RequestStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RequestStatusParent)
                    .WithMany(p => p.InverseRequestStatusParent)
                    .HasForeignKey(d => d.RequestStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbRequestStatus_Codebook_LtbRequestStatus_RequestStatusParentID");
            });

            modelBuilder.Entity<LtbReserveRegion>(entity =>
            {
                entity.HasKey(e => e.ReserveRegionId);

                entity.ToTable("LtbReserveRegion", "Codebook");

                entity.HasComment("This table provides a list of Reserve Regions.");

                entity.Property(e => e.ReserveRegionId)
                    .HasColumnName("ReserveRegionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ReserveRegionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ReserveRegionParentId)
                    .HasColumnName("ReserveRegionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ReserveRegionParent)
                    .WithMany(p => p.InverseReserveRegionParent)
                    .HasForeignKey(d => d.ReserveRegionParentId)
                    .HasConstraintName("FK_Codebook_LtbReserveRegion_Codebook_LtbReserveRegion_ReserveRegionParentID");
            });

            modelBuilder.Entity<LtbReserveRegionUsstateAssociation>(entity =>
            {
                entity.HasKey(e => e.ReserveRegionUsstateAssociationId);

                entity.ToTable("LtbReserveRegionUSStateAssociation", "Codebook");

                entity.HasComment("This table provides a list of US States that belong to a specific Reserve Region.");

                entity.Property(e => e.ReserveRegionUsstateAssociationId)
                    .HasColumnName("ReserveRegionUSStateAssociationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ReserveRegionId)
                    .HasColumnName("ReserveRegionID")
                    .HasComment("Unique ID representing the Reserve Region.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing the US State.");

                entity.HasOne(d => d.ReserveRegion)
                    .WithMany(p => p.LtbReserveRegionUsstateAssociations)
                    .HasForeignKey(d => d.ReserveRegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbReserveRegionUSStateAssociation_Codebook_LtbReserveRegion_ReserveRegionID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbReserveRegionUsstateAssociations)
                    .HasForeignKey(d => d.UsstateId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbReserveRegionUSStateAssociation_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbResponse>(entity =>
            {
                entity.HasKey(e => e.ResponseId);

                entity.ToTable("LtbResponse", "Codebook");

                entity.HasComment("This table provides a set of standardized responses used for question answers (yes, no, unknown, not applicable, suspected,…).  Business Rule Guidance.");

                entity.Property(e => e.ResponseId)
                    .HasColumnName("ResponseID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ResponseCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ResponseParentId)
                    .HasColumnName("ResponseParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ResponseParent)
                    .WithMany(p => p.InverseResponseParent)
                    .HasForeignKey(d => d.ResponseParentId)
                    .HasConstraintName("FK_Codebook_LtbResponse_Codebook_LtbResponse_ResponseParentID");
            });

            modelBuilder.Entity<LtbResponsibleAgency>(entity =>
            {
                entity.HasKey(e => e.ResponsibleAgencyId);

                entity.ToTable("LtbResponsibleAgency", "Codebook");

                entity.HasComment("This table provides a listing of various organizations to whom finding recommendations are sent.");

                entity.Property(e => e.ResponsibleAgencyId)
                    .HasColumnName("ResponsibleAgencyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ResponsibleAgencyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.ResponsibleAgencyParentId)
                    .HasColumnName("ResponsibleAgencyParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ResponsibleAgencyParent)
                    .WithMany(p => p.InverseResponsibleAgencyParent)
                    .HasForeignKey(d => d.ResponsibleAgencyParentId)
                    .HasConstraintName("FK_Codebook_LtbResponsibleAgency_Codebook_LtbResponsibleAgency_ResponsibleAgencyParentID");
            });

            modelBuilder.Entity<LtbRtscorrespondenceStatus>(entity =>
            {
                entity.HasKey(e => e.RtscorrespondenceStatusId);

                entity.ToTable("LtbRTSCorrespondenceStatus", "Codebook");

                entity.HasComment("This table provides a list of status values for RTS Target Correspondence (draft, staffed, finalized, command review, approved, distributed).");

                entity.Property(e => e.RtscorrespondenceStatusId)
                    .HasColumnName("RTSCorrespondenceStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.RtscorrespondenceStatusCode)
                    .IsRequired()
                    .HasColumnName("RTSCorrespondenceStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.RtscorrespondenceStatusParentId)
                    .HasColumnName("RTSCorrespondenceStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.RtscorrespondenceStatusParent)
                    .WithMany(p => p.InverseRtscorrespondenceStatusParent)
                    .HasForeignKey(d => d.RtscorrespondenceStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbRTSCorrespondenceStatus_Codebook_LtbRTSCorrespondenceStatus_RTSCorrespondenceStatusParentID");
            });

            modelBuilder.Entity<LtbRtssupportingDocumentType>(entity =>
            {
                entity.HasKey(e => e.RtssupportingDocumentTypeId);

                entity.ToTable("LtbRTSSupportingDocumentType", "Codebook");

                entity.HasComment("This table provides the conditions for an RTS Recommendation.");

                entity.Property(e => e.RtssupportingDocumentTypeId).HasColumnName("RTSSupportingDocumentTypeID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RtssupportingDocumentTypeCode)
                    .IsRequired()
                    .HasColumnName("RTSSupportingDocumentTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RtssupportingDocumentTypeParentId).HasColumnName("RTSSupportingDocumentTypeParentID");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.RtssupportingDocumentTypeParent)
                    .WithMany(p => p.InverseRtssupportingDocumentTypeParent)
                    .HasForeignKey(d => d.RtssupportingDocumentTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbRTSSupportingDocumentType_Codebook_LtbRTSSupportingDocumentType_RTSSupportingDocumentTypeParentID");
            });

            modelBuilder.Entity<LtbSeaCondition>(entity =>
            {
                entity.HasKey(e => e.SeaConditionId);

                entity.ToTable("LtbSeaCondition", "Codebook");

                entity.HasComment("This table provides the general condition of the surface on a large body of water with respect to wind waves and swell.  These values are a subset of the Douglas Sea Scale, which is a scale that measures the height of waves and also measures the swell of ");

                entity.Property(e => e.SeaConditionId)
                    .HasColumnName("SeaConditionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.SeaConditionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.SeaConditionParentId)
                    .HasColumnName("SeaConditionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.SeaConditionParent)
                    .WithMany(p => p.InverseSeaConditionParent)
                    .HasForeignKey(d => d.SeaConditionParentId)
                    .HasConstraintName("FK_Codebook_LtbSeaCondition_Codebook_LtbSeaCondition_SeaConditionParentID");
            });

            modelBuilder.Entity<LtbSpecialtyInspectionWeight>(entity =>
            {
                entity.HasKey(e => e.SpecialtyInspectionWeightId);

                entity.ToTable("LtbSpecialtyInspectionWeight", "Codebook");

                entity.Property(e => e.SpecialtyInspectionWeightId)
                    .HasColumnName("SpecialtyInspectionWeightID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.SpecialtyInspectionWeightCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.SpecialtyInspectionWeightParentId)
                    .HasColumnName("SpecialtyInspectionWeightParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.SpecialtyInspectionWeightParent)
                    .WithMany(p => p.InverseSpecialtyInspectionWeightParent)
                    .HasForeignKey(d => d.SpecialtyInspectionWeightParentId)
                    .HasConstraintName("FK_Codebook_LtbSpecialtyInspectionWeight_Codebook_LtbSpecialtyInspectionWeight_SpecialtyInspectionWeightParentID");
            });

            modelBuilder.Entity<LtbStation>(entity =>
            {
                entity.HasKey(e => e.StationId);

                entity.ToTable("LtbStation", "Codebook");

                entity.HasComment("This table provides a listing of installation/station codes.  External Data Source.");

                entity.Property(e => e.StationId)
                    .HasColumnName("StationID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.Address)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("Address of the Station.");

                entity.Property(e => e.City)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("City where the station is located.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of Installation Station. Unique ID representing Country.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Identity value of the DoD Service Component for the Station.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Identity value of the DoD Service for the Station.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.GeographicLocationCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.GeographicLocationName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Installation/Station geographic location name.");

                entity.Property(e => e.GeographicPointLocation)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Installation/Station geographic point location.");

                entity.Property(e => e.Gridcoordinates)
                    .HasColumnName("GRIDCoordinates")
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Installation/Station grid coordinates.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.InstallationLocationTypeId)
                    .HasColumnName("InstallationLocationTypeID")
                    .HasComment("Unique ID representing installation location type.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.Latitude).HasComment("Latitude of Installation Station.");

                entity.Property(e => e.LatitudeDegrees).HasComment("Latitude degrees of Installation Station.");

                entity.Property(e => e.LatitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Latitude direction of Installation Station.");

                entity.Property(e => e.LatitudeLongitudeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Latitude/Longitude description for Installation Station.");

                entity.Property(e => e.LatitudeMinutes).HasComment("Latitude minutes of Installation Station.");

                entity.Property(e => e.LatitudeSeconds).HasComment("Latitude seconds of Installation Station.");

                entity.Property(e => e.Longitude).HasComment("Longitude of Installation Station.");

                entity.Property(e => e.LongitudeDegrees).HasComment("Longitude degrees of Installation Station.");

                entity.Property(e => e.LongitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Longitude direction of Installation Station.");

                entity.Property(e => e.LongitudeMinutes).HasComment("Longitude minutes of Installation Station.");

                entity.Property(e => e.LongitudeSeconds).HasComment("Longitude seconds of Installation Station.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.StationAbbreviatedName)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("Station abbreviated name of the installation/station.");

                entity.Property(e => e.StationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.StationParentId)
                    .HasColumnName("StationParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.Xcoordinate)
                    .HasColumnName("XCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("X coordinate of the Station.");

                entity.Property(e => e.Ycoordinate)
                    .HasColumnName("YCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Y coordinate of the station.");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasComment("Postal code for the station.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbStations)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.DoDserviceComponent)
                    .WithMany(p => p.LtbStations)
                    .HasForeignKey(d => d.DoDserviceComponentId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbDoDServiceComponent_DoDServiceComponentID");

                entity.HasOne(d => d.DoDservice)
                    .WithMany(p => p.LtbStations)
                    .HasForeignKey(d => d.DoDserviceId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbDoDService_DoDServiceID");

                entity.HasOne(d => d.InstallationLocationType)
                    .WithMany(p => p.LtbStations)
                    .HasForeignKey(d => d.InstallationLocationTypeId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbInstallationLocationType_InstallationLocationTypeID");

                entity.HasOne(d => d.StationParent)
                    .WithMany(p => p.InverseStationParent)
                    .HasForeignKey(d => d.StationParentId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbStation_StationParentID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbStations)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbStation_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<LtbStation07272020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbStation07272020", "Codebook");

                entity.Property(e => e.Address)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DoDserviceComponentId).HasColumnName("DoDServiceComponentID");

                entity.Property(e => e.DoDserviceId).HasColumnName("DoDServiceID");

                entity.Property(e => e.Downloaddate)
                    .HasColumnName("downloaddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.GeographicLocationCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GeographicLocationName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.GeographicPointLocation)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Gridcoordinates)
                    .HasColumnName("GRIDCoordinates")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InstallationLocationTypeId).HasColumnName("InstallationLocationTypeID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LatitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LatitudeLongitudeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LongitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationAbbreviatedName)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.StationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StationId)
                    .HasColumnName("StationID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StationParentId).HasColumnName("StationParentID");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UsstateId).HasColumnName("USStateID");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.Property(e => e.Xcoordinate)
                    .HasColumnName("XCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ycoordinate)
                    .HasColumnName("YCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(11)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LtbStation12072020DupUpdt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbStation12072020DupUpdt", "Codebook");

                entity.Property(e => e.Address)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DoDserviceComponentId).HasColumnName("DoDServiceComponentID");

                entity.Property(e => e.DoDserviceId).HasColumnName("DoDServiceID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.GeographicLocationCode)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GeographicLocationName)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.GeographicPointLocation)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Gridcoordinates)
                    .HasColumnName("GRIDCoordinates")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InstallationLocationTypeId).HasColumnName("InstallationLocationTypeID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LatitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LatitudeLongitudeDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LongitudeDirection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationAbbreviatedName)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.StationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StationId)
                    .HasColumnName("StationID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.StationParentId).HasColumnName("StationParentID");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UsstateId).HasColumnName("USStateID");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.Property(e => e.Xcoordinate)
                    .HasColumnName("XCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Ycoordinate)
                    .HasColumnName("YCoordinate")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(11)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LtbSubUic>(entity =>
            {
                entity.HasKey(e => e.Subuicid);

                entity.ToTable("LtbSubUIC", "Codebook");

                entity.Property(e => e.Subuicid).HasColumnName("SUBUICID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SubUicparentId).HasColumnName("SubUICParentID");

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.SubUicparent)
                    .WithMany(p => p.InverseSubUicparent)
                    .HasForeignKey(d => d.SubUicparentId)
                    .HasConstraintName("FK_Codebook_LtbSubUIC_Codebook_LtbSubUIC_SubUICParentID");

                entity.HasOne(d => d.Uic)
                    .WithMany(p => p.LtbSubUics)
                    .HasForeignKey(d => d.Uicid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbSubUIC_Codebook_LtbUIC_UICID");
            });

            modelBuilder.Entity<LtbTacticalTrainingType>(entity =>
            {
                entity.HasKey(e => e.TacticalTrainingTypeId);

                entity.ToTable("LtbTacticalTrainingType", "Codebook");

                entity.HasComment("This table provides types of tactical training.");

                entity.Property(e => e.TacticalTrainingTypeId)
                    .HasColumnName("TacticalTrainingTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TacticalTrainingTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TacticalTrainingTypeParentId)
                    .HasColumnName("TacticalTrainingTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TacticalTrainingTypeParent)
                    .WithMany(p => p.InverseTacticalTrainingTypeParent)
                    .HasForeignKey(d => d.TacticalTrainingTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbTacticalTrainingType_Codebook_LtbTacticalTrainingType_TacticalTrainingTypeParentID");
            });

            modelBuilder.Entity<LtbTcdoDmedicalFacilityType>(entity =>
            {
                entity.HasKey(e => e.TcdoDmedicalFacilityTypeId);

                entity.ToTable("LtbTCDoDMedicalFacilityType", "Codebook");

                entity.HasComment("This table contains a list of DoD Medical Facility Types  provide by DMIS.  External Data Source.");

                entity.Property(e => e.TcdoDmedicalFacilityTypeId)
                    .HasColumnName("TCDoDMedicalFacilityTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TcdoDmedicalFacilityTypeCode)
                    .IsRequired()
                    .HasColumnName("TCDoDMedicalFacilityTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TcdoDmedicalFacilityTypeParentId)
                    .HasColumnName("TCDoDMedicalFacilityTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TcdoDmedicalFacilityTypeParent)
                    .WithMany(p => p.InverseTcdoDmedicalFacilityTypeParent)
                    .HasForeignKey(d => d.TcdoDmedicalFacilityTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbTCDoDMedicalFacilityType_Codebook_LtbTCDoDMedicalFacilityType_TCDoDMedicalFacilityTypeParentID");
            });

            modelBuilder.Entity<LtbTcfacilityServiceBranch>(entity =>
            {
                entity.HasKey(e => e.TcfacilityServiceBranchId);

                entity.ToTable("LtbTCFacilityServiceBranch", "Codebook");

                entity.HasComment("This table contains a list of Facility Service Branches provide by DMIS.  External Data Source.");

                entity.Property(e => e.TcfacilityServiceBranchId)
                    .HasColumnName("TCFacilityServiceBranchID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TcfacilityServiceBranchCode)
                    .IsRequired()
                    .HasColumnName("TCFacilityServiceBranchCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TcfacilityServiceBranchParentId)
                    .HasColumnName("TCFacilityServiceBranchParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TcfacilityServiceBranchParent)
                    .WithMany(p => p.InverseTcfacilityServiceBranchParent)
                    .HasForeignKey(d => d.TcfacilityServiceBranchParentId)
                    .HasConstraintName("FK_Codebook_LtbTCFacilityServiceBranch_Codebook_LtbTCFacilityServiceBranch_TCFacilityServiceBranchParentID");
            });

            modelBuilder.Entity<LtbTideCondition>(entity =>
            {
                entity.HasKey(e => e.TideConditionId);

                entity.ToTable("LtbTideCondition", "Codebook");

                entity.HasComment("This table provides values to indiciate the rise and fall of sea levels.  Tide values of low and high.");

                entity.Property(e => e.TideConditionId)
                    .HasColumnName("TideConditionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TideConditionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TideConditionParentId)
                    .HasColumnName("TideConditionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TideConditionParent)
                    .WithMany(p => p.InverseTideConditionParent)
                    .HasForeignKey(d => d.TideConditionParentId)
                    .HasConstraintName("FK_Codebook_LtbTideCondition_Codebook_LtbTideCondition_TideConditionParentID");
            });

            modelBuilder.Entity<LtbTowingStatus>(entity =>
            {
                entity.HasKey(e => e.TowingStatusId);

                entity.ToTable("LtbTowingStatus", "Codebook");

                entity.HasComment("This table provides a list of vehicle towing status values (towing a behicle, being towed,…).");

                entity.Property(e => e.TowingStatusId)
                    .HasColumnName("TowingStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TowingStatusCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TowingStatusParentId)
                    .HasColumnName("TowingStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TowingStatusParent)
                    .WithMany(p => p.InverseTowingStatusParent)
                    .HasForeignKey(d => d.TowingStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbTowingStatus_Codebook_LtbTowingStatus_TowingStatusParentID");
            });

            modelBuilder.Entity<LtbTrainingMethod>(entity =>
            {
                entity.HasKey(e => e.TrainingMethodId);

                entity.ToTable("LtbTrainingMethod", "Codebook");

                entity.HasComment("This table provides a listing of different methods for receiving training.");

                entity.Property(e => e.TrainingMethodId)
                    .HasColumnName("TrainingMethodID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TrainingMethodCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TrainingMethodParentId)
                    .HasColumnName("TrainingMethodParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TrainingMethodParent)
                    .WithMany(p => p.InverseTrainingMethodParent)
                    .HasForeignKey(d => d.TrainingMethodParentId)
                    .HasConstraintName("FK_Codebook_LtbTrainingMethod_Codebook_LtbTrainingMethod_TrainingMethodParentID");
            });

            modelBuilder.Entity<LtbTrainingType>(entity =>
            {
                entity.HasKey(e => e.TrainingTypeId);

                entity.ToTable("LtbTrainingType", "Codebook");

                entity.HasComment("This table provides a listing of various types of training.");

                entity.Property(e => e.TrainingTypeId)
                    .HasColumnName("TrainingTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TrainingTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.TrainingTypeParentId)
                    .HasColumnName("TrainingTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.TrainingTypeParent)
                    .WithMany(p => p.InverseTrainingTypeParent)
                    .HasForeignKey(d => d.TrainingTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbTrainingType_Codebook_LtbTrainingType_TrainingTypeParentID");
            });

            modelBuilder.Entity<LtbUasseatPosition>(entity =>
            {
                entity.HasKey(e => e.UasseatPositionId);

                entity.ToTable("LtbUASSeatPosition", "Codebook");

                entity.HasComment("This table provides a listing of seat positions for UAS related mishaps.  These seat positions are required to complete personnel duty positions using association.  ");

                entity.Property(e => e.UasseatPositionId)
                    .HasColumnName("UASSeatPositionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UasseatPositionCode)
                    .IsRequired()
                    .HasColumnName("UASSeatPositionCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UasseatPositionParentId)
                    .HasColumnName("UASSeatPositionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UasseatPositionParent)
                    .WithMany(p => p.InverseUasseatPositionParent)
                    .HasForeignKey(d => d.UasseatPositionParentId)
                    .HasConstraintName("FK_Codebook_LtbUASSeatPosition_Codebook_LtbUASSeatPosition_UASSeatPositionParentID");
            });

            modelBuilder.Entity<LtbUic>(entity =>
            {
                entity.HasKey(e => e.Uicid);

                entity.ToTable("LtbUIC", "Codebook");

                entity.HasComment("This table provides a listing of Unit Identification Codes (UICs) from DRRS/Asorts with start and end dates.  External Data Source.");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateManuallyChanged)
                    .HasColumnType("datetime")
                    .HasComment("Date the UIC record was manually updated.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ManuallyChanged).HasComment("An indicator that the UIC record has been manually changed as opposed to update from data source.");

                entity.Property(e => e.OshaEstablishmentId)
                    .HasColumnName("OshaEstablishmentID")
                    .HasComment("Unique ID representing the OSHA Establishment.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicparentId)
                    .HasColumnName("UICParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.OshaEstablishment)
                    .WithMany(p => p.LtbUics)
                    .HasForeignKey(d => d.OshaEstablishmentId)
                    .HasConstraintName("FK_Codebook_LtbUIC_Codebook_LtbOshaEstablishment_OshaEstablishmentID");

                entity.HasOne(d => d.Uicparent)
                    .WithMany(p => p.InverseUicparent)
                    .HasForeignKey(d => d.UicparentId)
                    .HasConstraintName("FK_Codebook_LtbUIC_Codebook_LtbUIC_UICParentID");
            });

            modelBuilder.Entity<LtbUic08132020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUIC08132020", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OshaEstablishmentId).HasColumnName("OshaEstablishmentID");

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UicparentId).HasColumnName("UICParentID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);
            });

            modelBuilder.Entity<LtbUic08172020updatePart1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUIC08172020UpdatePart1", "Codebook");

                entity.Property(e => e.CloseUic)
                    .HasColumnName("CloseUIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Daydiff1).HasColumnName("daydiff1");

                entity.Property(e => e.Daydiff2).HasColumnName("daydiff2");

                entity.Property(e => e.Daydiff3).HasColumnName("daydiff3");

                entity.Property(e => e.Daydiff4).HasColumnName("daydiff4");

                entity.Property(e => e.DeleteUicid1)
                    .HasColumnName("DeleteUICID1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid2)
                    .HasColumnName("DeleteUICID2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid3)
                    .HasColumnName("DeleteUICID3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid4)
                    .HasColumnName("DeleteUICID4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid5)
                    .HasColumnName("DeleteUICID5")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting2).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting3).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting4).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Endcollecting1)
                    .HasColumnName("endcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Establishdate)
                    .HasColumnName("establishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NewEndCollecting).HasColumnType("datetime");

                entity.Property(e => e.NewStartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting2).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting3).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting4).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Startcollecting1)
                    .HasColumnName("startcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Uicid1).HasColumnName("uicid1");

                entity.Property(e => e.Uicid2).HasColumnName("uicid2");

                entity.Property(e => e.Uicid3).HasColumnName("uicid3");

                entity.Property(e => e.Uicid4).HasColumnName("uicid4");

                entity.Property(e => e.Uicid5).HasColumnName("uicid5");

                entity.Property(e => e.Unitidentificationcode)
                    .IsRequired()
                    .HasColumnName("unitidentificationcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used1)
                    .IsRequired()
                    .HasColumnName("used1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used2)
                    .HasColumnName("used2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used3)
                    .HasColumnName("used3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used4)
                    .HasColumnName("used4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used5)
                    .HasColumnName("used5")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbUic08182020updatePart2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUIC08182020UpdatePart2", "Codebook");

                entity.Property(e => e.CloseUic)
                    .HasColumnName("CloseUIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Daydiff1).HasColumnName("daydiff1");

                entity.Property(e => e.Daydiff2).HasColumnName("daydiff2");

                entity.Property(e => e.Daydiff3).HasColumnName("daydiff3");

                entity.Property(e => e.Daydiff4).HasColumnName("daydiff4");

                entity.Property(e => e.DeleteUicid1)
                    .HasColumnName("DeleteUICID1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid2)
                    .HasColumnName("DeleteUICID2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid3)
                    .HasColumnName("DeleteUICID3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid4)
                    .HasColumnName("DeleteUICID4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid5)
                    .HasColumnName("DeleteUICID5")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting2).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting3).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting4).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Endcollecting1)
                    .HasColumnName("endcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Establishdate)
                    .HasColumnName("establishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NewEndCollecting).HasColumnType("datetime");

                entity.Property(e => e.NewStartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting2).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting3).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting4).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Startcollecting1)
                    .HasColumnName("startcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Uicid1).HasColumnName("uicid1");

                entity.Property(e => e.Uicid2).HasColumnName("uicid2");

                entity.Property(e => e.Uicid3).HasColumnName("uicid3");

                entity.Property(e => e.Uicid4).HasColumnName("uicid4");

                entity.Property(e => e.Uicid5).HasColumnName("uicid5");

                entity.Property(e => e.Unitidentificationcode)
                    .IsRequired()
                    .HasColumnName("unitidentificationcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used1)
                    .IsRequired()
                    .HasColumnName("used1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used2)
                    .HasColumnName("used2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used3)
                    .HasColumnName("used3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used4)
                    .HasColumnName("used4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used5)
                    .HasColumnName("used5")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbUic08192020updatePart3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUIC08192020UpdatePart3", "Codebook");

                entity.Property(e => e.CloseUic)
                    .HasColumnName("CloseUIC")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Daydiff1).HasColumnName("daydiff1");

                entity.Property(e => e.Daydiff2).HasColumnName("daydiff2");

                entity.Property(e => e.Daydiff3).HasColumnName("daydiff3");

                entity.Property(e => e.Daydiff4).HasColumnName("daydiff4");

                entity.Property(e => e.DeleteUicid1)
                    .HasColumnName("DeleteUICID1")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid2)
                    .HasColumnName("DeleteUICID2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid3)
                    .HasColumnName("DeleteUICID3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid4)
                    .HasColumnName("DeleteUICID4")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeleteUicid5)
                    .HasColumnName("DeleteUICID5")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting2).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting3).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting4).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Endcollecting1)
                    .HasColumnName("endcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Establishdate)
                    .HasColumnName("establishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.NewEndCollecting).HasColumnType("datetime");

                entity.Property(e => e.NewStartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting2).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting3).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting4).HasColumnType("datetime");

                entity.Property(e => e.StartCollecting5).HasColumnType("datetime");

                entity.Property(e => e.Startcollecting1)
                    .HasColumnName("startcollecting1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Uicid1).HasColumnName("uicid1");

                entity.Property(e => e.Uicid2).HasColumnName("uicid2");

                entity.Property(e => e.Uicid3).HasColumnName("uicid3");

                entity.Property(e => e.Uicid4).HasColumnName("uicid4");

                entity.Property(e => e.Uicid5).HasColumnName("uicid5");

                entity.Property(e => e.Unitidentificationcode)
                    .IsRequired()
                    .HasColumnName("unitidentificationcode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used1)
                    .IsRequired()
                    .HasColumnName("used1")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used2)
                    .HasColumnName("used2")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used3)
                    .HasColumnName("used3")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used4)
                    .HasColumnName("used4")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Used5)
                    .HasColumnName("used5")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbUic09292020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUIC09292020", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.OshaEstablishmentId).HasColumnName("OshaEstablishmentID");

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UicparentId).HasColumnName("UICParentID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);
            });

            modelBuilder.Entity<LtbUicactivityStatus>(entity =>
            {
                entity.HasKey(e => e.UicactivityStatusId);

                entity.ToTable("LtbUICActivityStatus", "Codebook");

                entity.HasComment("This table provides a listing of Unit Identification Codes (UICs) activity status in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source..  External Data Source.");

                entity.Property(e => e.UicactivityStatusId)
                    .HasColumnName("UICActivityStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicactivityStatusCode)
                    .IsRequired()
                    .HasColumnName("UICActivityStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicactivityStatusParentId)
                    .HasColumnName("UICActivityStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicactivityStatusParent)
                    .WithMany(p => p.InverseUicactivityStatusParent)
                    .HasForeignKey(d => d.UicactivityStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbUICActivityStatus_Codebook_LtbUICActivityStatus_UICActivityStatusParentID");
            });

            modelBuilder.Entity<LtbUicadministrativeParent>(entity =>
            {
                entity.HasKey(e => e.UicadministrativeParentId);

                entity.ToTable("LtbUICAdministrativeParent", "Codebook");

                entity.HasComment("This table contains Unit Identification Code (UIC) Administrative Parent UIC records obtains from DRRS/Asorts. External Data Source.");

                entity.Property(e => e.UicadministrativeParentId)
                    .HasColumnName("UICAdministrativeParentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateManuallyChanged)
                    .HasColumnType("datetime")
                    .HasComment("Date the UIC record was manually updated.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ManuallyChanged).HasComment("An indicator that the UIC record has been manually changed as opposed to update from data source.");

                entity.Property(e => e.ParentUicid)
                    .HasColumnName("ParentUICID")
                    .HasComment("Unique UIC ID representing the Administrative Parent UIC.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .HasComment("Unique ID representing the UIC.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.ParentUic)
                    .WithMany(p => p.LtbUicadministrativeParentParentUics)
                    .HasForeignKey(d => d.ParentUicid)
                    .HasConstraintName("FK_Codebook_LtbUICAdministrativeParent_Codebook_LtbUIC_ParentUICID");

                entity.HasOne(d => d.Uic)
                    .WithMany(p => p.LtbUicadministrativeParentUics)
                    .HasForeignKey(d => d.Uicid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICAdministrativeParent_Codebook_LtbUIC_UICID");
            });

            modelBuilder.Entity<LtbUicarmyCommandType>(entity =>
            {
                entity.HasKey(e => e.UicarmyCommandTypeId);

                entity.ToTable("LtbUICArmyCommandType", "Codebook");

                entity.HasComment("This code book table contains a listing of Army command types in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicarmyCommandTypeId)
                    .HasColumnName("UICArmyCommandTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicarmyCommandTypeCode)
                    .IsRequired()
                    .HasColumnName("UICArmyCommandTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicarmyCommandTypeParentId)
                    .HasColumnName("UICArmyCommandTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicarmyCommandTypeParent)
                    .WithMany(p => p.InverseUicarmyCommandTypeParent)
                    .HasForeignKey(d => d.UicarmyCommandTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbUICArmyCommandType_Codebook_LtbUICArmyCommandType_UICArmyCommandTypeParentID");
            });

            modelBuilder.Entity<LtbUicarmyOrganizationType>(entity =>
            {
                entity.HasKey(e => e.UicarmyOrganizationTypeId);

                entity.ToTable("LtbUICArmyOrganizationType", "Codebook");

                entity.HasComment("This table contains the UIC Army Organization Type Codes in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. The 2nd position of the Unit Identification Code (UIC).  External Data Source.");

                entity.Property(e => e.UicarmyOrganizationTypeId)
                    .HasColumnName("UICArmyOrganizationTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicarmyOrganizationTypeCode)
                    .IsRequired()
                    .HasColumnName("UICArmyOrganizationTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicarmyOrganizationTypeParentId)
                    .HasColumnName("UICArmyOrganizationTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicarmyOrganizationTypeParent)
                    .WithMany(p => p.InverseUicarmyOrganizationTypeParent)
                    .HasForeignKey(d => d.UicarmyOrganizationTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbUICArmyOrganizationType_Codebook_LtbUICArmyOrganizationType_UICArmyOrganizationTypeParentID");
            });

            modelBuilder.Entity<LtbUiccommandAssignment>(entity =>
            {
                entity.HasKey(e => e.UiccommandAssignmentId);

                entity.ToTable("LtbUICCommandAssignment", "Codebook");

                entity.HasComment("This table provides a listing of UIC command assignment in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UiccommandAssignmentId)
                    .HasColumnName("UICCommandAssignmentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UiccommandAssignmentCode)
                    .IsRequired()
                    .HasColumnName("UICCommandAssignmentCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UiccommandAssignmentParentId)
                    .HasColumnName("UICCommandAssignmentParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UiccommandAssignmentParent)
                    .WithMany(p => p.InverseUiccommandAssignmentParent)
                    .HasForeignKey(d => d.UiccommandAssignmentParentId)
                    .HasConstraintName("FK_Codebook_LtbUICCommandAssignment_Codebook_LtbUICCommandAssignment_UICCommandAssignmentParentID");
            });

            modelBuilder.Entity<LtbUicdetail>(entity =>
            {
                entity.HasKey(e => e.UicdetailId);

                entity.ToTable("LtbUICDetail", "Codebook");

                entity.HasComment("This table contains detailed information about each UIC with start and end dates from DRRS/Asorts.  External Data Source.");

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ArmyBranchId)
                    .HasColumnName("ArmyBranchID")
                    .HasComment("Unique ID representing Army Branch.");

                entity.Property(e => e.ArmyOrganizationTypeId)
                    .HasColumnName("ArmyOrganizationTypeID")
                    .HasComment("Unique ID representing the Army organization type.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateManuallyChanged)
                    .HasColumnType("datetime")
                    .HasComment("Date the UIC record was manually updated.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service Component.");

                entity.Property(e => e.DoDserviceId)
                    .HasColumnName("DoDServiceID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service.");

                entity.Property(e => e.DoDunifiedCombatantCommandId)
                    .HasColumnName("DoDUnifiedCombatantCommandID")
                    .HasComment("Unique ID representing the DoD Unified Combatant Command.");

                entity.Property(e => e.DrrsAsortsId)
                    .HasColumnName("DrrsAsortsID")
                    .HasComment("The DRRS/Asorts ID within the ASOHEIMS staging database.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.HomeGeographicLocationId)
                    .HasColumnName("HomeGeographicLocationID")
                    .HasComment("Unique ID representing the UIC Home geographic location.");

                entity.Property(e => e.InstallationStationId)
                    .HasColumnName("InstallationStationID")
                    .HasComment("Unique ID representing installation station of the UIC.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Unit Identification Code (UIC) long name.");

                entity.Property(e => e.MajorArmyCommandUicid)
                    .HasColumnName("MajorArmyCommandUICID")
                    .HasComment("Unique ID representing the Major Army Command UIC.");

                entity.Property(e => e.ManuallyChanged).HasComment("An indicator that the UIC record has been manually changed as opposed to update from data source.");

                entity.Property(e => e.MobilizedResponseId)
                    .HasColumnName("MobilizedResponseID")
                    .HasComment("Unique ID representing if the UIC is mobilized.");

                entity.Property(e => e.OrganizationDate)
                    .HasColumnType("datetime")
                    .HasComment("The organization date for the UIC.");

                entity.Property(e => e.OshaEstablishmentId)
                    .HasColumnName("OshaEstablishmentID")
                    .HasComment("Unique ID representing the OSHA Establishment.");

                entity.Property(e => e.PresentGeographicLocationId)
                    .HasColumnName("PresentGeographicLocationID")
                    .HasComment("Unique ID representing the present geographic location of the UIC.");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("The short name of the UIC record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Tpsn5)
                    .HasColumnName("TPSN5")
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasComment("UIC TPSN5 value.");

                entity.Property(e => e.Uicabbreviation)
                    .HasColumnName("UICAbbreviation")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("UIC abbreviation.");

                entity.Property(e => e.UicactivityStatusId)
                    .HasColumnName("UICActivityStatusID")
                    .HasComment("Unique ID representing the UIC activity status.");

                entity.Property(e => e.UicarmyCommandTypeId)
                    .HasColumnName("UICArmyCommandTypeID")
                    .HasComment("Unique ID representing the UIC army command type.");

                entity.Property(e => e.UiccommandAssignmentId)
                    .HasColumnName("UICCommandAssignmentID")
                    .HasComment("Unique ID representing the UIC command assignment.");

                entity.Property(e => e.UicdetailParentId)
                    .HasColumnName("UICDetailParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.UicfunctionalAreaId)
                    .HasColumnName("UICFunctionalAreaID")
                    .HasComment("Unique ID representing the UIC functional area.");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .HasComment("Unique ID representing the UIC.");

                entity.Property(e => e.UicorganizationEntityStatusId)
                    .HasColumnName("UICOrganizationEntityStatusID")
                    .HasComment("Unique ID representing UIC organization entity status.");

                entity.Property(e => e.UicunitDescriptorCode)
                    .HasColumnName("UICUnitDescriptorCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitDescriptorId)
                    .HasColumnName("UICUnitDescriptorID")
                    .HasComment("Unique ID representing UIC unit descriptor.");

                entity.Property(e => e.UicunitLevelId)
                    .HasColumnName("UICUnitLevelID")
                    .HasComment("Unique ID representing UIC unit level.");

                entity.Property(e => e.UicunitTypeConstructionId)
                    .HasColumnName("UICUnitTypeConstructionID")
                    .HasComment("Unique ID representing UIC unit type construction.");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UnitPresentLocationZipCode)
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.ArmyBranch)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.ArmyBranchId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbArmyBranch_ArmyBranchID");

                entity.HasOne(d => d.ArmyOrganizationType)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.ArmyOrganizationTypeId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICArmyOrganizationType_UICArmyOrganizationTypeID");

                entity.HasOne(d => d.DoDserviceComponent)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.DoDserviceComponentId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbDoDServiceComponent_DoDServiceComponentID");

                entity.HasOne(d => d.DoDservice)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.DoDserviceId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbDoDService_DoDServiceID");

                entity.HasOne(d => d.DoDunifiedCombatantCommand)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.DoDunifiedCombatantCommandId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbDoDUnifiedCombatantCommand_DoDUnifiedCombatantCommandID");

                entity.HasOne(d => d.HomeGeographicLocation)
                    .WithMany(p => p.LtbUicdetailHomeGeographicLocations)
                    .HasForeignKey(d => d.HomeGeographicLocationId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbGeographicLocation_HomeGeographicLocationID");

                entity.HasOne(d => d.InstallationStation)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.InstallationStationId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbStation_InstallationStationID");

                entity.HasOne(d => d.MajorArmyCommandUic)
                    .WithMany(p => p.LtbUicdetailMajorArmyCommandUics)
                    .HasForeignKey(d => d.MajorArmyCommandUicid)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUIC_MajorArmyCommandUICID");

                entity.HasOne(d => d.MobilizedResponse)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.MobilizedResponseId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbResponse_MobilizedResponseID");

                entity.HasOne(d => d.OshaEstablishment)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.OshaEstablishmentId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbOshaEstablishment_OshaEstablishmentID");

                entity.HasOne(d => d.PresentGeographicLocation)
                    .WithMany(p => p.LtbUicdetailPresentGeographicLocations)
                    .HasForeignKey(d => d.PresentGeographicLocationId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbGeographicLocation_PresentGeographicLocationID");

                entity.HasOne(d => d.UicactivityStatus)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicactivityStatusId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICActivityStatus_UICActivityStatusID");

                entity.HasOne(d => d.UicarmyCommandType)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicarmyCommandTypeId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICArmyCommandType_UICArmyCommandTypeID");

                entity.HasOne(d => d.UiccommandAssignment)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UiccommandAssignmentId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICCommandAssignment_UICCommandAssignmentID");

                entity.HasOne(d => d.UicdetailParent)
                    .WithMany(p => p.InverseUicdetailParent)
                    .HasForeignKey(d => d.UicdetailParentId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICDetail_UICDetailParentID");

                entity.HasOne(d => d.UicfunctionalArea)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicfunctionalAreaId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICFunctionalArea_UICFunctionalAreaID");

                entity.HasOne(d => d.Uic)
                    .WithMany(p => p.LtbUicdetailUics)
                    .HasForeignKey(d => d.Uicid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUIC_UICID");

                entity.HasOne(d => d.UicorganizationEntityStatus)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicorganizationEntityStatusId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICOrganizationEntityStatus_UICOrganizationEntityStatusID");

                entity.HasOne(d => d.UicunitDescriptor)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicunitDescriptorId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICUnitDescriptor_UICUnitDescriptorID");

                entity.HasOne(d => d.UicunitLevel)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicunitLevelId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICUnitLevel_UICUnitLevelID");

                entity.HasOne(d => d.UicunitTypeConstruction)
                    .WithMany(p => p.LtbUicdetails)
                    .HasForeignKey(d => d.UicunitTypeConstructionId)
                    .HasConstraintName("FK_Codebook_LtbUICDetail_Codebook_LtbUICUnitTypeConstruction_UICUnitTypeConstructionID");
            });

            modelBuilder.Entity<LtbUicdetail08132020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUICDetail08132020", "Codebook");

                entity.Property(e => e.ArmyBranchId).HasColumnName("ArmyBranchID");

                entity.Property(e => e.ArmyOrganizationTypeId).HasColumnName("ArmyOrganizationTypeID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.DoDserviceComponentId).HasColumnName("DoDServiceComponentID");

                entity.Property(e => e.DoDserviceId).HasColumnName("DoDServiceID");

                entity.Property(e => e.DoDunifiedCombatantCommandId).HasColumnName("DoDUnifiedCombatantCommandID");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HomeGeographicLocationId).HasColumnName("HomeGeographicLocationID");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.MajorArmyCommandUicid).HasColumnName("MajorArmyCommandUICID");

                entity.Property(e => e.MobilizedResponseId).HasColumnName("MobilizedResponseID");

                entity.Property(e => e.OrganizationDate).HasColumnType("datetime");

                entity.Property(e => e.OshaEstablishmentId).HasColumnName("OshaEstablishmentID");

                entity.Property(e => e.PresentGeographicLocationId).HasColumnName("PresentGeographicLocationID");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Tpsn5)
                    .HasColumnName("TPSN5")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Uicabbreviation)
                    .HasColumnName("UICAbbreviation")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UicactivityStatusId).HasColumnName("UICActivityStatusID");

                entity.Property(e => e.UicarmyCommandTypeId).HasColumnName("UICArmyCommandTypeID");

                entity.Property(e => e.UiccommandAssignmentId).HasColumnName("UICCommandAssignmentID");

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UicdetailParentId).HasColumnName("UICDetailParentID");

                entity.Property(e => e.UicfunctionalAreaId).HasColumnName("UICFunctionalAreaID");

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UicorganizationEntityStatusId).HasColumnName("UICOrganizationEntityStatusID");

                entity.Property(e => e.UicunitDescriptorCode)
                    .HasColumnName("UICUnitDescriptorCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UicunitDescriptorId).HasColumnName("UICUnitDescriptorID");

                entity.Property(e => e.UicunitLevelId).HasColumnName("UICUnitLevelID");

                entity.Property(e => e.UicunitTypeConstructionId).HasColumnName("UICUnitTypeConstructionID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UnitPresentLocationZipCode)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);
            });

            modelBuilder.Entity<LtbUicdetail09292020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUICDetail09292020", "Codebook");

                entity.Property(e => e.ArmyBranchId).HasColumnName("ArmyBranchID");

                entity.Property(e => e.ArmyOrganizationTypeId).HasColumnName("ArmyOrganizationTypeID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.DoDserviceComponentId).HasColumnName("DoDServiceComponentID");

                entity.Property(e => e.DoDserviceId).HasColumnName("DoDServiceID");

                entity.Property(e => e.DoDunifiedCombatantCommandId).HasColumnName("DoDUnifiedCombatantCommandID");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.HomeGeographicLocationId).HasColumnName("HomeGeographicLocationID");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.MajorArmyCommandUicid).HasColumnName("MajorArmyCommandUICID");

                entity.Property(e => e.MobilizedResponseId).HasColumnName("MobilizedResponseID");

                entity.Property(e => e.OrganizationDate).HasColumnType("datetime");

                entity.Property(e => e.OshaEstablishmentId).HasColumnName("OshaEstablishmentID");

                entity.Property(e => e.PresentGeographicLocationId).HasColumnName("PresentGeographicLocationID");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Tpsn5)
                    .HasColumnName("TPSN5")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Uicabbreviation)
                    .HasColumnName("UICAbbreviation")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UicactivityStatusId).HasColumnName("UICActivityStatusID");

                entity.Property(e => e.UicarmyCommandTypeId).HasColumnName("UICArmyCommandTypeID");

                entity.Property(e => e.UiccommandAssignmentId).HasColumnName("UICCommandAssignmentID");

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UicdetailParentId).HasColumnName("UICDetailParentID");

                entity.Property(e => e.UicfunctionalAreaId).HasColumnName("UICFunctionalAreaID");

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UicorganizationEntityStatusId).HasColumnName("UICOrganizationEntityStatusID");

                entity.Property(e => e.UicunitDescriptorCode)
                    .HasColumnName("UICUnitDescriptorCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UicunitDescriptorId).HasColumnName("UICUnitDescriptorID");

                entity.Property(e => e.UicunitLevelId).HasColumnName("UICUnitLevelID");

                entity.Property(e => e.UicunitTypeConstructionId).HasColumnName("UICUnitTypeConstructionID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UnitPresentLocationZipCode)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);
            });

            modelBuilder.Entity<LtbUicfunctionalArea>(entity =>
            {
                entity.HasKey(e => e.UicfunctionalAreaId);

                entity.ToTable("LtbUICFunctionalArea", "Codebook");

                entity.HasComment("This table provides a listing of UIC functional areas in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicfunctionalAreaId)
                    .HasColumnName("UICFunctionalAreaID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicfunctionalAreaCode)
                    .IsRequired()
                    .HasColumnName("UICFunctionalAreaCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicfunctionalAreaParentId)
                    .HasColumnName("UICFunctionalAreaParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicfunctionalAreaParent)
                    .WithMany(p => p.InverseUicfunctionalAreaParent)
                    .HasForeignKey(d => d.UicfunctionalAreaParentId)
                    .HasConstraintName("FK_Codebook_LtbUICFunctionalArea_Codebook_LtbUICFunctionalArea_UICFunctionalAreaParentID");
            });

            modelBuilder.Entity<LtbUichierarchy>(entity =>
            {
                entity.HasKey(e => e.UichierarchyId)
                    .IsClustered(false);

                entity.ToTable("LtbUICHierarchy", "Codebook");

                entity.HasComment("This table provides a listing of Unit Identification Codes (UICs) from DRRS/Asorts with start and end dates.  External Data Source.");

                entity.Property(e => e.UichierarchyId)
                    .HasColumnName("UICHierarchyID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.ChildId)
                    .HasColumnName("ChildID")
                    .HasComment("Unique ID for the UIC Child.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.Level).HasComment("Hierarchy Level of the Child UIC in relation to the Parent.");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasComment("Unique ID for the UIC Parent.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.Child)
                    .WithMany(p => p.LtbUichierarchyChildren)
                    .HasForeignKey(d => d.ChildId)
                    .HasConstraintName("FK_Codebook_LtbUICHierarchy_ChildID_Codebook_LtbUIC_UICID");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.LtbUichierarchyParents)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Codebook_LtbUICHierarchy_ParentID_Codebook_LtbUIC_UICID");
            });

            modelBuilder.Entity<LtbUicoperationalParent>(entity =>
            {
                entity.HasKey(e => e.UicoperationalParentId);

                entity.ToTable("LtbUICOperationalParent", "Codebook");

                entity.HasComment("This table contains Unit Identification Code (UIC) Operational Parent UIC records obtains from DRRS/Asorts. External Data Source.");

                entity.Property(e => e.UicoperationalParentId)
                    .HasColumnName("UICOperationalParentID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DateManuallyChanged)
                    .HasColumnType("datetime")
                    .HasComment("Date the UIC record was manually updated.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ManuallyChanged).HasComment("An indicator that the UIC record has been manually changed as opposed to update from data source.");

                entity.Property(e => e.ParentUicid)
                    .HasColumnName("ParentUICID")
                    .HasComment("Unique UIC ID representing the Operational Parent UIC.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Uicid)
                    .HasColumnName("UICID")
                    .HasComment("Unique ID representing the UIC.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.HasOne(d => d.ParentUic)
                    .WithMany(p => p.LtbUicoperationalParentParentUics)
                    .HasForeignKey(d => d.ParentUicid)
                    .HasConstraintName("FK_Codebook_LtbUICOperationalParent_Codebook_LtbUIC_ParentUICID");

                entity.HasOne(d => d.Uic)
                    .WithMany(p => p.LtbUicoperationalParentUics)
                    .HasForeignKey(d => d.Uicid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICOperationalParent_Codebook_LtbUIC_UICID");
            });

            modelBuilder.Entity<LtbUicoperationalParent08132020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LtbUICOperationalParent08132020", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateManuallyChanged).HasColumnType("datetime");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ParentUicid).HasColumnName("ParentUICID");

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UicoperationalParentId)
                    .HasColumnName("UICOperationalParentID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtbUicorganizationEntityStatus>(entity =>
            {
                entity.HasKey(e => e.UicorganizationEntityStatusId);

                entity.ToTable("LtbUICOrganizationEntityStatus", "Codebook");

                entity.HasComment("This table provides a listing of UIC organization entity status in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicorganizationEntityStatusId)
                    .HasColumnName("UICOrganizationEntityStatusID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicorganizationEntityStatusCode)
                    .IsRequired()
                    .HasColumnName("UICOrganizationEntityStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicorganizationEntityStatusParentId)
                    .HasColumnName("UICOrganizationEntityStatusParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicorganizationEntityStatusParent)
                    .WithMany(p => p.InverseUicorganizationEntityStatusParent)
                    .HasForeignKey(d => d.UicorganizationEntityStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbUICOrganizationEntityStatus_Codebook_LtbUICOrganizationEntityStatus_UICOrganizationEntityStatusParentID");
            });

            modelBuilder.Entity<LtbUicprofileStatus>(entity =>
            {
                entity.HasKey(e => e.UicprofileStatusId);

                entity.ToTable("LtbUICProfileStatus", "Codebook");

                entity.Property(e => e.UicprofileStatusId).HasColumnName("UICProfileStatusID");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.UicprofileStatusCode)
                    .IsRequired()
                    .HasColumnName("UICProfileStatusCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UicprofileStatusParentId).HasColumnName("UICProfileStatusParentID");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);

                entity.HasOne(d => d.UicprofileStatusParent)
                    .WithMany(p => p.InverseUicprofileStatusParent)
                    .HasForeignKey(d => d.UicprofileStatusParentId)
                    .HasConstraintName("FK_Codebook_LtbUICProfileStatus_Codebook_LtbUICProfileStatus_UICProfileStatusParentID");
            });

            modelBuilder.Entity<LtbUictype>(entity =>
            {
                entity.HasKey(e => e.UictypeId);

                entity.ToTable("LtbUICType", "Codebook");

                entity.HasComment("This table provides a self-referencing hierarchy of UIC Types (Responsible, Involved).");

                entity.Property(e => e.UictypeId)
                    .HasColumnName("UICTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UictypeCode)
                    .IsRequired()
                    .HasColumnName("UICTypeCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UictypeParentId)
                    .HasColumnName("UICTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UictypeParent)
                    .WithMany(p => p.InverseUictypeParent)
                    .HasForeignKey(d => d.UictypeParentId)
                    .HasConstraintName("FK_Codebook_LtbUICType_Codebook_LtbUICType_UICTypeParentID");
            });

            modelBuilder.Entity<LtbUicunitDescriptor>(entity =>
            {
                entity.HasKey(e => e.UicunitDescriptorId);

                entity.ToTable("LtbUICUnitDescriptor", "Codebook");

                entity.HasComment("This table provides a listing of UIC unit descriptors in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicunitDescriptorId)
                    .HasColumnName("UICUnitDescriptorID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.DoDserviceComponentId)
                    .HasColumnName("DoDServiceComponentID")
                    .HasComment("Unique ID representing Department of Defense (DoD) Service Component.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.IsActiveDuty).HasComment("UIC Unit Descriptor is active duty indicator.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicunitDescriptiorParentId)
                    .HasColumnName("UICUnitDescriptiorParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.UicunitDescriptorCode)
                    .IsRequired()
                    .HasColumnName("UICUnitDescriptorCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitGeneralMissionId)
                    .HasColumnName("UICUnitGeneralMissionID")
                    .HasComment("Unique ID representing UIC unit general mission.");

                entity.Property(e => e.UicunitPrimaryMissionId)
                    .HasColumnName("UICUnitPrimaryMissionID")
                    .HasComment("Unique ID representing UIC primary mission.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.DoDserviceComponent)
                    .WithMany(p => p.LtbUicunitDescriptors)
                    .HasForeignKey(d => d.DoDserviceComponentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICUnitDescriptor_Codebook_LtbDoDServiceComponent_DoDServiceComponentID");

                entity.HasOne(d => d.UicunitDescriptiorParent)
                    .WithMany(p => p.InverseUicunitDescriptiorParent)
                    .HasForeignKey(d => d.UicunitDescriptiorParentId)
                    .HasConstraintName("FK_Codebook_LtbUICUnitDescriptor_Codebook_LtbUICUnitDescriptor_UICUnitDescriptiorParentID");

                entity.HasOne(d => d.UicunitGeneralMission)
                    .WithMany(p => p.LtbUicunitDescriptors)
                    .HasForeignKey(d => d.UicunitGeneralMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICUnitDescriptor_Codebook_LtbUICUnitGeneralMission_UICUnitGeneralMissionID");

                entity.HasOne(d => d.UicunitPrimaryMission)
                    .WithMany(p => p.LtbUicunitDescriptors)
                    .HasForeignKey(d => d.UicunitPrimaryMissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbUICUnitDescriptor_Codebook_LtbUICUnitPrimaryMission_UICUnitPrimaryMissionID");
            });

            modelBuilder.Entity<LtbUicunitGeneralMission>(entity =>
            {
                entity.HasKey(e => e.UicunitGeneralMissionId);

                entity.ToTable("LtbUICUnitGeneralMission", "Codebook");

                entity.HasComment("This table provides a listing of UIC unit general mission codes in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicunitGeneralMissionId)
                    .HasColumnName("UICUnitGeneralMissionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicunitGeneralMissionCode)
                    .IsRequired()
                    .HasColumnName("UICUnitGeneralMissionCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitGeneralMissionParentId)
                    .HasColumnName("UICUnitGeneralMissionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicunitGeneralMissionParent)
                    .WithMany(p => p.InverseUicunitGeneralMissionParent)
                    .HasForeignKey(d => d.UicunitGeneralMissionParentId)
                    .HasConstraintName("FK_Codebook_LtbUICUnitGeneralMission_Codebook_LtbUICUnitGeneralMission_UICUnitGeneralMissionParentID");
            });

            modelBuilder.Entity<LtbUicunitLevel>(entity =>
            {
                entity.HasKey(e => e.UicunitLevelId);

                entity.ToTable("LtbUICUnitLevel", "Codebook");

                entity.HasComment("This table contains the UIC Unit Level Codes in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicunitLevelId)
                    .HasColumnName("UICUnitLevelID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicunitLevelCode)
                    .IsRequired()
                    .HasColumnName("UICUnitLevelCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitLevelParentId)
                    .HasColumnName("UICUnitLevelParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicunitLevelParent)
                    .WithMany(p => p.InverseUicunitLevelParent)
                    .HasForeignKey(d => d.UicunitLevelParentId)
                    .HasConstraintName("FK_Codebook_LtbUICUnitLevel_Codebook_LtbUICUnitLevel_UICUnitLevelParentID");
            });

            modelBuilder.Entity<LtbUicunitPrimaryMission>(entity =>
            {
                entity.HasKey(e => e.UicunitPrimaryMissionId);

                entity.ToTable("LtbUICUnitPrimaryMission", "Codebook");

                entity.HasComment("This table provides a listing of UIC unit primary  mission codes in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicunitPrimaryMissionId)
                    .HasColumnName("UICUnitPrimaryMissionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicunitPrimaryMissionCode)
                    .IsRequired()
                    .HasColumnName("UICUnitPrimaryMissionCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitPrimaryMissionParentId)
                    .HasColumnName("UICUnitPrimaryMissionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicunitPrimaryMissionParent)
                    .WithMany(p => p.InverseUicunitPrimaryMissionParent)
                    .HasForeignKey(d => d.UicunitPrimaryMissionParentId)
                    .HasConstraintName("FK_Codebook_LtbUICUnitPrimaryMission_Codebook_LtbUICUnitPrimaryMission_UICUnitPrimaryMissionParentID");
            });

            modelBuilder.Entity<LtbUicunitTypeConstruction>(entity =>
            {
                entity.HasKey(e => e.UicunitTypeConstructionId);

                entity.ToTable("LtbUICUnitTypeConstruction", "Codebook");

                entity.HasComment("This table provides a listing of UIC unit type construction in accordance with AR 10-87 Army commands, Army Service Component Commands, and Direct Reporting Units 4 Sep 2007. External Data Source.");

                entity.Property(e => e.UicunitTypeConstructionId)
                    .HasColumnName("UICUnitTypeConstructionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UicunitTypeConstructionCode)
                    .IsRequired()
                    .HasColumnName("UICUnitTypeConstructionCode")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UicunitTypeConstructionParentId)
                    .HasColumnName("UICUnitTypeConstructionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UicunitTypeConstructionParent)
                    .WithMany(p => p.InverseUicunitTypeConstructionParent)
                    .HasForeignKey(d => d.UicunitTypeConstructionParentId)
                    .HasConstraintName("FK_Codebook_LtbUICUnitTypeConstruction_Codebook_LtbUICUnitTypeConstruction_UICUnitTypeConstructionParentID");
            });

            modelBuilder.Entity<LtbUseOfSeat>(entity =>
            {
                entity.HasKey(e => e.UseOfSeatId);

                entity.ToTable("LtbUseOfSeat", "Codebook");

                entity.HasComment("This table provides a list of values to indicate personnel use of a seat in the aircraft at the time of a mishap.");

                entity.Property(e => e.UseOfSeatId)
                    .HasColumnName("UseOfSeatID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.UseOfSeatCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UseOfSeatParentId)
                    .HasColumnName("UseOfSeatParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UseOfSeatParent)
                    .WithMany(p => p.InverseUseOfSeatParent)
                    .HasForeignKey(d => d.UseOfSeatParentId)
                    .HasConstraintName("FK_Codebook_LtbUseOfSeat_Codebook_LtbUseOfSeat_UseOfSeatParentID");
            });

            modelBuilder.Entity<LtbUsstate>(entity =>
            {
                entity.HasKey(e => e.UsstateId);

                entity.ToTable("LtbUSState", "Codebook");

                entity.HasComment("This table contains US States with abbreviations. External Data Source.");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("Official abbreviation of the state in the United States. Ex. OR, FL, ...");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateCode)
                    .IsRequired()
                    .HasColumnName("USStateCode")
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.UsstateParentId)
                    .HasColumnName("USStateParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.HasOne(d => d.UsstateParent)
                    .WithMany(p => p.InverseUsstateParent)
                    .HasForeignKey(d => d.UsstateParentId)
                    .HasConstraintName("FK_Codebook_LtbUSState_Codebook_LtbUSState_USStateParentID");
            });

            modelBuilder.Entity<LtbVerificationFlagType>(entity =>
            {
                entity.HasKey(e => e.VerificationFlagTypeId);

                entity.ToTable("LtbVerificationFlagType", "Codebook");

                entity.HasComment("This table contains the types of verification that might be assessed by DARTOps in a mishap.");

                entity.Property(e => e.VerificationFlagTypeId)
                    .HasColumnName("VerificationFlagTypeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.PkcolumnName)
                    .HasColumnName("PKColumnName")
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Primary Key Column name of the mishap record to be verified.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.TableName)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("Table Name location of the mishap record to be verified.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.VerificationFlagTypeCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.VerificationFlagTypeParentId)
                    .HasColumnName("VerificationFlagTypeParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.HasOne(d => d.VerificationFlagTypeParent)
                    .WithMany(p => p.InverseVerificationFlagTypeParent)
                    .HasForeignKey(d => d.VerificationFlagTypeParentId)
                    .HasConstraintName("FK_Codebook_LtbVerificationFlagType_Codebook_LtbVerificationFlagType_VerificationFlagTypeParentID");
            });

            modelBuilder.Entity<LtbWaterCraftCondition>(entity =>
            {
                entity.HasKey(e => e.WaterCraftConditionId);

                entity.ToTable("LtbWaterCraftCondition", "Codebook");

                entity.HasComment("This table provides a list of water craft conditions (docked, moored, underway,...).");

                entity.Property(e => e.WaterCraftConditionId)
                    .HasColumnName("WaterCraftConditionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.WaterCraftConditionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.WaterCraftConditionParentId)
                    .HasColumnName("WaterCraftConditionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.HasOne(d => d.WaterCraftConditionParent)
                    .WithMany(p => p.InverseWaterCraftConditionParent)
                    .HasForeignKey(d => d.WaterCraftConditionParentId)
                    .HasConstraintName("FK_Codebook_LtbWaterCraftCondition_Codebook_LtbWaterCraftCondition_WaterCraftConditionParentID");
            });

            modelBuilder.Entity<LtbWorldRegion>(entity =>
            {
                entity.HasKey(e => e.WorldRegionId);

                entity.ToTable("LtbWorldRegion", "Codebook");

                entity.HasComment("This table provides a list of geographical world regions. ");

                entity.Property(e => e.WorldRegionId)
                    .HasColumnName("WorldRegionID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasComment("A detailed representation of the current value represented by the associated record.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasComment("A brief representation or account of the current value represented by the associated record.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.WorldRegionCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.Property(e => e.WorldRegionParentId)
                    .HasColumnName("WorldRegionParentID")
                    .HasComment("Record Parent ID with Foreign key to the Primary key of the table.");

                entity.HasOne(d => d.WorldRegionParent)
                    .WithMany(p => p.InverseWorldRegionParent)
                    .HasForeignKey(d => d.WorldRegionParentId)
                    .HasConstraintName("FK_Codebook_LtbWorldRegion_Codebook_LtbWorldRegion_WorldRegionParentID");
            });

            modelBuilder.Entity<LtbZipCode>(entity =>
            {
                entity.HasKey(e => e.ZipCodeId);

                entity.ToTable("LtbZipCode", "Codebook");

                entity.HasComment("This table provides a zipcode listing with City, County, State, Country, latitude, longitude. External Data Source.");

                entity.Property(e => e.ZipCodeId)
                    .HasColumnName("ZipCodeID")
                    .HasComment("Unique generated number for the record used for row identity.");

                entity.Property(e => e.City)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasComment("Zip Code City location.");

                entity.Property(e => e.CountryId)
                    .HasColumnName("CountryID")
                    .HasComment("Country of Zip Code. Unique ID representing Country.");

                entity.Property(e => e.CountyId)
                    .HasColumnName("CountyID")
                    .HasComment("County of Zip Code.  Unique ID representing County.");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to create the record.");

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user who created the record.");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was created.");

                entity.Property(e => e.DisplayOrder).HasComment("Numeric sorting order to control the way the codes/types are listed in drop downs within the application or module.");

                entity.Property(e => e.EndCollecting)
                    .HasColumnType("datetime")
                    .HasComment("Date the code was taken out of circulation for collection.  Incidents assigned the code value must have a Date Occurred less than or equal to the End Collecting Date.  The time for end collecting date should always be 2359.");

                entity.Property(e => e.EstablishDate)
                    .HasColumnType("datetime")
                    .HasComment("The date the code value was established for use.  This date may or may not be the same as the start collecting date.");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("The Business Rule, Regulatory or Other Army/DoD Guidance that states the code use requirement.  If available, include the publish and effective dates.");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(app_name())")
                    .HasComment("Application used to last update the record.");

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("(suser_sname())")
                    .HasComment("The user to last update the record.");

                entity.Property(e => e.LastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("The date the record was last updated.");

                entity.Property(e => e.Latitude)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Latitude of Zip Code.");

                entity.Property(e => e.Longitude)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Longitude of Zip Code.");

                entity.Property(e => e.StartCollecting)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date the code value was available to be assigned to a record.  Records assigned the code value must have a Date greater than or equal to the Start Collecting Date. Will default to the current date upon entry unless otherwise specified.  The time for start collecting date should always be 0000.");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasDefaultValueSql("('Y')")
                    .HasComment("A flag to indicate whether the code is active and assigned to action records. If no records have the code assigned and it is no longer active,  then the current value should be N. Valid values: Y/N");

                entity.Property(e => e.UsstateId)
                    .HasColumnName("USStateID")
                    .HasComment("Unique ID representing US State location.");

                entity.Property(e => e.ValueDefinition)
                    .IsUnicode(false)
                    .HasComment("The definition of the code value according to Regulatory Guidance or Business.");

                entity.Property(e => e.ZipCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("A code value for the current record.");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.LtbZipCodes)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Codebook_LtbZipCode_Codebook_LtbCountry_CountryID");

                entity.HasOne(d => d.County)
                    .WithMany(p => p.LtbZipCodes)
                    .HasForeignKey(d => d.CountyId)
                    .HasConstraintName("FK_Codebook_LtbZipCode_Codebook_LtbCounty_CountyID");

                entity.HasOne(d => d.Usstate)
                    .WithMany(p => p.LtbZipCodes)
                    .HasForeignKey(d => d.UsstateId)
                    .HasConstraintName("FK_Codebook_LtbZipCode_Codebook_LtbUSState_USStateID");
            });

            modelBuilder.Entity<Ltbjobtitlebkup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ltbjobtitlebkup", "Codebook");

                entity.Property(e => e.CreatedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.EstablishDate).HasColumnType("datetime");

                entity.Property(e => e.Guidance)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitleCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitleId)
                    .HasColumnName("JobTitleID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.JobTitleParentId).HasColumnName("JobTitleParentID");

                entity.Property(e => e.LastModifiedByApp)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedByUser)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefinition).IsUnicode(false);
            });

            modelBuilder.Entity<StbUicdetailDuplicateStationCleanUp2986>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StbUICDetailDuplicateStationCleanUp2986", "Codebook");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NewUsedValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationValid)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StbUicdetailDuplicateStationCleanUp7296>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StbUICDetailDuplicateStationCleanUp7296", "Codebook");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NewUsedValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationValid)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StbUicdetailDuplicateStationCleanUp7303>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StbUICDetailDuplicateStationCleanUp7303", "Codebook");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NewUsedValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationValid)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StbUicdetailDuplicateStationCleanUp7309>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StbUICDetailDuplicateStationCleanUp7309", "Codebook");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NewUsedValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationValid)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<StbUicdetailDuplicateStationCleanUp7320>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("StbUICDetailDuplicateStationCleanUp7320", "Codebook");

                entity.Property(e => e.DrrsAsortsId).HasColumnName("DrrsAsortsID");

                entity.Property(e => e.EndCollecting).HasColumnType("datetime");

                entity.Property(e => e.InstallationStationId).HasColumnName("InstallationStationID");

                entity.Property(e => e.LongName)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.NewUsedValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StartCollecting).HasColumnType("datetime");

                entity.Property(e => e.StationValid)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.UicdetailId)
                    .HasColumnName("UICDetailID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Uicid).HasColumnName("UICID");

                entity.Property(e => e.UnitIdentificationCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Used)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}